// Generated by CoffeeScript 1.11.1
var LocalStorage, bg, call, calls, changeLayout, chapter, circle, co, compare, d, dd, decorate, editor_change, exercise, fc, fillSelect, fixColor, grid, ip, linkAppend, linksClear, msg, msga, msgb, myCodeMirror, myprint, pretty, range, rd, reset, resizeTimer, run, run0, run1, saveToKeyStorage, sc, sel1, sel1change, sel2, sel2change, sel3, sel3click, setLinks, setMsg, setMsga, setMsgb, setup, sw;

myCodeMirror = null;

msg = null;

msga = null;

msgb = null;

sel1 = null;

sel2 = null;

sel3 = null;

chapter = "";

exercise = "";

call = '';

calls = {};

setMsg = function(txt) {
  msg.val(txt);
  if (txt === '') {
    return msg.css('background-color', '#FFFFFF');
  } else {
    return msg.css('background-color', '#FF0000');
  }
};

setMsga = function(txt) {
  return msga.val(txt);
};

setMsgb = function(txt) {
  return msgb.val(txt);
};

grid = function() {
  var i, k, len, ref;
  push();
  sc(1);
  ref = range(11);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    line(0, 20 * i, 200, 20 * i);
    line(20 * i, 0, 20 * i, 200);
  }
  return pop();
};

myprint = function() {
  return print(Array.prototype.slice.call(arguments).join(" "));
};

co = function() {
  return fixColor(arguments);
};

ip = function(y1, y2, x, x1, x2) {
  if (arguments.length === 3) {
    x1 = 0;
    x2 = 9;
  }
  return map(x, x1, x2, y1, y2);
};

fixColor = function(args) {
  var a, b, g, n, r;
  n = args.length;
  r = 0;
  g = 0;
  b = 0;
  a = 1;
  if (n === 1) {
    r = args[0];
    g = r;
    b = r;
  } else if (n === 3) {
    r = args[0];
    g = args[1];
    b = args[2];
  } else if (n === 4) {
    r = args[0];
    g = args[1];
    b = args[2];
    a = args[3];
  }
  return color(255 * r, 255 * g, 255 * b, 255 * a);
};

bg = function() {
  fill(fixColor(arguments));
  return rect(0, 0, 200, 200);
};

fc = function() {
  var n;
  n = arguments.length;
  if (n === 0) {
    return noFill();
  } else {
    return fill(fixColor(arguments));
  }
};

sc = function() {
  var n;
  n = arguments.length;
  if (n === 0) {
    return noStroke();
  } else {
    return stroke(fixColor(arguments));
  }
};

sw = function(n) {
  return strokeWeight(n);
};

circle = function(x, y, r) {
  return ellipse(x, y, 2 * r, 2 * r);
};

rd = function(vinkel) {
  return rotate(radians(vinkel));
};

range = _.range;

fillSelect = function(sel, dict) {
  var key, results;
  sel.empty();
  results = [];
  for (key in dict) {
    results.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results;
};

sel1change = function(sel) {
  chapter = sel.value;
  exercise = "";
  call = "";
  calls = {};
  fillSelect(sel2, data[chapter]);
  exercise = _.keys(data[chapter])[0];
  return sel2.val(exercise).change();
};

sel2change = function(sel) {
  exercise = sel.value;
  call = "";
  calls = decorate(data[chapter][exercise]["c"]);
  setLinks();
  fillSelect(sel3, calls);
  myCodeMirror.setValue(data[chapter][exercise]["b"]);
  setMsga("");
  setMsgb("");
  if (calls != null) {
    sel3.val("draw()").change();
    call = calls["draw()"];
  }
  run1();
  run0();
  myCodeMirror.focus();
  return compare();
};

sel3click = function(sel) {
  if (calls != null) {
    call = calls[sel.value];
  }
  run1();
  run0();
  myCodeMirror.focus();
  return compare();
};

setLinks = function() {
  var link, ref, results, text;
  linksClear();
  linkAppend(links, "https://github.com/ChristerNilsson/p5Dojo/blob/master/README.md", "Help");
  linkAppend(links, "https://p5js.org/reference", "p5");
  linkAppend(links, "http://coffeescript.org", "Coffeescript");
  linkAppend(links, "https://www.w3schools.com/js", "Javascript");
  linkAppend(links, "https://github.com/ChristerNilsson/Nilsson/blob/master/README.md", "Nilsson");
  linkAppend(links, "http://underscorejs.org/", "_");
  ref = data[chapter][exercise]["e"];
  results = [];
  for (text in ref) {
    link = ref[text];
    results.push(linkAppend(links, link, text));
  }
  return results;
};

linksClear = function() {
  return $("#links tr").remove();
};

d = function(s) {
  return "'" + s + "'";
};

dd = function(s) {
  return '"' + s + '"';
};

linkAppend = function(t, link, text) {
  var cell1, row, s;
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  s = '<a href=' + d(link);
  s += ' target=' + d('_blank');
  s += ' onmouseover=' + d('this.style.color=' + dd('yellow') + ';');
  s += ' onmouseout=' + d('this.style.color=' + dd('black') + ';');
  s += '>';
  s += text;
  s += '</a>';
  return cell1.innerHTML = s;
};

decorate = function(dict) {
  var k, len, method, methods, objekt, res, s;
  if (dict === void 0) {
    return {};
  }
  if (dict === null) {
    return {};
  }
  res = {};
  for (objekt in dict) {
    s = dict[objekt];
    methods = s.split("|");
    res["draw()"] = objekt + ".draw(); " + objekt + ".store()";
    for (k = 0, len = methods.length; k < len; k++) {
      method = methods[k];
      res[method] = objekt + "." + method + "; " + objekt + ".draw(); " + objekt + ".store()";
    }
  }
  return res;
};

changeLayout = function() {
  var w;
  w = $(window).width();
  $(".CodeMirror").width(w - 425);
  $("#canvas").css({
    top: 0,
    left: w - 215,
    position: 'absolute'
  });
  $("#msg").width(w - 430);
  $("#msgb").width(w - 430);
  return $("#msga").width(w - 430);
};

resizeTimer = 0;

$(window).resize(function() {
  clearTimeout(resizeTimer);
  return resizeTimer = setTimeout(changeLayout, 10);
});

setup = function() {
  var c;
  c = createCanvas(5 + 201 + 5, 5 + 201 + 5 + 201 + 5 + 201 + 5);
  pixelDensity(1);
  c.parent('canvas');
  msg = $('#msg');
  msga = $('#msga');
  msgb = $('#msgb');
  sel1 = $('#sel1');
  sel2 = $('#sel2');
  sel3 = $('#sel3');
  return fillSelect(sel1, data);
};

window.onbeforeunload = function() {
  var blob, i, k, key1, key2, len, ref, res, s;
  if (document.URL.indexOf("record") === -1) {
    return;
  }
  res = [];
  for (key1 in data) {
    chapter = data[key1];
    for (key2 in chapter) {
      exercise = chapter[key2];
      if (exercise.d) {
        res.push("### " + key1 + " ### " + key2 + "\n");
        ref = exercise.d;
        for (i = k = 0, len = ref.length; k < len; i = ++k) {
          s = ref[i];
          res.push("=== " + i + "\n");
          res.push(s + "\n");
        }
      }
    }
  }
  blob = new Blob(res, {
    type: "text/plain;charset=utf-8"
  });
  saveAs(blob, "recording.txt");
  return true;
};

window.onload = function() {
  var ta;
  ta = document.getElementById("code");
  myCodeMirror = CodeMirror.fromTextArea(document.getElementById("code"), {
    lineNumbers: true,
    mode: "coffeescript",
    keyMap: "sublime",
    theme: "dracula",
    autoCloseBrackets: true,
    lineWiseCopyCut: true,
    tabSize: 2,
    indentWithTabs: true
  });
  $(".CodeMirror").css('font-size', "16pt");
  myCodeMirror.on("change", editor_change);
  background(128);
  run(0, "");
  run(1, "");
  chapter = _.keys(data)[0];
  sel1.val(chapter).change();
  exercise = _.keys(data[chapter])[0];
  sel2.val(exercise).change();
  myCodeMirror.focus();
  window.resizeTo(1000, 750);
  return changeLayout();
};

saveToKeyStorage = function(b) {
  var k, len, line, place, ref, s;
  s = "";
  ref = b.split('\n');
  for (k = 0, len = ref.length; k < len; k++) {
    line = ref[k];
    if (line.indexOf("#") !== 0) {
      s += line;
    }
  }
  place = data[chapter][exercise];
  if (!place.d) {
    place.d = [];
  }
  return place.d.push(s);
};

editor_change = function() {
  if (_.size(calls) === 0) {
    call = "";
  } else {
    call = calls["draw()"];
  }
  run1();
  run0();
  if (msg.val() === '') {
    return compare();
  }
};

run0 = function() {
  var b;
  b = myCodeMirror.getValue();
  data[chapter][exercise]["b"] = b;
  run(0, b + "\n" + call);
  if (msg.val() === '') {
    return compare();
  }
};

run1 = function() {
  background(128);
  return run(1, data[chapter][exercise]["a"] + "\n" + call);
};

reset = function() {
  colorMode(RGB, 255);
  angleMode(RADIANS);
  bg(0);
  fc(0);
  sc(1);
  return grid();
};

run = function(n, coffee) {
  var code, e;
  resetMatrix();
  rectMode(CORNER);
  push();
  translate(5, 5 + n * 206);
  reset();
  setMsg("");
  try {
    code = transpile(coffee);
    try {
      eval(code);
    } catch (error) {
      e = error;
      setMsg(e.stack.split('\n')[0]);
    }
    pop();
    return true;
  } catch (error) {
    e = error;
    pop();
    setMsg(e.name + ": " + e.message);
    return false;
  }
};

compare = function() {
  var GAP, HEIGHT, WIDTH, area1, area2, area3, b, b1, b2, count, g, g1, g2, i, j, k, l, len, len1, lst1, lst2, r, r1, r2, ref, ref1;
  GAP = 5;
  WIDTH = 201;
  HEIGHT = 201;
  loadPixels();
  area1 = new Area(pixels, GAP, GAP, WIDTH, HEIGHT);
  area2 = new Area(pixels, GAP, 1 * (GAP + HEIGHT) + GAP, WIDTH, HEIGHT);
  area3 = new Area(pixels, GAP, 2 * (GAP + HEIGHT) + GAP, WIDTH, HEIGHT);
  count = 0;
  ref = range(WIDTH + 1);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(HEIGHT + 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      lst1 = area1.getPixel(i, j);
      r1 = lst1[0];
      g1 = lst1[1];
      b1 = lst1[2];
      lst2 = area2.getPixel(i, j);
      r2 = lst2[0];
      g2 = lst2[1];
      b2 = lst2[2];
      r = abs(r1 - r2);
      g = abs(g1 - g2);
      b = abs(b1 - b2);
      area3.setPixel(i, j, [r, g, b, 255]);
      if (r + g + b > 9) {
        count += 1;
      }
    }
  }
  updatePixels();
  return count;
};

pretty = function(s) {
  s = s.replace(/"/g, "");
  return s = s.replace(/,/g, " ");
};

LocalStorage = (function() {
  function LocalStorage(name1) {
    var dict, key, name, obj, value;
    this.name = name1;
    name = chapter + "/" + exercise + "/" + this.name;
    obj = localStorage.getItem(name);
    if (obj) {
      dict = JSON.parse(obj);
      for (key in dict) {
        value = dict[key];
        this[key] = value;
      }
    }
  }

  LocalStorage.prototype.store = function() {
    var name, obj;
    name = chapter + "/" + exercise + "/" + this.name;
    obj = JSON.stringify(this);
    if (this.name === 'a') {
      setMsga(pretty(obj));
    } else {
      setMsgb(pretty(obj));
    }
    return localStorage.setItem(name, obj);
  };

  LocalStorage.prototype.draw = function() {};

  return LocalStorage;

})();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Dojo\sketch.coffee