// Generated by CoffeeScript 1.11.1
var bg, call, changeLayout, chapter, circle, co, compare, exercise, expectedResult, fc, fillSelect, fixColor, grid, ip, msg, myCodeMirror, myprint, range, rd, reset, resizeTimer, run, run0, run1, saveToKeyStorage, sc, sel1, sel1change, sel2, sel2change, sel3, sel3change, setMsg, setup, sw;

myCodeMirror = null;

msg = "";

sel1 = null;

sel2 = null;

sel3 = null;

chapter = "";

exercise = "";

call = '';

expectedResult = 0;

setMsg = function(txt) {
  msg.val(txt);
  if (txt === '') {
    return msg.css('background-color', '#FFFFFF');
  } else {
    return msg.css('background-color', '#FF0000');
  }
};

grid = function() {
  var i, k, len, ref1;
  push();
  sc(1);
  ref1 = range(11);
  for (k = 0, len = ref1.length; k < len; k++) {
    i = ref1[k];
    line(0, 20 * i, 200, 20 * i);
    line(20 * i, 0, 20 * i, 200);
  }
  return pop();
};

myprint = function() {
  return print(Array.prototype.slice.call(arguments).join(" "));
};

co = function() {
  return fixColor(arguments);
};

ip = function(y1, y2, x, x1, x2) {
  if (arguments.length === 3) {
    x1 = 0;
    x2 = 9;
  }
  return map(x, x1, x2, y1, y2);
};

fixColor = function(args) {
  var a, b, g, n, r;
  n = args.length;
  r = 0;
  g = 0;
  b = 0;
  a = 1;
  if (n === 1) {
    r = args[0];
    g = r;
    b = r;
  } else if (n === 3) {
    r = args[0];
    g = args[1];
    b = args[2];
  } else if (n === 4) {
    r = args[0];
    g = args[1];
    b = args[2];
    a = args[3];
  }
  return color(255 * r, 255 * g, 255 * b, 255 * a);
};

bg = function() {
  fill(fixColor(arguments));
  return rect(0, 0, 200, 200);
};

fc = function() {
  var n;
  n = arguments.length;
  if (n === 0) {
    return noFill();
  } else {
    return fill(fixColor(arguments));
  }
};

sc = function() {
  var n;
  n = arguments.length;
  if (n === 0) {
    return noStroke();
  } else {
    return stroke(fixColor(arguments));
  }
};

sw = function(n) {
  return strokeWeight(n);
};

circle = function(x, y, r) {
  return ellipse(x, y, 2 * r, 2 * r);
};

rd = function(vinkel) {
  return rotate(radians(vinkel));
};

range = _.range;

fillSelect = function(sel, dict) {
  var key, results;
  sel.empty();
  results = [];
  for (key in dict) {
    results.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results;
};

sel1change = function(sel) {
  chapter = sel.value;
  exercise = "";
  call = "";
  fillSelect(sel2, data[chapter]);
  exercise = _.keys(data[chapter])[0];
  return sel2.val(exercise).change();
};

sel2change = function(sel) {
  var a, b, calls;
  exercise = sel.value;
  call = "";
  fillSelect(sel3, data[chapter][exercise]["c"]);
  a = data[chapter][exercise]["a"];
  a = transpile(a);
  run(1, a);
  b = data[chapter][exercise]["b"];
  myCodeMirror.setValue(b);
  myCodeMirror.focus();
  compare();
  calls = data[chapter][exercise]["c"];
  if (calls) {
    call = _.keys(calls)[0];
    return sel3.val(call).change();
  }
};

sel3change = function(sel) {
  var a, b;
  call = sel.value;
  expectedResult = data[chapter][exercise]["c"][sel.value];
  a = data[chapter][exercise]["a"];
  a = transpile(a);
  run(1, a + "\n" + transpile(call));
  b = data[chapter][exercise]["b"];
  run0();
  myCodeMirror.focus();
  return compare();
};

changeLayout = function() {
  var w;
  w = $(window).width();
  $(".CodeMirror").width(w - 430);
  $("#canvas").css({
    top: 0,
    left: w - 215,
    position: 'absolute'
  });
  return $("#msg").width(w - 435);
};

resizeTimer = 0;

$(window).resize(function() {
  clearTimeout(resizeTimer);
  return resizeTimer = setTimeout(changeLayout, 10);
});

setup = function() {
  var c;
  c = createCanvas(5 + 201 + 5, 5 + 201 + 5 + 201 + 5 + 201 + 5);
  pixelDensity(1);
  c.parent('canvas');
  msg = $('#msg');
  sel1 = $('#sel1');
  sel2 = $('#sel2');
  sel3 = $('#sel3');
  return fillSelect(sel1, data);
};

window.onbeforeunload = function() {
  var blob, i, k, key1, key2, len, ref1, res, s;
  if (document.URL.indexOf("record") === -1) {
    return;
  }
  res = [];
  for (key1 in data) {
    chapter = data[key1];
    for (key2 in chapter) {
      exercise = chapter[key2];
      if (exercise.d) {
        res.push("### " + key1 + " ### " + key2 + "\n");
        ref1 = exercise.d;
        for (i = k = 0, len = ref1.length; k < len; i = ++k) {
          s = ref1[i];
          res.push("=== " + i + "\n");
          res.push(s + "\n");
        }
      }
    }
  }
  blob = new Blob(res, {
    type: "text/plain;charset=utf-8"
  });
  saveAs(blob, "recording.txt");
  return true;
};

window.onload = function() {
  var help, p5Color, ref, ta;
  ta = document.getElementById("code");
  myCodeMirror = CodeMirror.fromTextArea(document.getElementById("code"), {
    lineNumbers: true,
    mode: "coffeescript",
    keyMap: "sublime",
    theme: "dracula",
    autoCloseBrackets: true,
    lineWiseCopyCut: true,
    tabSize: 2,
    indentWithTabs: true
  });
  $(".CodeMirror").css('font-size', "16pt");
  myCodeMirror.on("change", run0);
  help = createA('https://github.com/ChristerNilsson/p5Dojo/blob/master/README.md', 'Help', '_blank');
  help.position(10, 640);
  p5Color = createA('https://christernilsson.github.io/p5Color', 'Color', '_blank');
  p5Color.position(50, 640);
  ref = createA('https://p5js.org/reference', 'Reference', '_blank');
  ref.position(90, 640);
  background(128);
  run(0, "");
  run(1, "");
  chapter = _.keys(data)[0];
  sel1.val(chapter).change();
  exercise = _.keys(data[chapter])[0];
  sel2.val(exercise).change();
  myCodeMirror.focus();
  window.resizeTo(1000, 750);
  return changeLayout();
};

saveToKeyStorage = function(b) {
  var k, len, line, place, ref1, s;
  s = "";
  ref1 = b.split('\n');
  for (k = 0, len = ref1.length; k < len; k++) {
    line = ref1[k];
    if (line.indexOf("#") !== 0) {
      s += line;
    }
  }
  place = data[chapter][exercise];
  if (!place.d) {
    place.d = [];
  }
  return place.d.push(s);
};

run0 = function() {
  var b;
  background(128);
  b = myCodeMirror.getValue();
  data[chapter][exercise]["b"] = b;
  if (window.f !== null) {
    window.f = null;
  }
  run1();
  if (run(0, transpile(b + "\n" + call))) {
    saveToKeyStorage(b);
  }
  if (msg.val() === '') {
    return compare();
  }
};

run1 = function() {
  var a;
  a = data[chapter][exercise]["a"];
  return run(1, transpile(a + "\n" + call));
};

reset = function() {
  colorMode(RGB, 255);
  angleMode(RADIANS);
  bg(0);
  fc(0);
  sc(1);
  return grid();
};

run = function(n, code) {
  var err;
  resetMatrix();
  rectMode(CORNER);
  push();
  translate(5, 5 + n * 206);
  reset();
  try {
    setMsg('');
    eval(code);
    pop();
    return true;
  } catch (error) {
    err = error;
    pop();
    setMsg(err.stack);
    return false;
  }
};

compare = function() {
  var GAP, HEIGHT, WIDTH, area1, area2, area3, b, b1, b2, count, g, g1, g2, i, j, k, l, len, len1, lst1, lst2, r, r1, r2, ref1, ref2;
  GAP = 5;
  WIDTH = 201;
  HEIGHT = 201;
  loadPixels();
  area1 = new Area(pixels, GAP, GAP, WIDTH, HEIGHT);
  area2 = new Area(pixels, GAP, 1 * (GAP + HEIGHT) + GAP, WIDTH, HEIGHT);
  area3 = new Area(pixels, GAP, 2 * (GAP + HEIGHT) + GAP, WIDTH, HEIGHT);
  count = 0;
  ref1 = range(WIDTH + 1);
  for (k = 0, len = ref1.length; k < len; k++) {
    i = ref1[k];
    ref2 = range(HEIGHT + 1);
    for (l = 0, len1 = ref2.length; l < len1; l++) {
      j = ref2[l];
      lst1 = area1.getPixel(i, j);
      r1 = lst1[0];
      g1 = lst1[1];
      b1 = lst1[2];
      lst2 = area2.getPixel(i, j);
      r2 = lst2[0];
      g2 = lst2[1];
      b2 = lst2[2];
      r = abs(r1 - r2);
      g = abs(g1 - g2);
      b = abs(b1 - b2);
      area3.setPixel(i, j, [r, g, b, 255]);
      if (r + g + b > 9) {
        count += 1;
      }
    }
  }
  updatePixels();
  return count;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Dojo\sketch.coffee