// Generated by CoffeeScript 1.11.1
var data;

data = {
  Nyheter: {
    Nyheter: {
      b: "# NYHETER 2017 MAR 26\n#   L9: EngineeringNotation\n#   LB: Kalkylator Nian Korsord\n# NYHETER 2017 MAR 19\n#   LA: PickingBerries\n# NYHETER 2017 MAR 12\n#   L7: Roulette\n# NYHETER 2017 MAR 5\n#   L6: Two Arcs\n#   L9: BoardGame, SevenSegment, OlympicRing\n#   LA: Connect4, RushHour, Girlang, Braid, OlympicRings, ChessGame\n#   LB: Alphanumeric, GoldenStar, SpaceShip\n\n# Klicka nu på L1!\n\n# Eller besök Utställningen.\n# Dessa program är skapade av deltagare på p5Dojo.\n# Vill du också visa upp ditt alster? Ge i så fall koden till din mentor.",
      a: ""
    },
    clown: {
      b: "# LOC:30 bg circle fc sc sw line lerp (David Larsson)\n",
      a: "bg 0, 1, 0, 0.5\nfc 1, 0, 0\ncircle 10, 10, 5\ncircle 20, 20, 10\nfor i in range 10\n	x = lerp 10, 20, i\n	y = x\n	r = lerp 5, 10, i\n	circle x, y, r\nfc 0, 1, 1\ncircle 190, 10, 5\ncircle 180, 20, 10\nfor i in range 10\n	x = lerp 190, 180, i\n	y = lerp 10, 20, i\n	r = lerp 5, 10, i\n	circle x, y, r\nfc 1\ncircle 100, 100, 50\nfc 0\ncircle 80, 80, 10\ncircle 120, 80, 10\nsc 1, 1, 0\nsw 5\nline 70, 105, 80, 120\nline 80, 120, 115, 120\nline 115, 120, 130, 105\nfc 1, 0, 0\nsc 1, 0, 0\ncircle 100, 100, 10"
    },
    tomteluva: {
      b: "# LOC:12 circle fc sc triangle (Sabrina Larsson)\n",
      a: "bg 0,1,0\nfc 1,0,0\nsc 1,0,0\ntriangle 60,140,100,60,140,140\nfc 1\nsc 1\ncircle 60,140,10\ncircle 80,140,10\ncircle 100,140,10\ncircle 120,140,10\ncircle 140,140,10\ncircle 100,60,10		"
    },
    snowman: {
      b: "# LOC:21 circle fc line sc triangle (David Larsson)\n",
      a: "fc 1\ncircle 100, 150, 50\ncircle 100, 70, 40\nfc 0\ncircle 80, 60, 8\ncircle 120, 60, 8\ncircle 85, 90, 6\ncircle 95, 95, 6\ncircle 115, 90, 6\ncircle 105, 95, 6\nfc 1, 0, 0, 0.5\ntriangle 100, 65, 90, 80, 105, 75\nsc 1, 1, 0\nsw 3\nline 50, 140, 30, 90\nline 35, 100, 40, 80\nline 140, 140, 170, 90\nline 160, 105, 155, 100\nfc 1\nsc 1\nrect 2, 180, 196, 20"
    },
    christmasTree: {
      b: "# LOC:35 bg circle fc line rect quad sc triangle (Sabrina Larsson)\n",
      a: "bg 0 \nfc 0, 1, 0 \nsc 0, 1, 0 \ntriangle 100, 100, 180, 160, 20, 160 \ntriangle 100, 60, 160, 120, 40, 120 \ntriangle 100, 40, 140, 80, 60, 80 \nfc 0.5 \nsc 0.5 \nrect 80, 160, 40, 20 \nfc 1, 1, 0 \nsc 1, 1, 0 \nquad 100, 0, 120, 20, 100, 40, 80, 20 \nrect 85, 5, 30, 30 \nsc 1, 1, 0 \nline 80, 60, 140, 120 \nline 60, 100, 120, 160 \nfc 1, 0, 0 \nsc 1, 0, 0 \ncircle 80, 100, 5 \ncircle 140, 140, 5 \ncircle 100, 60, 5 \ncircle 60, 160, 5 \ncircle 100, 120, 5 \nfc 1 \nsc 1 \nrect 0, 180, 200, 20 \ncircle 20, 20, 5 \ncircle 40, 40, 5 \ncircle 10, 80, 5 \ncircle 30, 140, 5 \ncircle 50, 100, 5 \ncircle 120, 50, 5 \ncircle 160, 20, 5 \ncircle 180, 80, 5 \ncircle 160, 130, 5 \ncircle 190, 180, 5 "
    },
    santa: {
      b: "# LOC:18 bg circle ellipse fc rect quad sc triangle (Sabrina Larsson)\n",
      a: "bg 0,0,1\nfc 1,0,0\nsc 1,0,0\nellipse 100,50,60,70\nrect 60,20,30,10\nquad 140,10,145,20,120,25,115,20\nfc 0\nsc 0\ncircle 50,25,10\nrect 70,40,60,10\ncircle 140,20,10\nsc 1,1,0\nrect 100,45,5,5\nfc 0.5\nsc 0.5\nrect 60,80,80,20\nrect 80,100,40,60\ntriangle 100,140,0,200,200,200"
    },
    dist: {
      b: "# LOC:10 bg circle dist fc lerp map sc\n",
      a: "bg 0\nfc 1\nsc()\nfor i in range 10\n	x = lerp 10,30,i\n	for j in range 10\n		y = lerp 10,30,j\n		d = dist 100,100,x,y\n		r = map(d,0,150,1,20)/2\n		circle x,y,r"
    },
    bulge: {
      b: "# LOC:10 bg circle dist fill map noStroke sin\n",
      a: "bg 0\nfill 255\nnoStroke()\nfor i in range 20\n	for j in range 20\n		x = i*200/20+5\n		y = j*200/20+5\n		r = map(sin(i*PI/20),-1,1,1,3) * map(sin(j*PI/20),-1,1,1,3) / 2\n		circle x,y,r"
    },
    wave: {
      b: "# LOC:9 circle colorMode fill map noStroke sin PI\n",
      a: "colorMode HSB,360,100,100\nnoStroke()\nbg 0\nfor i in range 21\n	fill map(i,0,20,0,360),100,100\n	a = map i,0,20,0,2*PI\n	x = 10*i\n	y = map sin(a),-1,1,0,200\n	circle x,y,3"
    },
    circle: {
      b: "# LOC:10 bg circle colorMode cos fc map PI sc sin\n",
      a: "bg 0\ncolorMode HSB,360,100,100\nfor i in range 20\n	r=map i,0,19,0,360\n	fill r,255,255\n	a=map i,0,20,0,2*PI\n	sc()\n	x=map cos(a),-1,1,0,200\n	y=map sin(a),-1,1,0,200\n	circle x,y,3"
    },
    circles: {
      b: "# LOC:12 bg circle colorMode cos fill map noStroke translate sin PI\n",
      a: "bg 0\nnoStroke()\ncolorMode HSB,360,100,100\ntranslate 100,100\nfor i in range 20\n	for j in range 11\n		fill map(i,0,20,0,360),255,255\n		a = map i,0,20,0,2*PI\n		x = map cos(a),-1,1,-j*10,j*10\n		y = map sin(a),-1,1,-j*10,j*10\n		r = 3\n		circle x,y,r"
    },
    sized_circles: {
      b: "# LOC:12 circle colorMode cos fill map noStroke PI sin translate\n",
      a: "bg 0\nnoStroke()\ncolorMode HSB,360,100,100\ntranslate 100,100\nfor i in range 20\n	fill map(i,0,20,0,360),255,255\n	a = map i,0,20,0,2*PI\n	for j in range 11\n		x = map cos(a),-1,1,-j*10,j*10\n		y = map sin(a),-1,1,-j*10,j*10\n		r = map(j,0,10,0,10)/2\n		circle x,y,r"
    },
    rotated_circles: {
      b: "# LOC:17 circle cos map PI push pop rotate sin translate\n",
      a: "colorMode HSB,360,100,100\nsc()\nbg 0\ntranslate 100,100\nfor i in range 20\n	r = map i,0,20,0,360\n	a=map i,0,20,0,2*PI\n	for j in range 11\n		push()\n		rotate map j,0,10,0,360\n		fill r,255,255\n		x=map cos(a),-1,1,-j*10,j*10\n		y=map sin(a),-1,1,-j*10,j*10\n		circle x,y,j/2\n		pop()"
    },
    gravity: {
      b: "# LOC:6 circle lerp\n",
      a: "fc 1\nfor i in range 15\n	x=5+10*i\n	y=5+lerp(0,lerp(0,1,i),i)\n	circle x,y,5"
    },
    hypnoticA: {
      b: "# LOC:6 -> bg circle cos fc sc sin",
      a: "bg 0.5, 0, 0\nsc()\nfc 1\nfor i in range 100\n	x = 100 + cos(i) * i\n	y = 100 + sin(i) * i\n	circle x, y, 5"
    },
    hypnoticB: {
      b: "# LOC:7 -> bg circle cos fc map sc sin",
      a: "bg 0.5, 0, 0\nsc()\nfc 1\nfor i in range 100\n	x = 100 + cos(i) * i\n	y = 100 + sin(i) * i\n	speed = i/10.0\n	r = map sin(5*speed), -1, 1, 2, 5\n	circle x, y, r"
    }
  },
  "L1: bg point sc sw": {
    Background1: {
      b: "# Den första bitmappen ska du efterlikna genom att skriva ett program.\n# Den andra bitmappen visar resultatet av din kod.\n# Den tredje bitmappen visar skillnaden mellan de två andra. Ska bli svart när du är klar.\n\n# Tryck på PgDn för att komma till sista raden.\n# Skriv in följande kommando: bg 1\n# Kontrollera att de två första bitmapparna nu är lika, och att den tredje är helt svart.\n\n# Klicka på Background2 för att komma till nästa övning.\n# Klicka på p5Dojo nere till vänster för mera information.\n# Klicka på Reference för att se fler kommandon.\n",
      a: "bg 1"
    },
    Background2: {
      b: "# LOC:1 bg\n",
      a: "bg 0.5"
    },
    Background3: {
      b: "# LOC:1 bg\n",
      a: "bg 1,0,0"
    },
    Background4: {
      b: "# LOC:1 bg\n",
      a: "bg 1,1,0"
    },
    CornerPoints: {
      b: "# LOC:9 sc sw point\n\nsw 5\nsc 1,0,0\npoint 0,0\n",
      a: "sw 5\nsc 1,0,0\npoint 0,0\nsc 0,1,0\npoint 200,0\nsc 1,1,0\npoint 0,200\nsc 0\npoint 200,200"
    },
    MidPoints: {
      b: "# LOC:11 sc sw point\n",
      a: "sw 5\nsc 1,0,0\npoint 100,100\nsc 0,1,0\npoint 100,0\nsc 1,1,0\npoint 0,100\nsc 0\npoint 200,100\nsc 1\npoint 100,200"
    },
    CornerPoints3: {
      b: "# LOC:17 sc sw point\n",
      a: "sw 5\nsc 1,0,0\npoint 20,0\npoint 20,20\npoint 0,20\n\nsc 0,1,0\npoint 180,0\npoint 180,20\npoint 200,20\n\nsc 1,1,0\npoint 20,180\npoint 20,200\npoint 0,180\n\nsc 1\npoint 180,180\npoint 180,200\npoint 200,180"
    },
    CornerPoints7: {
      b: "# LOC:17 sc sw point\n",
      a: "sw 5\nsc 1,0,0\npoint 30,0\npoint 30,10\npoint 30,20\npoint 30,30\npoint 10,30\npoint 20,30\npoint 0,30\n\nsc 0,1,0\npoint 170,200\npoint 170,190\npoint 170,180\npoint 170,170\npoint 190,170\npoint 180,170\npoint 200,170"
    },
    Diagonal: {
      b: "# LOC:23 sc sw point\n",
      a: "sc 1,0,0\nsw 11\npoint 200,0\nsw 10\npoint 180,20\nsw 9\npoint 160,40\nsw 8\npoint 140,60\nsw 7\npoint 120,80\nsw 6\npoint 100,100\nsw 5\npoint 80,120\nsw 4\npoint 60,140\nsw 3\npoint 40,160\nsw 2\npoint 20,180\nsw 1\npoint 0,200"
    }
  },
  "L2: circle fc text": {
    Dices: {
      b: "# LOC:26 point sc\n",
      a: "point 10,10\n\nsc 1,0,0 \npoint 185,5 \npoint 195,15 \n\nsc 0,1,0 \npoint 85,65 \npoint 90,70 \npoint 95,75 \n\nsc 1,1,0 \npoint 165,105 \npoint 165,115 \npoint 175,105 \npoint 175,115 \n\nsc 1,0,1 \npoint 45,125 \npoint 45,135 \npoint 50,130 \npoint 55,125 \npoint 55,135 \n\nsc 0,1,1 \npoint 105,165 \npoint 105,170 \npoint 105,175 \npoint 115,165 \npoint 115,170 \npoint 115,175 "
    },
    Five: {
      b: "# LOC:12 bg circle fc sc\n",
      a: "bg 0.5\nsc()\nfc 1\ncircle 100,100,20\nfc 1,0,0\ncircle 40,40,20\nfc 1,1,0\ncircle 40,160,20\nfc 0,1,0\ncircle 160,160,20\nfc 0,0,1\ncircle 160,40,20"
    },
    WhiteCircle: {
      b: "# LOC:2 circle fc\n",
      a: "fc 1\ncircle 60,80,30"
    },
    WhiteEmptyCircle: {
      b: "# LOC:4 circle fc sc sw\n",
      a: "sc 1\nfc()\nsw 2\ncircle 70,90,40"
    },
    TwoDiscsA: {
      b: "# LOC:4 circle fc\n",
      a: "fc 1,0,0 \ncircle 80,100,40\nfc 0,1,0\ncircle 100,120,50"
    },
    TwoDiscsB: {
      b: "# LOC:4 circle fc\n",
      a: "fc 1,0,0\ncircle 80,100,40\nfc 0,1,0, 0.5\ncircle 120,100,50"
    },
    TextA: {
      b: "# LOC:3 fc textSize text\n",
      a: "fc 1,1,0\ntextSize 32\ntext 'Coffeescript',100,100"
    },
    TextB: {
      b: "# LOC:4 fc text textAlign textSize\n",
      a: "fc 1,1,0\ntextSize 32\ntextAlign CENTER,CENTER\ntext 'Coffeescript',100,100"
    }
  },
  "L3: ellipse rect": {
    GreenEllipse: {
      b: "# LOC:2 fc ellipse\n",
      a: "fc 0,1,0\nellipse 120,60, 60,40"
    },
    GreenRect: {
      b: "# LOC:2 fc rect\n",
      a: "fc 0,1,0\nrect 60,80, 40,50"
    },
    RedRect: {
      b: "# LOC:2 fc rect\n",
      a: "fc 1,0,0\nrect 80,70, 40,100"
    },
    Cross: {
      b: "# LOC:4 fc rect\n",
      a: "fc 1,0,0\nsc()\nrect 85,70, 70,10\nrect 115,40, 10,100"
    },
    SquareHole: {
      b: "# LOC:11 fc sc sw rect\n",
      a: "fc 0,1,1\nsc()\nrect 60,60, 80,20\nrect 60,120, 80,20\nrect 60,60, 20,80\nrect 120,60, 20,80\nfc()\nsc 1,0,0\nsw 3\nrect 60,60, 80,80\nrect 80,80, 40,40"
    }
  },
  "L4: for lerp rect": {
    HorizontalSquares: {
      b: "# LOC:3 rect for in range lerp \n\nrect  5,5,10,10\nrect 25,5,10,10\nfor i in range 5\n	x = lerp 5,25,i \n	rect",
      a: "for i in range 10\n	x = 5+20*i\n	rect x,5, 10,10"
    },
    VerticalSquares: {
      b: "# LOC:3 rect for in range lerp\n",
      a: "for i in range 10\n	y = 5+20*i\n	rect 5,y, 10,10"
    },
    DiagonalSquares: {
      b: "# LOC:4 rect for in range lerp\n",
      a: "for i in range 10\n	x = 5+20*i\n	y = 5+20*i\n	rect x,y, 10,10"
    },
    DoubleForLoop: {
      b: "# LOC:5 rect for in range lerp\n",
      a: "for i in range 10\n	for j in range 10\n		x = 5+20*i\n		y = 5+20*j\n		rect x,y, 10,10"
    },
    GrowingSquares: {
      b: "# LOC:7 rect rectMode for in range lerp\n",
      a: "rectMode CENTER\nfor i in range 10\n	x = 10+20*i\n	y = 10\n	w = 2*i\n	h = 2*i\n	rect x,y, w,h"
    },
    GrowingRedSquares: {
      b: "# LOC:8 fc for in range lerp rect rectMode\n",
      a: "rectMode CENTER\nfor i in range 10\n	fc i/10.0,0,0\n	x = 10+20*i\n	y = 10\n	w = 2*i\n	h = 2*i\n	rect x,y,w,h"
    },
    GrowingCircles: {
      b: "# LOC:6 for in range fc circle lerp\n",
      a: "for i in range 10\n	fc i/10.0,0,0\n	x = 10+20*i\n	y = 10\n	r = i\n	circle x,y,r"
    },
    ShrinkingCircles: {
      b: "# LOC:4 for in range fc circle lerp\n",
      a: "for i in range 10,0,-1\n	fc i/10.0,0,0\n	r = 10 * i\n	circle 100,100, r"
    },
    RedCone: {
      b: "# LOC:6 for in range fc circle lerp",
      a: "for i in range 10,0,-1\n	fc i/10.0,0,0\n	x = 10*i\n	y = 10*i\n	r = 10*i\n	circle x,y,r"
    },
    PentaLerp: {
      b: "# LOC:11 bg sc fc for in range circle lerp",
      a: "bg 0.5\nsc()\nfor i in range 10\n	for j in range 10\n		r = lerp 0.1,0.2,i\n		g = lerp 0.1,0.2,j\n		fc r,g,0\n		x = lerp 10,30,i\n		y = lerp 10,30,j\n		radius = lerp 1,1.5,i+j\n		circle x,y,radius"
    }
  },
  "L5: line for lerp": {
    HorizontalLine: {
      b: "# LOC:2 sc line\n",
      a: "sc 1,0,1\nline 10,70, 190,70"
    },
    VerticalLine: {
      b: "# LOC:3 sc sw line\n",
      a: "sc 1,1,0\nsw 10\nline 110,30, 110,170"
    },
    Line: {
      b: "# LOC:2 sc line\n",
      a: "sc 1,1,0\nline 20,0, 200,20"
    },
    Grid: {
      b: "# LOC:5 sc sw for in range line \n",
      a: "sc 1,1,0\nsw 2\nfor i in range 10,200,10\n	line 10,i,190,i\n	line i,190,i,10"
    },
    Skislope: {
      b: "# LOC:4 bg sc for in range lerp line",
      a: "bg 0\nsc 1,0,0\nfor i in range 21\n	line i*10,0,200,i*10"
    },
    Sunshine: {
      b: "# LOC:5 bg sc for in range lerp line\n",
      a: "bg 0\nsc 1,1,0\nfor i in range 10\n	line i*20,0,200-i*20,200\n	line 0,20+i*20,200,180-i*20"
    },
    Lines: {
      b: "# LOC:5 bg for in range lerp line (Noel Watson)\n",
      a: "bg 0\nfor i in range 37\n	line 10,10,190,10+i*5\n	line 10,100,190,10+i*5\n	line 10,190,190,10+i*5"
    },
    ChessRow: {
      b: "# LOC:5 % bg fc for in range lerp rect\n",
      a: "bg 0.5\nfor i in range 8\n	fc i%2\n	x = 20+20*i \n	rect x,20, 20,20"
    },
    ChessBoard: {
      b: "# LOC:7 bg fc for in range lerp rect\n",
      a: "bg 0.5\nfor i in range 8\n	for j in range 8\n		fc (i+j)%2\n		x = 20+20*i\n		y = 20+20*j\n		rect x,y, 20,20"
    },
    ChessCross: {
      b: "# LOC:8 for in range lerp rect if then fc (David Larsson)\n",
      a: "for i in range 10\n	for j in range 10\n		fc()\n		if i-j in [-2,0,2] then fc 1,1,0\n		if i+j in [7,9,11] then fc 1,0,0\n		x = 20*i\n		y = 20*j\n		rect x,y, 20,20"
    }
  },
  "L6: triangle quad arc": {
    Triangle: {
      b: "# LOC:2 fc triangle\n",
      a: "fc 1\ntriangle 20,40, 160,100, 100,140"
    },
    Quad: {
      b: "# LOC:2 fc quad\n",
      a: "fc 1,1,0\nquad 150,100, 180,20, 40,20, 100,140"
    },
    PacMan: {
      b: "# LOC:2 arc fc radians PIE\n",
      a: "fc 1,1,0\narc 100,100, 80,80, radians(-135),radians(135), PIE"
    },
    "Two Arcs": {
      b: "# LOC:7 fc sc sw arc radians strokeCap",
      a: "fc()\nsc 1,0,0\nsw 20\narc 100,70, 100,100, radians(-90),radians(90)\nsc 1,1,0\nstrokeCap SQUARE\narc 100,120, 100,100, radians(90),radians(-90)"
    }
  },
  "L7: translate rotate push pop": {
    TextC: {
      b: "# LOC:6 fc text textAlign textSize translate rd\n",
      a: "fc 1,1,0\ntextSize 32\ntextAlign CENTER,CENTER\ntranslate 100,100\nrd 90\ntext 'Coffeescript',0,0"
    },
    TextD: {
      b: "# LOC:6 fc text textAlign textSize translate rd\n",
      a: "fc 1,1,0\ntextSize 32\ntextAlign CENTER,CENTER\ntranslate 100,100\nrd 180\ntext 'Coffeescript',0,0"
    },
    RotatedEllipse: {
      b: "# LOC:5 ellipse translate rd\n",
      a: "fc 1,0,0\nsc()\ntranslate 100,100\nrd 45\nellipse 0,0, 80,40"
    },
    RotatedRectA: {
      b: "# LOC:4 fc rect\n",
      a: "fc 1,0,0\nrect 60,100, 40,40\nfc 0,1,0\nrect 140,100, 40,40"
    },
    RotatedRectB: {
      b: "# LOC:12 fc rect translate rd push pop\n",
      a: "push()\nfc 1,0,0\ntranslate 60,100\nrd 45\nrect 0,0, 40,40\npop()\npush()\nfc 0,1,0\ntranslate 140,100\nrd 45\nrect 0,0, 40,40\npop()"
    },
    RotatedRectC: {
      b: "# LOC:13 fc rect translate rd push pop\n",
      a: "rectMode CENTER\npush()\nfc 1,0,0\ntranslate 80,120\nrd 45\nrect 0,0, 40,40\npop()\npush()\nfc 0,1,0\ntranslate 160,120\nrd 45\nrect 0,0, 40,40\npop()"
    },
    Cards: {
      b: "# LOC:10 fc sc circle rect rectMode for in range lerp translate rd\n",
      a: "rectMode CENTER\nsc 1\ntranslate 100,100\nfor i in range 18,-1,-1\n  r = 1.0*i/18\n  fc r,0,0\n  w = 70+5*i\n  h = 70+5*i\n  rect 0,0, w,h\n  rd 5"
    },
    "Snow White and the 7 lerps": {
      b: "# LOC:17 bg fc sc rect rectMode for in range lerp translate rd push pop",
      a: "bg 1\nrectMode CENTER\nsc()\nfor i in range 10\n  for j in range 10\n    push()\n		x = lerp 10,30,i\n		y = lerp 10,30,j\n    translate x,y\n    rd lerp 0,10,i-j\n    r = lerp 0.1,0.2,i\n    g = lerp 0.1,0.2,j\n    fc r,g,0\n		w = lerp 5,6,i\n		h = lerp 5,6,j\n    rect 0,0, w,h\n    pop()"
    },
    Roulette: {
      b: "# LOC:20 bg sw fc sc for in range if then else == % / [] \"\" text textAlign arc strokeCap translate rotate rd TWO_PI push pop \n\nnumbers = [0,32,15,19,4,21,2,25,17,34,6,27,13,36,11,30,8,23,10,5,24,16,33,1,20,14,31,9,22,18,29,7,28,12,35,3,26]",
      a: "numbers = [0,32,15,19,4,21,2,25,17,34,6,27,13,36,11,30,8,23,10,5,24,16,33,1,20,14,31,9,22,18,29,7,28,12,35,3,26]\nbg 0.5\ntranslate 100,100\nrd -90\nd = PI/numbers.length\nsw 20\nstrokeCap SQUARE\ntextAlign CENTER,CENTER\nfor i in range numbers.length\n	push()\n	fc()\n	if i==0 then sc 0,1,0 else sc i%2,0,0\n	arc 0,0,180,180,-d,d\n	translate 90,0\n	rd 90\n	sc()\n	fc 1\n	text numbers[i],0,0\n	pop()\n	rotate TWO_PI / numbers.length"
    }
  },
  "L8: function, class": {
    ManyDices: {
      b: "# LOC:20 -> fc for in if then point [] % -> ==\n",
      a: "dots = (x,y,dots) ->\n	for dot in dots\n		if dot==1 then point x+8,y+8\n		if dot==2 then point x+8,y+10\n		if dot==3 then point x+8,y+12\n		if dot==4 then point x+10,y+10\n		if dot==5 then point x+12,y+8\n		if dot==6 then point x+12,y+10\n		if dot==7 then point x+12,y+12\ndice = (x,y,d) ->\n	if d==1 then dots x,y,[4]\n	if d==2 then dots x,y,[1,7]\n	if d==3 then dots x,y,[1,4,7]\n	if d==4 then dots x,y,[1,3,5,7]\n	if d==5 then dots x,y,[1,3,4,5,7]\n	if d==6 then dots x,y,[1,2,3,5,6,7]\n\nfc 0\nfor i in range 10\n	for j in range 10\n		dice 20*i,20*j,1+(i+j)%6"
    },
    Girlang: {
      b: "# LOC: 16 sc bg sw for in range line class constructor new @\n\nclass Cartesius\n	constructor : (@r,@g,@b, @x,@y) ->\n	go : (dx,dy) ->\n\ngirlang = (x,y,n,width,dx,dy) ->\n\ngirlang 0,0,9,5,20,20",
      a: "class Cartesius\n	constructor : (@r,@g,@b, @x,@y) ->\n	go : (dx,dy) ->\n		sc @r,@g,@b\n		line @x,@y,@x+dx,@y+dy\n		[@x,@y] = [@x+dx,@y+dy]\n\ngirlang = (x,y,n,width,dx,dy) ->\n	a = new Cartesius 1,0,0, x+dx/2,0\n	b = new Cartesius 1,1,0, x,y+dy/2\n\n	bg 0\n	sw width\n\n	for i in range n\n		a.go 0,dy\n		b.go dx,0\n		b.go 0,dy\n		a.go dx,0\n\ngirlang 0,0,9,5,20,20			"
    },
    Braid: {
      b: "# LOC: 19 sc bg sw for in range line class constructor new @\n\nclass Cartesius\n	constructor : (@r,@g,@b, @x,@y) ->\n	go : (dx,dy) ->\n\nbraid = (n,dx,dy,width) ->	\n\nbraid 5,18,18,6",
      a: "class Cartesius\n	constructor : (@r,@g,@b, @x,@y) ->\n	go : (dx,dy) ->\n		sc @r,@g,@b\n		line @x,@y,@x+dx,@y+dy\n		[@x,@y] = [@x+dx,@y+dy]\n\nbraid = (n,dx,dy,width) ->		\n\n	a = new Cartesius 1,0,0, 100-dx/2,dy/3\n	b = new Cartesius 1,1,0, 100+dx/2,2*dy/3\n	c = new Cartesius 0,1,0, 100-dx/2,dy\n\n	bg 0\n	sw width\n\n	for i in range n\n		a.go dx,dy\n		b.go -dx,dy\n		c.go dx,dy\n\n		a.go -dx,dy\n		b.go dx,dy\n		c.go -dx,dy\n\nbraid 5,18,18,6",
      e: {
        braid: "https://cdn.tutsplus.com/vector/uploads/legacy/tuts/000-2011/398-hair-braid/6.jpg"
      }
    },
    OlympicRings: {
      b: "# LOC:24 sc bg fc sw arc strokeCap class constructor new @\n\nclass Ring\n	constructor : (@x,@y,@r,@g,@b) ->\n	draw : (start=3,stopp=3,hour=PI/6) ->\n\nolympic = (x=100,y=100,radius=50,d=60,w=10) ->\n\nolympic()",
      a: "class Ring\n	constructor : (@x,@y,@radius, @r,@g,@b) ->\n	draw : (start=3,stopp=3,hour=PI/6) ->\n		sc @r,@g,@b\n		arc @x,@y,@radius,@radius,(start-3)*hour,(stopp-3)*hour\n		\nolympic = (x=100,y=100,radius=50,d=60,w=10) ->\n	r1 = new Ring x-d,  y,     radius, 0,0,1\n	r2 = new Ring x,    y,     radius, 0,0,0\n	r3 = new Ring x+d,  y,     radius, 1,0,0\n	r4 = new Ring x-d/2,y+d/3, radius, 1,1,0\n	r5 = new Ring x+d/2,y+d/3, radius, 0,1,0\n\n	strokeCap SQUARE\n	bg 0.5\n	fc()\n	sw w\n\n	r1.draw()\n	r3.draw()\n	r4.draw()\n	r5.draw()\n	r1.draw 2,4\n	r2.draw()\n	r4.draw 12,2\n	r5.draw 8,10\n	r3.draw 6,8\n\nolympic()			"
    }
  },
  "L9: interactivity, basic": {
    Counter: {
      b: "# LOC:12 bg fc sc text textAlign textSize + - class extends constructor new @ super ->\n# Klicka på reset() om du får ett felmeddelande!\n\nclass Counter extends Application\n	reset : -> super\n	draw  : -> super\n	up    : -> \n	down  : -> \n\ncounter = new Counter \"b\"     ",
      a: "class Counter extends Application\n	reset : -> \n		super\n		@counter = 0\n	up : -> @counter += 1\n	down : -> @counter -= 1\n	draw : ->\n		bg 0.5\n		fc 1,1,0\n		sc()\n		textAlign CENTER,CENTER\n		textSize 100\n		text @counter,100,100\n\ncounter = new Counter \"a\"   		",
      c: {
        counter: "reset()|up()|down()"
      }
    },
    Moire: {
      b: "# LOC:10 bg for line map class extends constructor new @ super ->\n\nclass Moire extends Application\n	reset : -> super\n	draw  : -> super\n	more  : -> \n	less  : -> \n\nmoire = new Moire \"b\"",
      a: "class Moire extends Application\n	reset : ->\n		super\n		@n = 2\n	draw : ->\n		background 0\n		for i in range @n\n			for j in range 37\n				line 10,map(i,0,@n-1,10,190),190,10+j*5\n	more : -> @n = constrain @n+1,2,10\n	less : -> @n = constrain @n-1,2,10\n\nmoire = new Moire \"a\"",
      c: {
        moire: "reset()|more()|less()"
      }
    },
    Square: {
      b: "# LOC:21 bg sw fc rect rectMode translate rd + class extends constructor new @ super ->\n\nclass Square extends Application\n	reset        : -> super\n	draw         : -> super\n	horisontellt : (d) -> \n	vertikalt    : (d) ->\n	storlek      : (d) -> \n	tjocklek     : (d) -> \n	rotera       : (d) ->\n\nsquare = new Square \"b\"",
      a: "class Square extends Application\n	reset : ->\n		super\n		@x = 100\n		@y = 100\n		@size = 100\n		@w = 1\n		@dir = 0\n	draw : ->\n		bg 0\n		rectMode CENTER\n		sw @w\n		fc 0.5\n		translate @x,@y\n		rd @dir \n		rect 0,0,@size,@size\n\n	horisontellt : (d) -> @x += d\n	vertikalt : (d) -> @y += d\n	storlek : (d) -> @size += d\n	tjocklek : (d) -> @w += d\n	rotera : (d) -> @dir += d \n\nsquare = new Square \"a\"",
      c: {
        square: "reset()|horisontellt -1|horisontellt +1|vertikalt -1|vertikalt +1|storlek -1|storlek +1|tjocklek -1|tjocklek 1|rotera -1|rotera +1"
      }
    },
    BoardGame: {
      b: "# LOC:21 bg fc sc circle for in range ->\n\nclass Board extends Application\n	reset : -> super\n	draw  : -> super\n	r     : (d) ->\n	d     : (d) ->\n	n     : (d) ->\n\nboard = new Board \"b\" ",
      a: "\nclass Board extends Application\n	reset : ->\n		super\n		@_x = 100\n		@_y = 100\n		@_d = 18\n		@_r = 7\n		@_n = 5\n	draw : ->	\n		bg 1\n		fc 0\n		sc()\n		@one @_d,@_r,@_x-@_n*@_d, @_y-@_d,2*@_n+1,3\n		@one @_d,@_r,@_x-@_d, @_y-@_n*@_d,3,2*@_n+1\n	one : (d,r,x0,y0,m,n) ->\n		for i in range m\n			for j in range n\n				circle x0+d*i,y0+d*j,r\n	r : (d) -> @_r += d\n	d : (d) -> @_d += d\n	n : (d) -> @_n += d\n\nboard = new Board \"a\" ",
      c: {
        board: "reset()|r -1|r +1|d -1|d +1|n -1|n +1"
      }
    },
    ColorCube: {
      b: "# LOC:17 -> bg fc for in range rect class extends constructor new @ super ->\n\nclass ColorCube extends Application\n	reset       : -> super\n	draw        : -> super\n	moreDetails : ->\n	lessDetails : ->\n	moreBlue    : ->\n	lessBlue    : ->\n\ncc = new ColorCube \"b\"",
      a: "class ColorCube extends Application\n	draw : ->\n		bg 0\n		d = 200.0/@n\n		m = @n-1.0\n		for r in range @n\n			for g in range @n\n				fc r/m,g/m,@b/m\n				rect r*d,g*d,d,d\n	reset : -> \n		super\n		@n=2\n		@b=0\n	moreDetails : -> if @n<255 then @n++\n	lessDetails : -> if @n>2 then @n--\n	moreBlue : -> if @b<@n-1 then @b+=1\n	lessBlue : -> if @b>0 then @b-=1\n\ncc = new ColorCube \"a\"",
      c: {
        cc: "reset()|moreDetails()|lessDetails()|moreBlue()|lessBlue()"
      }
    },
    "OlympicRing Prep": {
      b: "# LOC:21 sc fc sw arc strokeCap class extends constructor new @ super ->\n\nclass Ring extends Application\n	reset  : -> super\n	draw   : -> super\n	start  : (d) ->\n	stopp  : (d) -> \n	radius : (d) ->\n	width  : (d) ->\n\nring = new Ring \"b\"",
      a: "class Ring extends Application\n	reset : ->\n		super\n		@_start = 3\n		@_stopp = 6\n		@_w = 5\n		@_radius = 50\n	start : (d) -> @_start+=d\n	stopp : (d) -> @_stopp+=d\n	radius : (d) -> @_radius+=d\n	width : (d) -> @_w+=d\n	draw : ->\n		hour = PI/6\n		strokeCap SQUARE\n		fc()\n		sw @_w\n		sc 1,1,0\n		arc 100,100,2*@_radius,2*@_radius,(@_start-3)*hour,(@_stopp-3)*hour\n\nring = new Ring \"a\"",
      c: {
        ring: "reset()|start -1|start +1|stopp -1|stopp +1|radius -1|radius +1|width -1|width +1"
      }
    },
    SevenSegment: {
      b: "# LOC:26 bg sc fc rect rectMode if then & [] class extends constructor new @ super ->\n\nclass Digit extends Application\n	reset : -> super\n	draw  : -> super\n	up    : -> \n	down  : -> \n\ndigit = new Digit \"b\"",
      a: "class Digit extends Application\n	reset : ->\n		super\n		@d=0\n		@x=100\n		@y=100\n		@w=80\n		@h=18\n		@pattern = [63,6,91,79,102,109,125,7,127,111]\n	draw : ->\n		bg 0.5\n		sc()\n		fc 1,0,0\n		rectMode CENTER\n		p = @pattern[@d]\n		w0 = @w-20\n		if p & 1 then fc 1,0,0 else fc 0.3,0,0\n		rect @x,@y-@w,w0,@h \n		if p & 2 then fc 1,0,0 else fc 0.3,0,0\n		rect @x+@w/2,@y-@w/2,@h,w0 \n		if p & 4 then fc 1,0,0 else fc 0.3,0,0\n		rect @x+@w/2,@y+@w/2,@h,w0 \n		if p & 8 then fc 1,0,0 else fc 0.3,0,0\n		rect @x,@y+@w,w0,@h \n		if p & 16 then fc 1,0,0 else fc 0.3,0,0\n		rect @x-@w/2,@y+@w/2,@h,w0\n		if p & 32 then fc 1,0,0 else fc 0.3,0,0\n		rect @x-@w/2,@y-@w/2,@h,w0 \n		if p & 64 then fc 1,0,0 else fc 0.3,0,0\n		rect @x,@y,w0,@h \n	up   : -> @d = constrain @d + 1, 0, 9\n	down : -> @d = constrain @d - 1, 0, 9\n\ndigit = new Digit \"a\"",
      c: {
        digit: "reset()|up()|down()"
      }
    },
    Korg: {
      b: "# LOC:27 -> bg fc sc sw rect for if else class extends constructor new @ super ->\n\nclass Korg extends Application\n	reset   : -> super\n	draw    : -> super\n	more    : ->\n	less    : ->\n	thinner : ->\n	thicker : ->\n\nkorg = new Korg \"b\"",
      a: "class Korg extends Application\n	reset : ->\n		super\n		@n = 1\n		@w = 5\n\n	draw : ->\n		c1 = co 1,0,0\n		c2 = co 1,1,0\n		bg 0\n		sw @w\n		fill c1\n		stroke c2\n		q = 2*@n+1\n		d = 200.0/q\n		for i in range @n\n			rect d+i*2*d,0,d,200\n		for j in range @n\n			rect 0,d+j*2*d,200,d\n		for i in range @n\n			for j in range @n\n				if (i+j) % 2 == 1\n					rect i*2*d,d+j*2*d,3*d,d\n				else\n					rect d+i*2*d,j*2*d,d,3*d\n	more : -> @n = constrain @n+1,1,10\n	less : -> @n = constrain @n-1,1,10\n	thinner : -> @w = constrain @w-1,0,10\n	thicker : -> @w = constrain @w+1,0,10\n\nkorg = new Korg \"a\"",
      c: {
        korg: "reset()|more()|less()|thinner()|thicker()"
      }
    },
    Guess_a_number: {
      b: "# LOC:20 bg fc sc text textAlign for in range if then else * / + - % <=\n#        int @readInt class extends constructor new @ super ->\n\nclass Guess extends Application\n	reset     : -> super\n	draw      : -> super\n	readGuess : ->\n\nguess = new Guess \"b\"",
      a: "class Guess extends Application\n	reset : ->\n		super\n		@n = 100\n		@start = 0\n		@stopp = @n-1\n		@secret = 27\n\n	readGuess :-> \n		guess = @readInt()\n		if guess <= @secret then @start = guess+1 \n		if guess >= @secret then @stopp = guess-1 \n\n	draw : ->\n		bg 0.1\n		textAlign CENTER,CENTER\n		for i in range @n\n			if @start <= i <= @stopp then fc 1 else fc 0.5\n			sc()\n			x = i % 10\n			y = int i / 10\n			text i, 10 + 20 * x, 10 + 20 * y\n\nguess = new Guess \"a\"",
      c: {
        guess: "reset()|readGuess()"
      }
    },
    Connect4: {
      b: "# LOC:31 % bg fc sc sw circle text textAlign textSize for in range \n#        push pop class extends constructor new @ super -> \n\nclass Connect4 extends Application\n	reset : -> super\n	draw  : -> super\n	move  : (nr) ->\n	undo  : ->\n\nconnect4 = new Connect4 \"b\"",
      a: "class Connect4 extends Application\n	reset : ->\n		super\n		@list = ([] for i in range 7)\n		@moves = []\n	draw : ->\n		size = 27\n		bg 0\n		textAlign CENTER,CENTER\n		textSize size/2\n		fc()\n		sc 0.1,0.3,1\n		sw 0.2 * size\n		for i in range 7\n			for j in range 6\n				circle 100-size*3+size*i, 180-size*j, size/2\n		for column,i in @list\n			for nr,j in column\n				fc 1,nr%2,0\n				sw 1\n				circle 100-size*3+size*i, 180-size*j, size*0.4\n				fc 0\n				sc()\n				text nr, 100-size*3+size*i, 180-size*j\n		sc()\n		fc 1,(@moves.length+1)%2,0\n		circle 100,15,10\n	move : (nr) ->\n		@moves.push nr\n		@list[nr].push @moves.length \n	undo : -> if @moves.length > 0 then @list[@moves.pop()].pop()\n\nconnect4 = new Connect4 \"a\"",
      c: {
        connect4: "reset()|move 0|move 1|move 2|move 3|move 4|move 5|move 6|undo()"
      }
    },
    EngineeringNotation: {
      b: "# LOC:28 fc sc bg Math.floor Math.log10 constrain + - * / < ** text split\n#        extAlign textSize class extends constructor new @ super ->\n\nclass Engineering extends Application\n	reset : -> super\n	draw  : -> super \n	more  : -> \n	less  : -> \nengineering = new Engineering \"b\"   		",
      a: "class Engineering extends Application\n	reset : -> \n		super\n		@numbers = \"-273.15 1.6021766208e-19 3.1415926535 9.80665 101325 299792458 1073741824 6.022140857e23\"\n		@digits = 3\n		@prefixes = \"yzafpnµm kMGTPEZY\"\n	format : (x) -> \n		if x<0 then return \"-\" + @format(-x)\n		exponent = 3 * Math.floor Math.log10(x)/3\n		x = x / 10 ** exponent\n		if x < 10 then factor = 10 ** (@digits-1) \n		else if x < 100 then factor = 10 ** (@digits-2)\n		else factor = 10 ** (@digits-3)\n		Math.round(x * factor) / factor + @prefixes[8+exponent/3]\n	draw  : -> \n		bg 0\n		textAlign RIGHT,TOP\n		textSize 20\n		textFont \"monospace\"\n		fc 1,0,0\n		sc()\n		textAlign RIGHT,TOP\n		for nr,i in @numbers.split \" \"\n			x = parseFloat nr\n			if i<8 then text @format(1/x), 100-5,i*20\n			text @format(x), 200-5,i*20\n	more  : -> @digits = constrain @digits+1, 1,6\n	less  : -> @digits = constrain @digits-1, 1,6\n\nengineering = new Engineering \"a\"   		",
      c: {
        engineering: "reset()|more()|less()"
      }
    },
    Laboratorium: {
      b: "# Här kan du laborera med egna idéer!\n\nclass Laboratorium extends Application\n	reset : ->\n		super\n		@x = 100\n		@y = 100\n		@command = \"Ge ett kommando!\"\n	draw  : -> \n		textAlign CENTER,CENTER\n		textSize 24\n		fc 1,1,0\n		sc()\n		text @command,@x,@y\n	left  : -> @x -= 10\n	right : -> @x += 10\n	up    : -> @y -= 10\n	down  : -> @y += 10\n	a     : -> @command = \"a\"\n	b     : -> @command = \"b\"\n	c     : -> @command = \"c\"\n	d     : -> @command = \"d\"\n	e     : -> @command = int random 1,7\n	f     : -> @command = int millis()\n\nlaboratorium = new Laboratorium \"b\"     ",
      a: "class Laboratorium extends Application\n	reset : -> super\n	draw : -> \n	left : -> \n	right : -> \n	up : -> \n	down : -> \n	a : -> \n	b : -> \n	c : -> \n	d : -> \n	e : -> \n	f : -> \n\nlaboratorium = new Laboratorium \"a\"   		",
      c: {
        laboratorium: "reset()|left()|right()|up()|down()|a()|b()|c()|d()|e()|f()"
      }
    }
  },
  "LA: interactivity, advanced": {
    Klocka: {
      b: "# LOC:44 fc sc point rect rectMode circle for in range if then else \n#        translate rd push pop class extends constructor new @ super ->\n\nclass Klocka extends Application\n	reset  : -> super\n	draw   : -> super\n	hour   : (h) ->\n	minute : (m) ->\n	second : (s) ->\n\nklocka = new Klocka \"b\"",
      a: "class Klocka extends Application\n	reset : -> \n		super\n		@h=10\n		@m=9\n		@s=30\n	draw : ->\n		bg 0.5\n		rectMode CENTER\n		translate 100,100\n		@urtavla()\n		@visare (@h+@m/60.0)*30, 7,60,1,0,0\n		@visare (@m+@s/60.0)*6,5,80,0,1,0\n		@visare @s*6,2,80,1,1,0\n	hour   : (h) -> @adjust h,0,0\n	minute : (m) -> @adjust 0,m,0\n	second : (s) -> @adjust 0,0,s\n\n	adjust : (h,m,s) ->\n		@h+=h\n		@m+=m\n		@s+=s\n		t = 3600 * @h + 60 * @m + @s\n		@s = t %% 60\n		t = (t - @s) / 60\n		@m = t %% 60\n		t = (t - @m) / 60\n		@h = t %% 24\n\n	visare : (v,w,l,r,g,b) ->\n		push()\n		rd v-90\n		translate l/2,0\n		fc r,g,b\n		rect 0,0,l,w\n		pop()\n	urtavla : ->\n		fc 0\n		sc 1\n		sw 2\n		circle 0,0,90\n		fc 1\n		sc()\n		for i in range 60\n			circle 85,0, if i%5==0 then 3 else 2\n			rd 6\n\nklocka = new Klocka \"a\"",
      c: {
        klocka: "reset()|hour -1|hour +1|minute -1|minute +1|second -1|second +1"
      }
    },
    BouncingBalls: {
      b: "# LOC: 43 + ++ - -- %% == push if then for in splice length circle fc sw sc _.create class constructor super extends new @\n\nclass Ball \n	constructor : ->\n	update      : (grav) ->\n	render      : (sel) ->\n\nclass BouncingBalls extends Application\n\n	constructor : (@name) ->\n		super @name\n		if @balls then @balls = (_.create Ball.prototype, ball for ball in @balls)\n\n	reset   : -> super\n	draw    : -> super\n	update  : -> \n	add     : -> \n	delete  : ->\n	selNext : -> \n	selPrev : -> \n	grow    : ->    \n	shrink  : ->  \n	nextCol : -> \n	prevCol : -> \n	gravity : ->\n\nbouncingBalls = new BouncingBalls \"b\"",
      a: "class Ball \n	constructor : ->\n		@x = 100\n		@y = 100\n		@r = 10\n		@c = 1\n		@dx = 3\n		@dy = 4\n	update : (grav) ->\n		@x += @dx\n		@y += @dy\n		if not (@r < @x < 200-@r) then @dx = - @dx\n		if not (@r < @y < 200-@r) then @dy = - @dy\n		if grav and @y < 200-@r then @dy += 1 \n	render : (sel) ->\n		fcc @c\n		sw 2\n		if sel then scc 7 else sc()\n		circle @x,@y,@r\n\nclass BouncingBalls extends Application\n\n	constructor : (@name) ->\n		super @name\n		if @balls then @balls = (_.create Ball.prototype, ball for ball in @balls)\n\n	reset : ->\n		super\n		@balls = []\n		@sel = -1\n		@grav = false\n	draw : ->\n		for ball,i in @balls\n			ball.render i==@sel, @grav\n	update : -> \n		for ball in @balls\n			ball.update(@grav)\n\n	add : -> \n		@balls.push new Ball\n		@sel = @balls.length - 1\n\n	delete :->\n		@balls.splice @sel, 1\n		if @sel >= @balls.length then @sel = @balls.length - 1  \n	selNext : -> @sel = (@sel + 1) %% @balls.length\n	selPrev : -> @sel = (@sel - 1) %% @balls.length\n	grow : ->    @balls[@sel].r++\n	shrink : ->  @balls[@sel].r--\n	nextCol : -> @balls[@sel].c = (@balls[@sel].c+1) %% 8\n	prevCol : -> @balls[@sel].c = (@balls[@sel].c-1) %% 8\n	gravity : -> @grav = not @grav \n\nbouncingBalls = new BouncingBalls \"a\"",
      c: {
        bouncingBalls: "reset()|update()|add()|delete()|selNext()|selPrev()|grow()|shrink()|nextCol()|prevCol()|gravity()"
      }
    },
    Braider: {
      b: "# LOC: 49 sc bg sw for in range if then + line class constructor extends new @\n\nclass Cartesius\n	constructor : (x,y,c) ->\n	go          : (dx,dy) ->\n	down        : (d) ->\n	left        : (d) ->\n\nclass Braider extends Application\n	braid   : (type) -> \n	draw    : -> super\n	forward : ->\n	back    : ->\n\nbraider = new Braider \"b\"",
      a: "class Cartesius\n	constructor : (@x,@y,@c) ->\n	go : (dx,dy) ->\n		scc @c \n		line @x,@y,@x+dx,@y+dy\n		[@x,@y] = [@x+dx,@y+dy]\n	down : (d) -> @go 0,d\n	left : (d) -> @go -d,0\n\nclass Braider extends Application\n\n	braid : (@type) -> \n		@n = 0\n		@forward()\n	draw : ->\n		if @type==1\n			sw 5\n			a = new Cartesius 200,20, 1 # röd\n			for i in range @n\n				a.go -20,20\n		if @type==2\n			sw 5\n			a = new Cartesius 200,20, 1 # röd\n			b = new Cartesius 190,10, 2 # grön\n			for i in range @n\n				if i%4 == 0 then b.down 20\n				if i%4 == 1 then a.left 20\n				if i%4 == 2 then a.down 20\n				if i%4 == 3 then b.left 20\n		if @type==3\n			sw 5\n			a = new Cartesius 200,30, 1\n			b = new Cartesius 190,10, 2\n			c = new Cartesius 180,20, 3\n			for i in range @n\n				if i%6 == 0 then b.down 30\n				if i%6 == 1 then a.left 30\n				if i%6 == 2 then c.down 30\n				if i%6 == 3 then b.left 30\n				if i%6 == 4 then a.down 30\n				if i%6 == 5 then c.left 30\n		if @type==4\n			sw 10\n			a = new Cartesius 150,40, 1 # röd\n			b = new Cartesius 170,20, 2 # grön\n			c = new Cartesius 160,30, 3 # gul\n			d = new Cartesius 190,50, 4 # blå\n			for i in range @n\n				if i%12 == 0 then b.down 50\n				if i%12 == 1 then c.left 30; c.down 30\n				if i%12 == 2 then d.left 50\n				if i%12 == 3 then a.down 50\n				if i%12 == 4 then b.left 50\n				if i%12 == 5 then c.down 50\n				if i%12 == 6 then d.left 30; d.down 30\n				if i%12 == 7 then a.left 50\n				if i%12 == 8 then b.left 30; b.down 30\n				if i%12 == 9 then d.down 50\n				if i%12 == 10 then c.left 50\n				if i%12 == 11 then a.left 30; a.down 30\n\n	forward : -> @n++\n	back : -> @n--\n\nbraider = new Braider \"a\"",
      c: {
        braider: "braid 1|braid 2|braid 3|braid 4|forward()|back()"
      },
      e: {
        braid: "https://cdn.tutsplus.com/vector/uploads/legacy/tuts/000-2011/398-hair-braid/6.jpg"
      }
    },
    RecursiveCircle: {
      b: "# LOC:10 -> sc circle if return < class extends constructor new @ super ->\n\nclass RecursiveCircle extends Application\n	reset   : -> super\n	draw    : -> super\n	circles : (x,y,r,level) ->\n	more    : -> \n	less    : -> \n\nrc = new RecursiveCircle \"b\"",
      a: "\nclass RecursiveCircle extends Application\n	reset : -> \n		super\n		@n = 0\n	draw : -> @circles 100,100,100,@n		\n	circles : (x,y,r,level) ->\n		circle x,y,r\n		if level <= 0 then return\n		@circles x-r/2, y, r/2, level-1\n		@circles x+r/2, y, r/2, level-1\n	more : -> @n = constrain @n+1,0,10\n	less : -> @n = constrain @n-1,0,10\n\nrc = new RecursiveCircle \"a\"",
      c: {
        rc: "reset()|more()|less()"
      }
    },
    Nim: {
      b: "# LOC:38 bg fc sc circle * + - ^ if then else @readInt _.isEqual return <  \n#        constrain text textAlign textSize class extends constructor new @ super ->\n\nclass Nim extends Application\n	reset  : -> super\n	draw   : -> super\n	read_a : ->\n	read_b : ->\n	read_c : ->\n	pick_a : ->\n	pick_b : ->\n	pick_c : ->\n	ok     : -> \n	hint   : ->\n\nnim = new Nim \"b\"  ",
      a: "class Nim extends Application\n	reset : -> \n		super\n		@board = [7,8,9]\n		@active = -1\n		@player = 0\n	move : (index) ->\n		if @active in [index,-1]\n			@active = index\n			@board[@active] = constrain @board[@active]-1, 0, 99\n\n	read_a : -> @board[0] = @readInt()\n	read_b : -> @board[1] = @readInt()\n	read_c : -> @board[2] = @readInt()\n\n	pick_a : -> @move 0\n	pick_b : -> @move 1\n	pick_c : -> @move 2\n	ok : -> \n		if @active == -1 then return\n		@player = 1 - @player\n		@active = -1 \n	draw : ->\n		textAlign CENTER,CENTER\n		textSize 32\n		bg 0\n		fc 1\n		sc()\n		text @board[0],50,100\n		text @board[1],100,100\n		text @board[2],150,100\n		fc 1,@player,0\n		circle 20 + @player * 160,20,10\n	hint : ->\n		if @active != -1 then return\n		[a,b,c] = @board\n		board = if (b^c) < a then [b^c,b,c] else if (a^c) < b then [a,a^c,c] else if (a^b) < c then [a,b,a^b] else [a,b,c]\n		if not _.isEqual(board,@board)\n			@board = board\n			@player = 1 - @player\n\nnim = new Nim \"a\"   \n		",
      c: {
        nim: "reset()|read_a()|read_b()|read_c()|pick_a()|pick_b()|pick_c()|ok()|hint()"
      },
      e: {
        Nim: "https://en.wikipedia.org/wiki/Nim",
        xor: "https://en.wikipedia.org/wiki/Bitwise_operation#XOR",
        Nimrod: "https://en.wikipedia.org/wiki/Nimrod_(computing)"
      }
    },
    ChessGame: {
      b: "# LOC:64 bg fc sc sw point rect rectMode if then else text textSize textAlign class constructor new @\n#        for in range push split length indexOf\n\nclass Chess extends Application\n	reset : -> super\n	draw  : -> super\n	move  : (d) ->\n\nchess = new Chess \"b\"",
      a: "class Chess extends Application\n\n	reset : ->\n		super\n		@moves = \"e2e4 e7e5 g1f3 b8c6 f1c4\".split \" \"\n		@size = 22\n		@x = 100\n		@y = 100\n		@n = 0\n\n	putPieces : (pieces) ->\n		res = []\n		for i in range 64\n			res.push \"\" \n		arr = pieces.split \" \"\n		for piece in arr\n			if piece.length == 2\n				chr = \"o\"\n				sq = piece\n			else\n				chr = piece[0]\n				sq = piece[1..]\n			[col,row] = @getIndex sq\n			res[8*col+row] = chr	\n		res\n\n	getIndex : (sq) ->\n		col = \"abcdefgh\".indexOf sq[0]\n		row = \"12345678\".indexOf sq[1]\n		[col,row]\n		\n	render : (pieces,c) ->\n		fc c\n		sc c\n		for row in range 8\n			for col in range 8\n				piece = pieces[8*col+row]\n				x = @x - 3.5 * @size + col * @size\n				y = @y - 3.5 * @size + (7-row) * @size\n				if piece == \"o\"\n					sw @size/2\n					point x,y\n				else if piece in \"KQRBN\"\n					sw 1-c\n					text piece,x, 1+y		\n				\n	draw : ->\n		bg 0.5\n		textSize 0.9 * @size\n		textAlign CENTER,CENTER\n		rectMode CENTER\n		sc()\n		for i in range 8\n			for j in range 8\n				if (i+j)%2 == 1 then fc 0.4 else fc 0.6\n				rect @x-3.5*@size+@size*i, @y-3.5*@size+@size*j, @size, @size\n\n		white = @putPieces \"Ra1 Nb1 Bc1 Qd1 Ke1 Bf1 Ng1 Rh1 a2 b2 c2 d2 e2 f2 g2 h2\"\n		black = @putPieces \"Ra8 Nb8 Bc8 Qd8 Ke8 Bf8 Ng8 Rh8 a7 b7 c7 d7 e7 f7 g7 h7\"\n\n		for i in range @n\n			@movePiece @moves[i], if i%2==0 then white else black		\n\n		@render white,1\n		@render black,0\n\n	movePiece : (m,player) ->\n		[col1,row1] = @getIndex m[0..1]\n		[col2,row2] = @getIndex m[2..3]\n		player[col2*8+row2] = player[col1*8+row1]\n		player[col1*8+row1] = \"\"\n\n	move : (d) -> \n		@n += d\n		@n = constrain @n,0,@moves.length\n\nchess = new Chess \"a\"\n",
      c: {
        chess: "reset()|move -1|move 1"
      }
    },
    SpaceShip: {
      b: "# LOC:35 sc sw point triangle translate rd cos sin radians \n#        push pop class extends constructor new @ super ->\n\nclass Shot\n	constructor : (@x,@y,@dir) ->\n	render      : ->	\n	move        : ->\n\nclass Ship extends Application\n	constructor : (@name) ->\n		super @name\n		if @shots then @shots = (_.create Shot.prototype, shot for shot in @shots)\n	reset   : -> super\n	draw    : -> super\n	left    : -> \n	right   : -> \n	forward : -> \n	shoot   : ->		\n\nship = new Ship \"b\"	",
      a: "class Shot\n	constructor : (@x,@y,@dir) ->\n	render : ->	point @x,@y \n	move : ->\n		@x += int 5 * cos radians @dir\n		@y += int 5 * sin radians @dir\n\nclass Ship extends Application \n\n	constructor : (@name) ->\n		super @name\n		if @shots then @shots = (_.create Shot.prototype, shot for shot in @shots)\n\n	reset : ->\n		super\n		@x = 100\n		@y = 100\n		@s = 10\n		@dir = 0\n		@shots = []\n\n	left    : -> @dir -= 5\n	right   : -> @dir += 5\n	forward : -> \n		@x += 5 * cos radians @dir\n		@y += 5 * sin radians @dir\n\n	shoot : ->\n		@shots.push new Shot int(@x), int(@y), @dir\n\n	draw : ->\n		push()\n		translate @x,@y\n		rd @dir\n		sc 1,1,0\n		sw 2\n		triangle 2*@s,0, -@s,@s, -@s,-@s\n		sw 5\n		point 0,0\n		pop()\n		for shot in @shots\n			shot.move()\n			shot.render()\n\nship = new Ship \"a\"	",
      c: {
        ship: "reset()|left()|right()|forward()|shoot()"
      }
    },
    RushHour: {
      b: "# LOC:51 bg sc fc rect text textAlign push class extends constructor new @ super -> \n#	       if then else for in range toLowerCase indexOf \n\nclass Car\n	constructor : (@i,@j,@w,@h,@r,@g,@b) ->\n	render      : (i) -> \n	move        : (d) ->\n\nclass RushHour extends Application\n	constructor : (@name) ->\n		super @name\n		if @a then @a = _.create Car.prototype, @a\n		if @b then @b = _.create Car.prototype, @b\n		if @c then @c = _.create Car.prototype, @c\n		if @d then @d = _.create Car.prototype, @d\n	reset   : -> super\n	draw    : -> super\n	add     : (pos,r,g,b) -> \n	A_Left  : ->\n	A_Right : ->\n	B_Up    : -> \n	B_Down  : -> \n	C_Left  : -> \n	C_Right : ->\n	D_Up    : -> \n	D_Down  : -> \n\nrushHour = new RushHour \"b\"\n",
      a: "class Car\n	constructor : (@i,@j,@w,@h,@r,@g,@b) ->\n	render : (i) -> \n		fc @r,@g,@b\n		rect 40+20*@i+2, 40+20*@j+2, 20*@w-4, 20*@h-4\n		fc 0\n		text \"ABCDEFGH\"[i], 50+20*@i, 50+20*@j\n	move : (d) ->\n		if @w == 1 then @j += d\n		if @h == 1 then @i += d\n\nclass RushHour extends Application\n\n	constructor : (@name) ->\n		super @name\n		if @a then @a = _.create Car.prototype, @a\n		if @b then @b = _.create Car.prototype, @b\n		if @c then @c = _.create Car.prototype, @c\n		if @d then @d = _.create Car.prototype, @d\n\n	reset : ->\n		super\n		@a = @add \"d3e3\",1,0,0\n		@b = @add \"d6d5\",1,1,0\n		@c = @add \"e5f5\",0,1,0\n		@d = @add \"f3f1\",0,1,1\n\n	draw : ->\n		textAlign CENTER,CENTER\n		bg 0\n		sc()\n		fc 0.5,0.5,0.5\n		rect 40,40,120,120\n		rect 160,80,40,20\n		fc 1\n		sc()\n		for i in range 6\n			text \"123456\"[i],30,50+20*i\n			text \"abcdef\"[i],50+20*i,170\n		@a.render 0\n		@b.render 1\n		@c.render 2\n		@d.render 3\n\n	col : (s) -> \"abcdef\".indexOf s\n	row : (s) -> \"123456\".indexOf s\n\n	add : (pos,r,g,b) -> \n		i = @col pos[0] \n		j = @row pos[3]\n		w = @col(pos[2]) - i + 1\n		#h = j - @row(pos[1]) + 1 \n		h = @row(pos[1]) - j + 1 \n		new Car i,j,w,h,r,g,b\n\n	A_Left  : -> @a.move -1\n	A_Right : -> @a.move  1	\n	B_Up    : -> @b.move -1	\n	B_Down  : -> @b.move  1\n	C_Left  : -> @c.move -1\n	C_Right : -> @c.move  1\n	D_Up    : -> @d.move -1\n	D_Down  : -> @d.move  1\n			\nrushHour = new RushHour \"a\"",
      c: {
        rushHour: "reset()|A_Left()|A_Right()|B_Up()|B_Down()|C_Left()|C_Right()|D_Up()|D_Down()"
      },
      e: {
        RushHour: "https://en.wikipedia.org/wiki/Rush_Hour_(board_game)"
      }
    },
    PickingBerries: {
      b: "# LOC:46 bg sc fc sw [] * + line text textSize textAlign constrain dist \n#        splice break for in class extends constructor new @ super ->\n\nclass PickingBerries extends Application\n	reset      : -> super\n	draw       : -> super\n	left       : -> \n	right      : -> \n	up         : -> \n	down       : -> \n	snailSpeed : ->\n	slowSpeed  : ->\n	highSpeed  : ->\n	warpSpeed  : ->\n	pick       : ->\n\nberries = new PickingBerries \"b\"",
      a: "class PickingBerries extends Application\n\n	reset : ->\n		super\n		@x = 100\n		@y = 100\n		@speed = 2 # 0..3\n		@speeds = [1,5,20,50]\n		@clicks = 0\n		@xs = [100,189,124,196,13,187,12,153,32,131]\n		@ys = [107,175,138,188,37,78,168,31,20,188]\n		@moves = \"\"\n		@dxdy = [[1,0],[0,1],[-1,0],[0,-1]]\n\n	draw : ->\n		bg 0\n		rectMode CENTER\n		sc 1\n		sw 1\n		rect @x,@y,2*@speeds[@speed],2*@speeds[@speed]\n		for [dx,dy] in @dxdy\n			for i in range 4\n				point @x+dx*@speeds[i], @y+dy*@speeds[i]\n		\n		fc 1,1,0\n		sc()\n		textSize 20\n		textAlign CENTER,CENTER\n		text @clicks,100,180\n\n		sc 1,0,0\n		sw 2\n		for [x,y] in _.zip @xs,@ys\n			line x-3,y-3,x+3,y+3\n			line x+3,y-3,x-3,y+3\n\n	move : (i) ->\n		[dx,dy] = @dxdy[i] 		\n		@x += dx * @speeds[@speed]\n		@y += dy * @speeds[@speed]\n		@clicks++\n		@moves += 'abcd'[i] \n\n	setSpeed : (index) ->\n		@speed = index\n		@moves += index\n\n	right   : -> @move 0\n	down    : -> @move 1\n	left    : -> @move 2\n	up      : -> @move 3\n	\n	snailSpeed : -> @setSpeed 0\n	slowSpeed  : -> @setSpeed 1\n	highSpeed  : -> @setSpeed 2\n	warpSpeed  : -> @setSpeed 3\n\n	step : (d) -> \n		@clicks++\n		constrain @zoom+d,0,3 \n	pick : ->\n		for [x,y],i in _.zip @xs,@ys\n			if dist(x,y,@x,@y) <= 2\n				@xs.splice i,1\n				@ys.splice i,1\n				break\n		@clicks++\n\nberries = new PickingBerries \"a\"",
      c: {
        berries: "reset()|left()|right()|up()|down()|snailSpeed()|slowSpeed()|highSpeed()|warpSpeed()|pick()"
      }
    }
  },
  "LB: miscellaneous": {
    Alphanumeric: {
      b: "# LOC:15 bg for in range indexOf & ** circle {} [] '' if then else class extends constructor new @ super ->\n\nclass AlphaNumeric extends Application\n	reset     : -> super\n	draw      : -> super\n	character : (ch) -> \n\nalpha = new AlphaNumeric \"b\"",
      a: "class AlphaNumeric extends Application\n	reset : -> \n		super\n		@pattern = {1:'4c4444e', 2:'eh1248v', A:'ehhvhhh', B:'uhhuhhu'}\n		@ch = 'A'\n	draw : ->\n		bg 0\n		sc()\n		for ch,j in @pattern[@ch]\n			index = '0123456789abcdefghijklmnopqrstuv'.indexOf ch\n			for i in range 5\n				if index & 2**i then fc 0,1,0 else fc 0,0.3,0\n				x = 140-20*i\n				y = 40+20*j\n				circle x,y,8\n	character : (ch) -> @ch = ch\n\nalpha = new AlphaNumeric \"a\"",
      c: {
        alpha: "reset()|character 'A'|character 'B'|character '1'|character '2'"
      }
    },
    GoldenStar: {
      b: "# LOC:23 bg fc for in range triangle translate rotate cos sin class extends constructor new @ super ->\n\nclass GoldenStar extends Application\n	reset : -> super\n	draw  : -> super\n	n     : (d) -> \n	outer : (d) ->\n	inner : (d) ->\n\nstar = new GoldenStar \"b\"",
      a: "class GoldenStar extends Application\n	reset : ->\n		super\n		@_x = 100\n		@_y = 100\n		@_n = 4\n		@_outer = 100\n		@_inner = 25\n	n : (d) -> @_n = constrain @_n+d,3,12\n	outer : (d) -> @_outer = constrain @_outer+d, 0, 100\n	inner : (d) -> @_inner = constrain @_inner+d, 0, 100\n	draw : ->\n		bg 0\n		translate @_x,@_y\n		v = TWO_PI/@_n\n		rotate -PI/2\n		x1 = @_inner * cos v/2\n		y1 = @_inner * sin v/2\n		for i in range @_n\n			fc 1,1,0\n			triangle 0,0, @_outer,0, x1,y1\n			fc 1,0.7,0\n			triangle 0,0, @_outer,0, x1,-y1\n			rotate v\n\nstar = new GoldenStar \"a\"",
      c: {
        star: "reset()|n -1|n +1|outer -1|outer +1|inner -1|inner +1"
      }
    },
    Polygon: {
      b: "# LOC:23 bg sc line for in range cos sin radians class extends constructor new @ super ->\n\nclass Turtle\n	constructor : (@r=1,@g=0,@b=0, @x=100,@y=10,@dir=0) ->\n	fd : (d) ->\n	rt : (a) ->\n\nclass Polygon extends Application\n	reset      : -> super\n	draw       : -> super\n	antalSidor : (d) ->\n	antalSteg  : (d) -> \n\npolygon = new Polygon \"b\"",
      a: "class Turtle\n	constructor : (@r=1,@g=0,@b=0, @x=100,@y=10,@dir=0) ->\n	fd : (d) ->\n		dx = d*cos radians @dir\n		dy = d*sin radians @dir\n		sc @r,@g,@b\n		line @x,@y,@x+dx,@y+dy\n		@x += dx\n		@y += dy\n	rt : (a) ->\n		@dir +=a\n\nclass Polygon extends Application\n	reset : ->\n		super\n		@n = 6\n		@steg = 60\n\n	draw : ->\n		t = new Turtle()\n		bg 0\n		for i in range @n\n			t.fd @steg\n			t.rt 360/@n\n\n	antalSidor : (d) -> @n += d\n	antalSteg : (d) -> @steg += d\n\npolygon = new Polygon \"a\"",
      c: {
        polygon: "reset()|antalSidor -1|antalSidor +1|antalSteg -1|antalSteg +1|"
      }
    },
    Kalkylator: {
      b: "# LOC:44 bg sc fc + - * / Math.sqrt Math.PI of {} in [] shift unshift splice \n#        text textSize textAlign length for range @readText \n#        parseFloat \"\" split class extends constructor new @ super ->\n# TIPS! Börja med de fyra räknesätten. \n#       @words ska kunna utökas med \":\". T ex \": sq dup *\"\n#       Definiera t ex invers, distans och parallella motstånd\n\nclass Kalkylator extends Application\n	reset : -> super\n	draw  : -> super\n	chs   : -> # ( n -- n ) \n	swap  : -> # ( a b -- b a )\n	drop  : -> # ( n -- ) \n	dup   : -> # ( n -- n n )\n	sqrt  : -> # ( n -- n )\n	clr   : -> # ( a b -- )\n	pi    : -> # ( -- n)\n	enter : -> # inmatning från textrutan under kommandolistan.\n\nkalkylator = new Kalkylator \"b\"",
      a: "class Kalkylator extends Application\n	reset : ->\n		super\n		@stack = [0,1,2,3]\n		@words = {\"sq\":[\"dup\",\"*\"]}\n	draw : ->\n		bg 0\n		sc()\n		textSize 32\n		textAlign RIGHT, BOTTOM\n		fc 1,0,0\n		for value,i in _.first @stack,5\n			s = \"\" + value\n			text s[0..9],190, 200 - i*40\n\n	shift : -> @stack.shift()\n	over : -> @stack.splice(1,1)[0]\n	unshift : (item) -> @stack.unshift item \n	chs : -> @unshift -@shift()\n	swap : -> [@stack[0],@stack[1]] = [@stack[1],@stack[0]]\n	drop : -> @shift()\n	dup : -> @unshift @stack[0]\n	sqrt : -> @unshift Math.sqrt @shift()\n	clr : -> @stack = []\n	pi : -> @unshift Math.PI\n\n	execute : (arr) ->\n		for cmd in arr\n			if cmd==\"\" then continue\n			if cmd=='+' then @unshift @shift() + @shift()\n			else if cmd=='*' then @unshift @shift() * @shift()\n			else if cmd=='/' then @unshift @over() / @shift()\n			else if cmd=='-' then @unshift @over() - @shift()\n			else if cmd=='chs' then @chs()\n			else if cmd=='swap' then @swap()\n			else if cmd=='drop' then @drop()\n			else if cmd=='dup' then @dup()\n			else if cmd=='sqrt' then @sqrt()\n			else if cmd=='clr' then @clr()\n			else if cmd=='pi' then @pi()\n			else if cmd of @words then @execute @words[cmd]\n			else @stack.unshift eval cmd\n\n	enter : ->\n		commands = @readText()\n		if commands==\"\" then return\n		arr = commands.split ' '\n		if arr[0]==':' then @words[arr[1]] = arr[2..]\n		else @execute arr\n\nkalkylator = new Kalkylator \"a\"",
      c: {
        kalkylator: "reset()|chs()|swap()|drop()|dup()|sqrt()|clr()|pi()|enter()"
      },
      e: {
        parseInt: "https://www.w3schools.com/jsref/jsref_parseint.asp",
        stack: "https://sv.wikipedia.org/wiki/Stack_(datastruktur)",
        split: "https://coffeescript-cookbook.github.io/chapters/strings/splitting-a-string",
        "Omvänd Polsk Notation": "https://sv.wikipedia.org/wiki/Omv%C3%A4nd_polsk_notation",
        RPN: "https://en.wikipedia.org/wiki/Reverse_Polish_notation",
        "HP-35": "https://neil.fraser.name/software/hp-35",
        "Forth Haiku": "http://forthsalon.appspot.com/word-list"
      }
    },
    Nian: {
      b: "# LOC:34 [] push \"\" split indexOf reduce + * ** / % > & bg fc sc text textSize textAlign  \n#				 for in of {} _.countBy and if then class constructor new @ extends super \n# Bilda ord med fyra till nio bokstäver. Den mittersta bokstaven måste ingå. Prova med \"aaefkrrtu\"\n\nclass Nian extends Application\n	reset : -> super\n	draw  : -> super\n	enter : ->\n\nnian = new Nian \"b\"",
      a: "class Nian extends Application\n	reset : ->\n		super\n		@found = \"\"\n	draw : -> \n		n = 15\n		bg 0\n		textAlign LEFT,TOP\n		textSize 12\n		fc 1,1,0\n		sc()\n		for word,i in @found.split \" \"\n			x = int i / n\n			y = i % n\n			text word,5+200/4*x,200*y/n\n	bits : (word) -> word.split(\"\").reduce ((acc,ch) -> acc|(2 ** \"abcdefghijklmnopqrstuvwxyzåäö\".indexOf ch)), 0\n	ok : (f1,f2) ->\n		for ch, f of f2\n			if f > f1[ch] then return false\n		true\n	enter : ->\n		words = ordlista.split \" \"\n		patterns = (@bits word for word in words)\n		@letters = @readText()\n		mandatory = @letters[4]\n		@found = []\n		p = @bits @letters\n		letters1 = @letters.split \"\"\n		freq1 = _.countBy letters1\n		for pattern,i in patterns\n			if (p & pattern) == pattern\n				letters2 = words[i].split \"\"\n				freq2 = _.countBy letters2\n				if @ok(freq1,freq2) and mandatory in letters2 then @found.push words[i]\n		@found = @found.join \" \"\n\nnian = new Nian \"a\"",
      c: {
        nian: "reset()|enter()"
      },
      e: {
        Nian: "http://svenska-apps.se/iphone-ipad/underhallning/svd-nian-babqpg.html",
        '_.countBy': "http://underscorejs.org/#countBy",
        reduce: "https://coffeescript-cookbook.github.io/chapters/arrays/reducing-arrays"
      }
    },
    Korsord: {
      b: "# LOC:30 bg fc sc / % + * != and text textAlign textSize if then for in [] length \n#        @readText \"\" split join _.filter class constructor new @ extends super\n# Mata in t ex b..l och få ut bill samt boll.\n\nclass Korsord extends Application\n	reset : -> super\n	draw  : -> super\n	enter : -> \nkorsord = new Korsord \"b\"",
      a: "class Korsord extends Application\n	reset : -> \n		print \"reset\"\n		super\n		@found = \"\"\n		@pattern = ''\n	draw : -> \n		n = 15\n		bg 0\n		textAlign LEFT,TOP\n		textSize 12\n		fc 1,1,0\n		sc()\n		for word,i in @found.split \" \"\n			x = int i / n\n			y = i % n\n			text word,5+200/4*x,200*y/n\n	match : (word,pattern) ->\n		for letter,i in pattern\n			if letter != '.' and letter != word[i] then	return false\n		true\n	enter : -> \n		words = ordlista.split \" \"\n		@pattern = @readText()\n		@found = [] \n		for w in words\n			if w.length == @pattern.length and @match w,@pattern then @found.push w\n		#@found = _.filter words, (w) -> w.length == @pattern.length and @match w,@pattern\n		@found = @found.join \" \"\n\nkorsord = new Korsord \"a\"",
      c: {
        korsord: "reset()|enter()"
      },
      e: {
        '_.some': "http://underscorejs.org/#some",
        '_.filter': "http://underscorejs.org/#filter",
        '_.countBy': "http://underscorejs.org/#countBy"
      }
    }
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Dojo\data.coffee