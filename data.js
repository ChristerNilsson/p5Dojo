// Generated by CoffeeScript 1.11.1
var data;

data = {
  Nyheter: {
    Nyheter: {
      b: "# NYHETER 2017 MAR\n#   L6: Two Arcs\n#   L7: Roulette\n#   L8: boardGame, sevenSegment, OlympicRing\n#   L9: Connect4, RushHour, girlang, braid, OlympicRings, chessGame\n#   L10: alphanumeric, GoldenStar, spaceShip\n\n# Klicka nu på L1!\n\n# Eller besök Utställningen.\n# Dessa bilder är framtagna av deltagare på p5Dojo.\n# Vill du också visa upp ditt alster? Ge i så fall koden till din mentor.",
      a: ""
    },
    clown: {
      b: "# LOC:30 bg circle fc sc sw line lerp (David Larsson)\n",
      a: "bg 0, 1, 0, 0.5\nfc 1, 0, 0\ncircle 10, 10, 5\ncircle 20, 20, 10\nfor i in range 10\n	x = lerp 10, 20, i\n	y = x\n	r = lerp 5, 10, i\n	circle x, y, r\nfc 0, 1, 1\ncircle 190, 10, 5\ncircle 180, 20, 10\nfor i in range 10\n	x = lerp 190, 180, i\n	y = lerp 10, 20, i\n	r = lerp 5, 10, i\n	circle x, y, r\nfc 1\ncircle 100, 100, 50\nfc 0\ncircle 80, 80, 10\ncircle 120, 80, 10\nsc 1, 1, 0\nsw 5\nline 70, 105, 80, 120\nline 80, 120, 115, 120\nline 115, 120, 130, 105\nfc 1, 0, 0\nsc 1, 0, 0\ncircle 100, 100, 10"
    },
    tomteluva: {
      b: "# LOC:12 circle fc sc triangle (Sabrina Larsson)\n",
      a: "bg 0,1,0\nfc 1,0,0\nsc 1,0,0\ntriangle 60,140,100,60,140,140\nfc 1\nsc 1\ncircle 60,140,10\ncircle 80,140,10\ncircle 100,140,10\ncircle 120,140,10\ncircle 140,140,10\ncircle 100,60,10		"
    },
    snowman: {
      b: "# LOC:21 circle fc line sc triangle (David Larsson)\n",
      a: "fc 1\ncircle 100, 150, 50\ncircle 100, 70, 40\nfc 0\ncircle 80, 60, 8\ncircle 120, 60, 8\ncircle 85, 90, 6\ncircle 95, 95, 6\ncircle 115, 90, 6\ncircle 105, 95, 6\nfc 1, 0, 0, 0.5\ntriangle 100, 65, 90, 80, 105, 75\nsc 1, 1, 0\nsw 3\nline 50, 140, 30, 90\nline 35, 100, 40, 80\nline 140, 140, 170, 90\nline 160, 105, 155, 100\nfc 1\nsc 1\nrect 2, 180, 196, 20"
    },
    christmasTree: {
      b: "# LOC:35 bg circle fc line rect quad sc triangle (Sabrina Larsson)\n",
      a: "bg 0 \nfc 0, 1, 0 \nsc 0, 1, 0 \ntriangle 100, 100, 180, 160, 20, 160 \ntriangle 100, 60, 160, 120, 40, 120 \ntriangle 100, 40, 140, 80, 60, 80 \nfc 0.5 \nsc 0.5 \nrect 80, 160, 40, 20 \nfc 1, 1, 0 \nsc 1, 1, 0 \nquad 100, 0, 120, 20, 100, 40, 80, 20 \nrect 85, 5, 30, 30 \nsc 1, 1, 0 \nline 80, 60, 140, 120 \nline 60, 100, 120, 160 \nfc 1, 0, 0 \nsc 1, 0, 0 \ncircle 80, 100, 5 \ncircle 140, 140, 5 \ncircle 100, 60, 5 \ncircle 60, 160, 5 \ncircle 100, 120, 5 \nfc 1 \nsc 1 \nrect 0, 180, 200, 20 \ncircle 20, 20, 5 \ncircle 40, 40, 5 \ncircle 10, 80, 5 \ncircle 30, 140, 5 \ncircle 50, 100, 5 \ncircle 120, 50, 5 \ncircle 160, 20, 5 \ncircle 180, 80, 5 \ncircle 160, 130, 5 \ncircle 190, 180, 5 "
    },
    santa: {
      b: "# LOC:18 bg circle ellipse fc rect quad sc triangle (Sabrina Larsson)\n",
      a: "bg 0,0,1\nfc 1,0,0\nsc 1,0,0\nellipse 100,50,60,70\nrect 60,20,30,10\nquad 140,10,145,20,120,25,115,20\nfc 0\nsc 0\ncircle 50,25,10\nrect 70,40,60,10\ncircle 140,20,10\nsc 1,1,0\nrect 100,45,5,5\nfc 0.5\nsc 0.5\nrect 60,80,80,20\nrect 80,100,40,60\ntriangle 100,140,0,200,200,200"
    },
    dist: {
      b: "# LOC:10 bg circle dist fc lerp map sc\n",
      a: "bg 0\nfc 1\nsc()\nfor i in range 10\n	x = lerp 10,30,i\n	for j in range 10\n		y = lerp 10,30,j\n		d = dist 100,100,x,y\n		r = map(d,0,150,1,20)/2\n		circle x,y,r"
    },
    bulge: {
      b: "# LOC:10 bg circle dist fill map noStroke sin\n",
      a: "bg 0\nfill 255\nnoStroke()\nfor i in range 20\n	for j in range 20\n		x = i*200/20+5\n		y = j*200/20+5\n		r = map(sin(i*PI/20),-1,1,1,3) * map(sin(j*PI/20),-1,1,1,3) / 2\n		circle x,y,r"
    },
    wave: {
      b: "# LOC:9 circle colorMode fill map noStroke sin PI\n",
      a: "colorMode HSB,360,100,100\nnoStroke()\nbg 0\nfor i in range 21\n	fill map(i,0,20,0,360),100,100\n	a = map i,0,20,0,2*PI\n	x = 10*i\n	y = map sin(a),-1,1,0,200\n	circle x,y,3"
    },
    circle: {
      b: "# LOC:10 bg circle colorMode cos fc map PI sc sin\n",
      a: "bg 0\ncolorMode HSB,360,100,100\nfor i in range 20\n	r=map i,0,19,0,360\n	fill r,255,255\n	a=map i,0,20,0,2*PI\n	sc()\n	x=map cos(a),-1,1,0,200\n	y=map sin(a),-1,1,0,200\n	circle x,y,3"
    },
    circles: {
      b: "# LOC:12 bg circle colorMode cos fill map noStroke translate sin PI\n",
      a: "bg 0\nnoStroke()\ncolorMode HSB,360,100,100\ntranslate 100,100\nfor i in range 20\n	for j in range 11\n		fill map(i,0,20,0,360),255,255\n		a = map i,0,20,0,2*PI\n		x = map cos(a),-1,1,-j*10,j*10\n		y = map sin(a),-1,1,-j*10,j*10\n		r = 3\n		circle x,y,r"
    },
    sized_circles: {
      b: "# LOC:12 circle colorMode cos fill map noStroke PI sin translate\n",
      a: "bg 0\nnoStroke()\ncolorMode HSB,360,100,100\ntranslate 100,100\nfor i in range 20\n	fill map(i,0,20,0,360),255,255\n	a = map i,0,20,0,2*PI\n	for j in range 11\n		x = map cos(a),-1,1,-j*10,j*10\n		y = map sin(a),-1,1,-j*10,j*10\n		r = map(j,0,10,0,10)/2\n		circle x,y,r"
    },
    rotated_circles: {
      b: "# LOC:17 circle cos map PI push pop rotate sin translate\n",
      a: "colorMode HSB,360,100,100\nsc()\nbg 0\ntranslate 100,100\nfor i in range 20\n	r = map i,0,20,0,360\n	a=map i,0,20,0,2*PI\n	for j in range 11\n		push()\n		rotate map j,0,10,0,360\n		fill r,255,255\n		x=map cos(a),-1,1,-j*10,j*10\n		y=map sin(a),-1,1,-j*10,j*10\n		circle x,y,j/2\n		pop()"
    },
    gravity: {
      b: "# LOC:6 circle lerp\n",
      a: "fc 1\nfor i in range 15\n	x=5+10*i\n	y=5+lerp(0,lerp(0,1,i),i)\n	circle x,y,5"
    },
    hypnoticA: {
      b: "# LOC:6 -> bg circle cos fc sc sin\n\nhypnoticA = () ->",
      a: "hypnoticA = () ->\n	bg 0.5, 0, 0\n	sc()\n	fc 1\n	for i in range 100\n		x = 100 + cos(i) * i\n		y = 100 + sin(i) * i\n		circle x, y, 5",
      c: {
        "hypnoticA()": 0
      }
    },
    hypnoticB: {
      b: "# LOC:7 -> bg circle cos fc map sc sin\n\nhypnoticB = (t) ->",
      a: "hypnoticB = (t) ->\n	bg 0.5, 0, 0\n	sc()\n	fc 1\n	for i in range 100\n		x = 100 + cos(i) * i\n		y = 100 + sin(i) * i\n		speed = i/10.0\n		r = map sin(t*speed), -1, 1, 2, 5\n		circle x, y, r",
      c: {
        "hypnoticB 1": 0,
        "hypnoticB 5": 0
      }
    }
  },
  "L1: bg point sc sw": {
    Background1: {
      b: "# Den översta bitmappen till höger visar resultatet av din kod.\n# Den mellersta bitmappen ska du efterlikna.\n# Den understa bitmappen visar skillnaden mellan de två andra.\n\n# Tryck på PgDn för att komma till sista raden.\n# Skriv in följande kommando: bg 1\n# Kontrollera att de båda övre bitmapparna nu är lika.\n\n# Klicka på Background2 för att komma till nästa övning.\n# Klicka på Help nere till vänster för mera information.\n# Klicka på Reference för att se fler kommandon.\n",
      a: "bg 1"
    },
    Background2: {
      b: "# LOC:1 bg\n",
      a: "bg 0.5"
    },
    Background3: {
      b: "# LOC:1 bg\n",
      a: "bg 1,0,0"
    },
    Background4: {
      b: "# LOC:1 bg\n",
      a: "bg 1,1,0"
    },
    CornerPoints: {
      b: "# LOC:9 sc sw point\n\nsw 5\nsc 1,0,0\npoint 0,0\n",
      a: "sw 5\nsc 1,0,0\npoint 0,0\nsc 0,1,0\npoint 200,0\nsc 1,1,0\npoint 0,200\nsc 0\npoint 200,200"
    },
    MidPoints: {
      b: "# LOC:11 sc sw point\n",
      a: "sw 5\nsc 1,0,0\npoint 100,100\nsc 0,1,0\npoint 100,0\nsc 1,1,0\npoint 0,100\nsc 0\npoint 200,100\nsc 1\npoint 100,200"
    },
    CornerPoints3: {
      b: "# LOC:17 sc sw point\n",
      a: "sw 5\nsc 1,0,0\npoint 20,0\npoint 20,20\npoint 0,20\n\nsc 0,1,0\npoint 180,0\npoint 180,20\npoint 200,20\n\nsc 1,1,0\npoint 20,180\npoint 20,200\npoint 0,180\n\nsc 1\npoint 180,180\npoint 180,200\npoint 200,180"
    },
    CornerPoints7: {
      b: "# LOC:17 sc sw point\n",
      a: "sw 5\nsc 1,0,0\npoint 30,0\npoint 30,10\npoint 30,20\npoint 30,30\npoint 10,30\npoint 20,30\npoint 0,30\n\nsc 0,1,0\npoint 170,200\npoint 170,190\npoint 170,180\npoint 170,170\npoint 190,170\npoint 180,170\npoint 200,170"
    },
    Diagonal: {
      b: "# LOC:23 sc sw point\n",
      a: "sc 1,0,0\nsw 11\npoint 200,0\nsw 10\npoint 180,20\nsw 9\npoint 160,40\nsw 8\npoint 140,60\nsw 7\npoint 120,80\nsw 6\npoint 100,100\nsw 5\npoint 80,120\nsw 4\npoint 60,140\nsw 3\npoint 40,160\nsw 2\npoint 20,180\nsw 1\npoint 0,200"
    }
  },
  "L2: circle fc text": {
    dices: {
      b: "# LOC:26 point sc\n",
      a: "point 10,10\n\nsc 1,0,0 \npoint 185,5 \npoint 195,15 \n\nsc 0,1,0 \npoint 85,65 \npoint 90,70 \npoint 95,75 \n\nsc 1,1,0 \npoint 165,105 \npoint 165,115 \npoint 175,105 \npoint 175,115 \n\nsc 1,0,1 \npoint 45,125 \npoint 45,135 \npoint 50,130 \npoint 55,125 \npoint 55,135 \n\nsc 0,1,1 \npoint 105,165 \npoint 105,170 \npoint 105,175 \npoint 115,165 \npoint 115,170 \npoint 115,175 "
    },
    Five: {
      b: "# LOC:12 bg circle fc sc\n",
      a: "bg 0.5\nsc()\nfc 1\ncircle 100,100,20\nfc 1,0,0\ncircle 40,40,20\nfc 1,1,0\ncircle 40,160,20\nfc 0,1,0\ncircle 160,160,20\nfc 0,0,1\ncircle 160,40,20"
    },
    whiteCircle: {
      b: "# LOC:2 circle fc\n",
      a: "fc 1\ncircle 60,80,30"
    },
    whiteEmptyCircle: {
      b: "# LOC:4 circle fc sc sw\n",
      a: "sc 1\nfc()\nsw 2\ncircle 70,90,40"
    },
    twoDiscsA: {
      b: "# LOC:4 circle fc\n",
      a: "fc 1,0,0 \ncircle 80,100,40\nfc 0,1,0\ncircle 100,120,50"
    },
    twoDiscsB: {
      b: "# LOC:4 circle fc\n",
      a: "fc 1,0,0\ncircle 80,100,40\nfc 0,1,0, 0.5\ncircle 120,100,50"
    },
    textA: {
      b: "# LOC:3 fc textSize text\n",
      a: "fc 1,1,0\ntextSize 32\ntext 'Coffeescript',100,100"
    },
    textB: {
      b: "# LOC:4 fc text textAlign textSize\n",
      a: "fc 1,1,0\ntextSize 32\ntextAlign CENTER,CENTER\ntext 'Coffeescript',100,100"
    }
  },
  "L3: ellipse rect": {
    greenEllipse: {
      b: "# LOC:2 fc ellipse\n",
      a: "fc 0,1,0\nellipse 120,60, 60,40"
    },
    greenRect: {
      b: "# LOC:2 fc rect\n",
      a: "fc 0,1,0\nrect 60,80, 40,50"
    },
    redRect: {
      b: "# LOC:2 fc rect\n",
      a: "fc 1,0,0\nrect 80,70, 40,100"
    },
    cross: {
      b: "# LOC:4 fc rect\n",
      a: "fc 1,0,0\nsc()\nrect 85,70, 70,10\nrect 115,40, 10,100"
    },
    squareHole: {
      b: "# LOC:11 fc sc sw rect\n",
      a: "fc 0,1,1\nsc()\nrect 60,60, 80,20\nrect 60,120, 80,20\nrect 60,60, 20,80\nrect 120,60, 20,80\nfc()\nsc 1,0,0\nsw 3\nrect 60,60, 80,80\nrect 80,80, 40,40"
    }
  },
  "L4: for lerp rect": {
    "horizontal squares": {
      b: "# LOC:3 rect for in range lerp \n\nrect  5,5,10,10\nrect 25,5,10,10\nfor i in range 5\n	x = lerp 5,25,i \n	rect",
      a: "for i in range 10\n	x = 5+20*i\n	rect x,5, 10,10"
    },
    "vertical squares": {
      b: "# LOC:3 rect for in range lerp\n",
      a: "for i in range 10\n	y = 5+20*i\n	rect 5,y, 10,10"
    },
    "diagonal squares": {
      b: "# LOC:4 rect for in range lerp\n",
      a: "for i in range 10\n	x = 5+20*i\n	y = 5+20*i\n	rect x,y, 10,10"
    },
    "double for loop": {
      b: "# LOC:5 rect for in range lerp\n",
      a: "for i in range 10\n	for j in range 10\n		x = 5+20*i\n		y = 5+20*j\n		rect x,y, 10,10"
    },
    "growing squares": {
      b: "# LOC:7 rect rectMode for in range lerp\n",
      a: "rectMode CENTER\nfor i in range 10\n	x = 10+20*i\n	y = 10\n	w = 2*i\n	h = 2*i\n	rect x,y, w,h"
    },
    "growings red squares": {
      b: "# LOC:8 fc for in range lerp rect rectMode\n",
      a: "rectMode CENTER\nfor i in range 10\n	fc i/10.0,0,0\n	x = 10+20*i\n	y = 10\n	w = 2*i\n	h = 2*i\n	rect x,y,w,h"
    },
    "growing circles": {
      b: "# LOC:6 for in range fc circle lerp\n",
      a: "for i in range 10\n	fc i/10.0,0,0\n	x = 10+20*i\n	y = 10\n	r = i\n	circle x,y,r"
    },
    "shrinking circles": {
      b: "# LOC:4 for in range fc circle lerp\n",
      a: "for i in range 10,0,-1\n	fc i/10.0,0,0\n	r = 10 * i\n	circle 100,100, r"
    },
    "red cone": {
      b: "# LOC:6 for in range fc circle lerp",
      a: "for i in range 10,0,-1\n	fc i/10.0,0,0\n	x = 10*i\n	y = 10*i\n	r = 10*i\n	circle x,y,r"
    },
    "penta lerp": {
      b: "# LOC:11 bg sc fc for in range circle lerp",
      a: "bg 0.5\nsc()\nfor i in range 10\n	for j in range 10\n		r = lerp 0.1,0.2,i\n		g = lerp 0.1,0.2,j\n		fc r,g,0\n		x = lerp 10,30,i\n		y = lerp 10,30,j\n		radius = lerp 1,1.5,i+j\n		circle x,y,radius"
    }
  },
  "L5: line for lerp": {
    HorizontalLine: {
      b: "# LOC:2 sc line\n",
      a: "sc 1,0,1\nline 10,70, 190,70"
    },
    VerticalLine: {
      b: "# LOC:3 sc sw line\n",
      a: "sc 1,1,0\nsw 10\nline 110,30, 110,170"
    },
    Line: {
      b: "# LOC:2 sc line\n",
      a: "sc 1,1,0\nline 20,0, 200,20"
    },
    Grid: {
      b: "# LOC:5 sc sw for in range line \n",
      a: "sc 1,1,0\nsw 2\nfor i in range 10,200,10\n	line 10,i,190,i\n	line i,190,i,10"
    },
    Skislope: {
      b: "# LOC:4 bg sc for in range lerp line",
      a: "bg 0\nsc 1,0,0\nfor i in range 21\n	line i*10,0,200,i*10"
    },
    Sunshine: {
      b: "# LOC:5 bg sc for in range lerp line\n",
      a: "bg 0\nsc 1,1,0\nfor i in range 10\n	line i*20,0,200-i*20,200\n	line 0,20+i*20,200,180-i*20"
    },
    Lines: {
      b: "# LOC:5 bg for in range lerp line (Noel Watson)\n",
      a: "bg 0\nfor i in range 37\n	line 10,10,190,10+i*5\n	line 10,100,190,10+i*5\n	line 10,190,190,10+i*5"
    },
    chessRow: {
      b: "# LOC:5 % bg fc for in range lerp rect\n",
      a: "bg 0.5\nfor i in range 8\n	fc i%2\n	x = 20+20*i \n	rect x,20, 20,20"
    },
    chessBoard: {
      b: "# LOC:7 bg fc for in range lerp rect\n",
      a: "bg 0.5\nfor i in range 8\n	for j in range 8\n		fc (i+j)%2\n		x = 20+20*i\n		y = 20+20*j\n		rect x,y, 20,20"
    },
    chessCross: {
      b: "# LOC:8 for in range lerp rect if then fc (David Larsson)\n",
      a: "for i in range 10\n	for j in range 10\n		fc()\n		if i-j in [-2,0,2] then fc 1,1,0\n		if i+j in [7,9,11] then fc 1,0,0\n		x = 20*i\n		y = 20*j\n		rect x,y, 20,20"
    }
  },
  "L6: triangle quad arc": {
    Triangle: {
      b: "# LOC:2 fc triangle\n",
      a: "fc 1\ntriangle 20,40, 160,100, 100,140"
    },
    Quad: {
      b: "# LOC:2 fc quad\n",
      a: "fc 1,1,0\nquad 150,100, 180,20, 40,20, 100,140"
    },
    PacMan: {
      b: "# LOC:2 arc fc radians PIE\n",
      a: "fc 1,1,0\narc 100,100, 80,80, radians(-135),radians(135), PIE"
    },
    "Two Arcs": {
      b: "# LOC:7 fc sc sw arc radians strokeCap",
      a: "fc()\nsc 1,0,0\nsw 20\narc 100,70, 100,100, radians(-90),radians(90)\nsc 1,1,0\nstrokeCap SQUARE\narc 100,120, 100,100, radians(90),radians(-90)"
    }
  },
  "L7: translate rotate push pop": {
    textC: {
      b: "# LOC:6 fc text textAlign textSize translate rd\n",
      a: "fc 1,1,0\ntextSize 32\ntextAlign CENTER,CENTER\ntranslate 100,100\nrd 90\ntext 'Coffeescript',0,0"
    },
    textD: {
      b: "# LOC:6 fc text textAlign textSize translate rd\n",
      a: "fc 1,1,0\ntextSize 32\ntextAlign CENTER,CENTER\ntranslate 100,100\nrd 180\ntext 'Coffeescript',0,0"
    },
    rotatedEllipse: {
      b: "# LOC:5 ellipse translate rd\n",
      a: "fc 1,0,0\nsc()\ntranslate 100,100\nrd 45\nellipse 0,0, 80,40"
    },
    rotatedRectA: {
      b: "# LOC:4 fc rect\n",
      a: "fc 1,0,0\nrect 60,100, 40,40\nfc 0,1,0\nrect 140,100, 40,40"
    },
    rotatedRectB: {
      b: "# LOC:12 fc rect translate rd push pop\n",
      a: "push()\nfc 1,0,0\ntranslate 60,100\nrd 45\nrect 0,0, 40,40\npop()\npush()\nfc 0,1,0\ntranslate 140,100\nrd 45\nrect 0,0, 40,40\npop()"
    },
    rotatedRectC: {
      b: "# LOC:13 fc rect translate rd push pop\n",
      a: "rectMode CENTER\npush()\nfc 1,0,0\ntranslate 80,120\nrd 45\nrect 0,0, 40,40\npop()\npush()\nfc 0,1,0\ntranslate 160,120\nrd 45\nrect 0,0, 40,40\npop()"
    },
    cards: {
      b: "# LOC:10 fc sc circle rect rectMode for in range lerp translate rd\n",
      a: "rectMode CENTER\nsc 1\ntranslate 100,100\nfor i in range 18,-1,-1\n  r = 1.0*i/18\n  fc r,0,0\n  w = 70+5*i\n  h = 70+5*i\n  rect 0,0, w,h\n  rd 5"
    },
    "Snow White and the 7 lerps": {
      b: "# LOC:17 bg fc sc rect rectMode for in range lerp translate rd push pop",
      a: "bg 1\nrectMode CENTER\nsc()\nfor i in range 10\n  for j in range 10\n    push()\n		x = lerp 10,30,i\n		y = lerp 10,30,j\n    translate x,y\n    rd lerp 0,10,i-j\n    r = lerp 0.1,0.2,i\n    g = lerp 0.1,0.2,j\n    fc r,g,0\n		w = lerp 5,6,i\n		h = lerp 5,6,j\n    rect 0,0, w,h\n    pop()"
    },
    Roulette: {
      b: "# LOC:20 bg sw fc sc for in range if then else == % / [] \"\" text textAlign arc strokeCap translate rotate rd TWO_PI push pop \n\nnumbers = [0,32,15,19,4,21,2,25,17,34,6,27,13,36,11,30,8,23,10,5,24,16,33,1,20,14,31,9,22,18,29,7,28,12,35,3,26]",
      a: "numbers = [0,32,15,19,4,21,2,25,17,34,6,27,13,36,11,30,8,23,10,5,24,16,33,1,20,14,31,9,22,18,29,7,28,12,35,3,26]\nbg 0.5\ntranslate 100,100\nrd -90\nd = PI/numbers.length\nsw 20\nstrokeCap SQUARE\ntextAlign CENTER,CENTER\nfor i in range numbers.length\n	push()\n	fc()\n	if i==0 then sc 0,1,0 else sc i%2,0,0\n	arc 0,0,180,180,-d,d\n	translate 90,0\n	rd 90\n	sc()\n	fc 1\n	text numbers[i],0,0\n	pop()\n	rotate TWO_PI / numbers.length"
    }
  },
  "L8: function, class": {
    manyDices: {
      b: "# LOC:20 -> fc for in if then point [] % -> ==\n",
      a: "dots = (x,y,dots) ->\n	for dot in dots\n		if dot==1 then point x+8,y+8\n		if dot==2 then point x+8,y+10\n		if dot==3 then point x+8,y+12\n		if dot==4 then point x+10,y+10\n		if dot==5 then point x+12,y+8\n		if dot==6 then point x+12,y+10\n		if dot==7 then point x+12,y+12\ndice = (x,y,d) ->\n	if d==1 then dots x,y,[4]\n	if d==2 then dots x,y,[1,7]\n	if d==3 then dots x,y,[1,4,7]\n	if d==4 then dots x,y,[1,3,5,7]\n	if d==5 then dots x,y,[1,3,4,5,7]\n	if d==6 then dots x,y,[1,2,3,5,6,7]\n\nfc 0\nfor i in range 10\n	for j in range 10\n		dice 20*i,20*j,1+(i+j)%6"
    },
    girlang: {
      b: "# LOC: 16 sc bg sw for in range line class constructor new @\n\nclass Cartesius\n	constructor : (@r,@g,@b, @x,@y) ->\n	go : (dx,dy) ->\n\ngirlang = (x,y,n,width,dx,dy) ->\n\ngirlang 0,0,9,5,20,20",
      a: "class Cartesius\n	constructor : (@r,@g,@b, @x,@y) ->\n	go : (dx,dy) ->\n		sc @r,@g,@b\n		line @x,@y,@x+dx,@y+dy\n		[@x,@y] = [@x+dx,@y+dy]\n\ngirlang = (x,y,n,width,dx,dy) ->\n	a = new Cartesius 1,0,0, x+dx/2,0\n	b = new Cartesius 1,1,0, x,y+dy/2\n\n	bg 0\n	sw width\n\n	for i in range n\n		a.go 0,dy\n		b.go dx,0\n		b.go 0,dy\n		a.go dx,0\n\ngirlang 0,0,9,5,20,20			"
    },
    braid: {
      b: "# LOC: 19 sc bg sw for in range line class constructor new @\n\nclass Cartesius\n	constructor : (@r,@g,@b, @x,@y) ->\n	go : (dx,dy) ->\n\nbraid = (n,dx,dy,width) ->	\n\nbraid 5,18,18,6",
      a: "class Cartesius\n	constructor : (@r,@g,@b, @x,@y) ->\n	go : (dx,dy) ->\n		sc @r,@g,@b\n		line @x,@y,@x+dx,@y+dy\n		[@x,@y] = [@x+dx,@y+dy]\n\nbraid = (n,dx,dy,width) ->		\n\n	a = new Cartesius 1,0,0, 100-dx/2,dy/3\n	b = new Cartesius 1,1,0, 100+dx/2,2*dy/3\n	c = new Cartesius 0,1,0, 100-dx/2,dy\n\n	bg 0\n	sw width\n\n	for i in range n\n		a.go dx,dy\n		b.go -dx,dy\n		c.go dx,dy\n\n		a.go -dx,dy\n		b.go dx,dy\n		c.go -dx,dy\n\nbraid 5,18,18,6",
      e: {
        braid: "https://cdn.tutsplus.com/vector/uploads/legacy/tuts/000-2011/398-hair-braid/6.jpg"
      }
    },
    OlympicRings: {
      b: "# LOC:24 sc bg fc sw arc strokeCap class constructor new @\n\nclass Ring\n	constructor : (@x,@y,@r,@g,@b) ->\n	draw : (start=3,stopp=3,hour=PI/6) ->\n\nolympic = (x=100,y=100,radius=50,d=60,w=10) ->\n\nolympic()",
      a: "class Ring\n	constructor : (@x,@y,@radius, @r,@g,@b) ->\n	draw : (start=3,stopp=3,hour=PI/6) ->\n		sc @r,@g,@b\n		arc @x,@y,@radius,@radius,(start-3)*hour,(stopp-3)*hour\n		\nolympic = (x=100,y=100,radius=50,d=60,w=10) ->\n	r1 = new Ring x-d,  y,     radius, 0,0,1\n	r2 = new Ring x,    y,     radius, 0,0,0\n	r3 = new Ring x+d,  y,     radius, 1,0,0\n	r4 = new Ring x-d/2,y+d/3, radius, 1,1,0\n	r5 = new Ring x+d/2,y+d/3, radius, 0,1,0\n\n	strokeCap SQUARE\n	bg 0.5\n	fc()\n	sw w\n\n	r1.draw()\n	r3.draw()\n	r4.draw()\n	r5.draw()\n	r1.draw 2,4\n	r2.draw()\n	r4.draw 12,2\n	r5.draw 8,10\n	r3.draw 6,8\n\nolympic()			"
    }
  },
  "L9: interactivity, basic": {
    counter: {
      b: "# LOC:8 text textAlign textSize + - class extends constructor new @ super ->\n\nclass Counter extends LocalStorage\n	reset : ->\n	up : -> \n	down : -> \n	draw : ->\n\ncounter = new Counter \"b\"     ",
      a: "class Counter extends LocalStorage\n	reset : -> @counter = 0\n	up : -> @counter += 1\n	down : -> @counter -= 1\n	draw : ->\n		bg 0.5\n		textAlign CENTER,CENTER\n		textSize 100\n		fc 1,1,0\n		text @counter,100,100\n\ncounter = new Counter \"a\"   		",
      c: {
        counter: "reset()|up()|down()"
      }
    },
    square: {
      b: "# LOC:20 -> bg sw fc rect rectMode translate rd + class extends constructor new @ super ->\n\nclass Square extends LocalStorage\n	reset : ->\n	draw : ->\n	horisontellt : (d) -> \n	vertikalt : (d) ->\n	storlek : (d) -> \n	tjocklek : (d) -> \n	rotera : (d) ->\n\nsquare = new Square \"b\"",
      a: "class Square extends LocalStorage\n	reset : ->\n		@x = 100\n		@y = 100\n		@size = 100\n		@w = 1\n		@dir = 0\n	draw : ->\n		bg 0\n		rectMode CENTER\n		sw @w\n		fc 0.5\n		translate @x,@y\n		rd @dir \n		rect 0,0,@size,@size\n\n	horisontellt : (d) -> @x += d\n	vertikalt : (d) -> @y += d\n	storlek : (d) -> @size += d\n	tjocklek : (d) -> @w += d\n	rotera : (d) -> @dir += d \n\nsquare = new Square \"a\"",
      c: {
        square: "reset()|horisontellt -1|horisontellt +1|vertikalt -1|vertikalt +1|storlek -1|storlek +1|tjocklek -1|tjocklek 1|rotera -1|rotera +1"
      }
    },
    sevenSegment: {
      b: "# LOC:26 bg sc fc rect rectMode if then & [] class extends constructor new @ super ->\n\nclass Digit extends LocalStorage\n	reset : -> \n	draw : ->\n	up : -> \n	down : -> \n\ndigit = new Digit \"b\"",
      a: "class Digit extends LocalStorage\n	reset : ->\n		@d=0\n		@x=100\n		@y=100\n		@w=80\n		@h=18\n	draw : ->\n		bg 0.5\n		sc()\n		fc 1,0,0\n		rectMode CENTER\n		pattern = [63,6,91,79,102,109,125,7,127,111]\n		p = pattern[@d]\n		w0 = @w-20\n		if p & 1 then fc 1,0,0 else fc 0.3,0,0\n		rect @x,@y-@w,w0,@h \n		if p & 2 then fc 1,0,0 else fc 0.3,0,0\n		rect @x+@w/2,@y-@w/2,@h,w0 \n		if p & 4 then fc 1,0,0 else fc 0.3,0,0\n		rect @x+@w/2,@y+@w/2,@h,w0 \n		if p & 8 then fc 1,0,0 else fc 0.3,0,0\n		rect @x,@y+@w,w0,@h \n		if p & 16 then fc 1,0,0 else fc 0.3,0,0\n		rect @x-@w/2,@y+@w/2,@h,w0\n		if p & 32 then fc 1,0,0 else fc 0.3,0,0\n		rect @x-@w/2,@y-@w/2,@h,w0 \n		if p & 64 then fc 1,0,0 else fc 0.3,0,0\n		rect @x,@y,w0,@h \n	up : -> @d++\n	down : -> @d--\n\ndigit = new Digit \"a\"",
      c: {
        digit: "reset()|up()|down()"
      }
    },
    Braider: {
      b: "# LOC: 61 sc bg sw for in range if then + line class constructor extends new @\n\nclass Braider extends LocalStorage\n	braid2 : ->\n	braid3 : ->\n	braid4 : ->\n	draw : ->\n	forward : ->\n	back : ->\n\nbraider = new Braider \"b\"",
      a: "class Cartesius\n	constructor : (@x,@y,@c) ->\n	go : (dx,dy) ->\n		scc @c \n		line @x,@y,@x+dx,@y+dy\n		[@x,@y] = [@x+dx,@y+dy]\n	down : (d) -> @go 0,d\n	left : (d) -> @go -d,0\n\nclass Braider extends LocalStorage\n\n	braid2 : ->\n		@type = 2\n		@n = 0\n	braid3 : ->\n		@type = 3\n		@n = 0\n	braid4 : ->\n		@type = 4\n		@n = 0\n	draw : ->\n		if @type==2\n			sw 5\n			a = new Cartesius 200,20, 1 # röd\n			b = new Cartesius 190,10, 2 # grön\n			for i in range @n\n				if i%4 == 0 then b.down 20\n				if i%4 == 1 then a.left 20\n				if i%4 == 2 then a.down 20\n				if i%4 == 3 then b.left 20\n		if @type==3\n			sw 5\n			a = new Cartesius 200,30, 1\n			b = new Cartesius 190,10, 2\n			c = new Cartesius 180,20, 3\n			for i in range @n\n				if i%6 == 0 then b.down 30\n				if i%6 == 1 then a.left 30\n				if i%6 == 2 then c.down 30\n				if i%6 == 3 then b.left 30\n				if i%6 == 4 then a.down 30\n				if i%6 == 5 then c.left 30\n		if @type==4\n			sw 10\n			a = new Cartesius 150,40, 1 # röd\n			b = new Cartesius 170,20, 2 # grön\n			c = new Cartesius 160,30, 3 # gul\n			d = new Cartesius 190,50, 4 # blå\n			for i in range @n\n				if i%12 == 0 then b.down 50\n				if i%12 == 1 then c.left 30; c.down 30\n				if i%12 == 2 then d.left 50\n				if i%12 == 3 then a.down 50\n				if i%12 == 4 then b.left 50\n				if i%12 == 5 then c.down 50\n				if i%12 == 6 then d.left 30; d.down 30\n				if i%12 == 7 then a.left 50\n				if i%12 == 8 then b.left 30; b.down 30\n				if i%12 == 9 then d.down 50\n				if i%12 == 10 then c.left 50\n				if i%12 == 11 then a.left 30; a.down 30\n\n	forward : -> @n++\n	back : -> @n--\n\nbraider = new Braider \"a\"",
      c: {
        braider: "braid2()|braid3()|braid4()|forward()|back()"
      },
      e: {
        braid: "https://cdn.tutsplus.com/vector/uploads/legacy/tuts/000-2011/398-hair-braid/6.jpg"
      }
    },
    BouncingBalls: {
      b: "# LOC: 43 + ++ - -- %% == push if then for in splice length circle fc sw sc _.create class constructor super extends new @\n\nclass Ball \n	constructor : ->\n	update : (grav) ->\n	render : (sel) ->\n\nclass BouncingBalls extends LocalStorage\n\n	constructor : (@name) ->\n		super @name\n		if @balls then @balls = (_.create Ball.prototype, ball for ball in @balls)\n\n	reset : -> super\n	draw : ->\n	update : -> \n	add : -> \n	delete :->\n	selNext : -> \n	selPrev : -> \n	grow : ->    \n	shrink : ->  \n	nextCol : -> \n	prevCol : -> \n	gravity : ->\n\nbouncingBalls = new BouncingBalls \"b\"",
      a: "class Ball \n	constructor : ->\n		@x = 100\n		@y = 100\n		@r = 10\n		@c = 1\n		@dx = 3\n		@dy = 4\n	update : (grav) ->\n		@x += @dx\n		@y += @dy\n		if not (@r < @x < 200-@r) then @dx = - @dx\n		if not (@r < @y < 200-@r) then @dy = - @dy\n		if grav and @y < 200-@r then @dy += 1 \n	render : (sel) ->\n		fcc @c\n		sw 2\n		if sel then scc 7 else sc()\n		circle @x,@y,@r\n\nclass BouncingBalls extends LocalStorage\n\n	constructor : (@name) ->\n		super @name\n		if @balls then @balls = (_.create Ball.prototype, ball for ball in @balls)\n\n	reset : ->\n		super\n		@balls = []\n		@sel = -1\n		@grav = false\n	draw : ->\n		for ball,i in @balls\n			ball.render i==@sel, @grav\n	update : -> \n		for ball in @balls\n			ball.update(@grav)\n\n	add : -> \n		@balls.push new Ball\n		@sel = @balls.length - 1\n\n	delete :->\n		@balls.splice @sel, 1\n		if @sel >= @balls.length then @sel = @balls.length - 1  \n	selNext : -> @sel = (@sel + 1) %% @balls.length\n	selPrev : -> @sel = (@sel - 1) %% @balls.length\n	grow : ->    @balls[@sel].r++\n	shrink : ->  @balls[@sel].r--\n	nextCol : -> @balls[@sel].c = (@balls[@sel].c+1) %% 8\n	prevCol : -> @balls[@sel].c = (@balls[@sel].c-1) %% 8\n	gravity : -> @grav = not @grav \n\nbouncingBalls = new BouncingBalls \"a\"",
      c: {
        bouncingBalls: "reset()|update()|add()|delete()|selNext()|selPrev()|grow()|shrink()|nextCol()|prevCol()|gravity()"
      }
    },
    Guess_a_number: {
      b: "# LOC:28 bg sc fc circle %% * / + - <= >= text textAlign for in range Math.floor if then return < class extends constructor new @ super ->\n\nclass Guess extends LocalStorage\n	reset : ->\n	left :-> \n	right :->\n	up :->\n	down :->\n	guess :->\n	draw : ->\n\nguess = new Guess \"b\"",
      a: "class Guess extends LocalStorage\n	reset : ->\n		@n = 10\n		@i = @n/2\n		@j = @n/2\n		@start = 0\n		@stopp = @n*@n-1\n		@secret = 27\n\n	left :-> @i = (@i-1) %% @n\n	right :->@i = (@i+1) %% @n\n	up :->   @j = (@j-1) %% @n\n	down :-> @j = (@j+1) %% @n\n	guess :-> \n		i = @n * @j + @i\n		if i <= @secret then @start = i+1 \n		if i >= @secret then @stopp = i-1 \n\n	draw : ->\n		bg 0.1\n		textAlign CENTER,CENTER\n		for i in range @n*@n\n			if @start <= i <= @stopp then fc 1 else fc 0.5\n			sc()\n			x = i % @n\n			y = Math.floor i / @n\n			text i, 10 + 20 * x, 10 + 20 * y\n		fc 1,1,0\n		sc()\n		circle 10 + 20 * @i, 10 + 20 *@j,10\n		fc 0\n		i = @n * @j + @i\n		text i, 10 + 20 * @i, 10 + 20 *@j\n\nguess = new Guess \"a\"",
      c: {
        guess: "reset()|left()|right()|up()|down()|guess()"
      }
    },
    korg: {
      b: "# LOC:27 -> bg fc sc sw rect for if else class extends constructor new @ super ->\n\nclass Korg extends LocalStorage\n	reset : ->\n	draw : ->\n	more : ->\n	less : ->\n	thinner : ->\n	thicker : ->\n\nkorg = new Korg \"b\"",
      a: "class Korg extends LocalStorage\n	reset : ->\n		@n = 1\n		@w = 5\n\n	draw : ->\n		c1 = co 1,0,0\n		c2 = co 1,1,0\n		bg 0\n		sw @w\n		fill c1\n		stroke c2\n		q = 2*@n+1\n		d = 200.0/q\n		for i in range @n\n			rect d+i*2*d,0,d,200\n		for j in range @n\n			rect 0,d+j*2*d,200,d\n		for i in range @n\n			for j in range @n\n				if (i+j) % 2 == 1\n					rect i*2*d,d+j*2*d,3*d,d\n				else\n					rect d+i*2*d,j*2*d,d,3*d\n	more : -> @n++\n	less : -> @n--\n	thinner : -> @w--\n	thicker : -> @w++\n\nkorg = new Korg \"a\"",
      c: {
        korg: "reset()|more()|less()|thinner()|thicker()"
      }
    },
    "OlympicRing Prep": {
      b: "# LOC:21 sc fc sw arc strokeCap class extends constructor new @ super ->\n\nclass Ring extends LocalStorage\n	reset : ->\n	_start : (d) ->\n	_stopp : (d) -> \n	_radius : (d) ->\n	_width : (d) ->\n	draw : ->\n\nring = new Ring \"b\"",
      a: "class Ring extends LocalStorage\n	reset : ->\n		@start = 3\n		@stopp = 6\n		@w = 5\n		@radius = 50\n	_start : (d) -> @start+=d\n	_stopp : (d) -> @stopp+=d\n	_radius : (d) -> @radius+=d\n	_width : (d) -> @w+=d\n	draw : ->\n		hour = PI/6\n		strokeCap SQUARE\n		fc()\n		sw @w\n		sc 1,1,0\n		arc 100,100,2*@radius,2*@radius,(@start-3)*hour,(@stopp-3)*hour\n\nring = new Ring \"a\"",
      c: {
        ring: "reset()|_start -1|_start 1|_stopp -1|_stopp 1|_radius -1|_radius 1|_width -1|_width 1"
      }
    },
    boardGame: {
      b: "# LOC:10 bg fc sc circle for in range ->\n\nclass Board extends LocalStorage\n	reset : ->\n	draw : ->	\n	_r : (d) ->\n	_d : (d) ->\n	_n : (d) ->\n\nboard = new Board \"b\" ",
      a: "\nclass Board extends LocalStorage\n	reset : ->\n		@x = 100\n		@y = 100\n		@d = 18\n		@r = 7\n		@n = 5\n	draw : ->	\n		bg 1\n		fc 0\n		sc()\n		@one @d,@r,@x-@n*@d, @y-@d,2*@n+1,3\n		@one @d,@r,@x-@d, @y-@n*@d,3,2*@n+1\n	one : (d,r,x0,y0,m,n) ->\n		for i in range m\n			for j in range n\n				circle x0+d*i,y0+d*j,r\n	_r : (d) -> @r+=d\n	_d : (d) -> @d+=d\n	_n : (d) -> @n+=d\nboard = new Board \"a\" ",
      c: {
        board: "reset()|_r -1|_r 1|_d -1|_d 1|_n -1|_n 1"
      }
    },
    multimoire: {
      b: "# LOC:10 bg for line map class extends constructor new @ super ->\n\nclass Moire extends LocalStorage\n	reset : ->\n	draw : ->\n	more : -> \n	less : -> \n\nmoire = new Moire \"b\"",
      a: "class Moire extends LocalStorage\n	reset : ->\n		@n = 2\n	draw : ->\n		background 0\n		for i in range @n\n			for j in range 37\n				line 10,map(i,0,@n-1,10,190),190,10+j*5\n	more : -> @n++\n	less : -> @n--\n\nmoire = new Moire \"a\"",
      c: {
        moire: "reset()|more()|less()"
      }
    },
    colorCube: {
      b: "# LOC:20 -> bg fc for in range rect class extends constructor new @ super ->\n\nclass ColorCube extends LocalStorage\n	reset : ->\n	draw : ->\n	moreDetails : ->\n	lessDetails : ->\n	moreBlue : ->\n	lessBlue : ->\n\ncc = new ColorCube \"b\"",
      a: "class ColorCube extends LocalStorage\n\n	draw : ->\n		bg 0\n		d = 200.0/@n\n		m = @n-1.0\n		for r in range @n\n			for g in range @n\n				fc r/m,g/m,@b/m\n				rect r*d,g*d,d,d\n\n	reset : -> \n		@n=2\n		@b=0\n	moreDetails : -> if @n<255 then @n++\n	lessDetails : -> if @n>2 then @n--\n	moreBlue : -> if @b<@n-1 then @b+=1\n	lessBlue : -> if @b>0 then @b-=1\n\ncc = new ColorCube \"a\"",
      c: {
        cc: "reset()|moreDetails()|lessDetails()|moreBlue()|lessBlue()"
      }
    },
    laboratorium: {
      b: "# Här kan du laborera med egna idéer!\n\nclass Labb extends LocalStorage\n	reset : ->\n		super\n		@x = 100\n		@y = 100\n		@command = \"\"\n	left : -> @x -= 10\n	right : -> @x += 10\n	up : -> @y -= 10\n	down : -> @y += 10\n	a : -> @command = \"a\"\n	b : -> @command = \"b\"\n	c : -> @command = \"c\"\n	d : -> @command = \"d\"\n	e : -> @command = Math.floor random 1,7\n	f : -> @command = Math.floor millis()\n	draw : -> \n		textAlign CENTER,CENTER\n		textSize 50\n		fc 1,1,0\n		text @command,@x,@y\n\nlabb = new Labb \"b\"     ",
      a: "class Labb extends LocalStorage\n	reset : ->\n	left : -> \n	right : -> \n	up : -> \n	down : -> \n	a : -> \n	b : -> \n	c : -> \n	d : -> \n	e : -> \n	f : -> \n	draw : -> \n\nlabb = new Labb \"a\"   		",
      c: {
        labb: "reset()|left()|right()|up()|down()|a()|b()|c()|d()|e()|f()"
      }
    }
  },
  "LA: interactivity, advanced": {
    klocka: {
      b: "# LOC:36 -> fc sc point rect rectMode circle for in range if else translate rd push pop class extends constructor new @ super ->\n\nclass Klocka extends LocalStorage\n	reset : -> \n	draw : ->\n	incr_hour   : -> \n	incr_minute : -> \n	incr_second : -> \n	decr_hour   : -> \n	decr_minute : -> \n	decr_second : -> \n\nklocka = new Klocka \"b\"",
      a: "class Klocka extends LocalStorage\n	reset : -> \n		@h=10\n		@m=9\n		@s=30\n	draw : ->\n		rectMode CENTER\n		translate 100,100\n		@urtavla()\n		@visare (@h+@m/60.0)*30, 7,60,1,0,0\n		@visare (@m+@s/60.0)*6,5,80,0,1,0\n		@visare @s*6,2,80,0,0,1\n	incr_hour   : -> @h++\n	incr_minute : -> @m++\n	incr_second : -> @s++\n	decr_hour   : -> @h--\n	decr_minute : -> @m--\n	decr_second : -> @s--\n\n	visare : (v,w,l,r,g,b) ->\n		push()\n		rd v-90\n		translate l/2,0\n		fc r,g,b\n		rect 0,0,l,w\n		pop()\n	urtavla : ->\n		fc 0\n		sc 1\n		circle 0,0,90\n		fc 1\n		for i in range 60\n			if i%5==0\n				circle 85,0,2\n			else\n				point 85,0\n			rd 6\nklocka = new Klocka \"a\"",
      c: {
        klocka: "reset()|incr_hour()|incr_minute()|incr_second()|decr_hour()|decr_minute()|decr_second()"
      }
    },
    recursiveCircle: {
      b: "# LOC:10 -> sc circle if return < class extends constructor new @ super ->\n\nclass RecursiveCircle extends LocalStorage\n	reset : -> \n	draw : -> 	\n	circles : (x,y,r,level) ->\n	more : -> \n	less : -> \n\nrc = new RecursiveCircle \"b\"",
      a: "\nclass RecursiveCircle extends LocalStorage\n	reset : -> @n = 0\n	draw : -> @circles 100,100,100,@n		\n	circles : (x,y,r,level) ->\n		circle x,y,r\n		if level <= 0 then return\n		@circles x-r/2, y,r/2, level-1\n		@circles x+r/2, y,r/2, level-1\n	more : -> @n = constrain @n+1,0,10\n	less : -> @n = constrain @n-1,0,10\n\nrc = new RecursiveCircle \"a\"",
      c: {
        rc: "reset()|more()|less()"
      }
    },
    Nim: {
      b: "# LOC:34 -> bg fc sc circle * + - ^ if then else _.isEqual return < constrain text textAlign textSize class extends constructor new @ super ->\n\nclass Nim extends LocalStorage\n	reset : -> \n	a : ->\n	b : ->\n	c : ->\n	ok : -> \n	draw : ->\n	hint : ->\n\nnim = new Nim \"b\"  ",
      a: "class Nim extends LocalStorage\n	reset : -> \n		@board = [7,8,9]\n		@active = -1\n		@player = 0\n	move : (index) ->\n		if @active in [index,-1]\n			@active = index\n			@board[@active] = constrain @board[@active]-1, 0, 99\n\n	a : -> @move 0\n	b : -> @move 1\n	c : -> @move 2\n	ok : -> \n		if @active == -1 then return\n		@player = 1 - @player\n		@active = -1 \n	draw : ->\n		textAlign CENTER,CENTER\n		textSize 50\n		bg 0\n		fc 1\n		sc()\n		text @board[0],50,100\n		text @board[1],100,100\n		text @board[2],150,100\n		fc 1,@player,0\n		circle 20 + @player * 160,20,10\n	hint : ->\n		if @active != -1 then return\n		[a,b,c] = @board\n		board = if (b^c) < a then [b^c,b,c] else if (a^c) < b then [a,a^c,c] else if (a^b) < c then [a,b,a^b] else [a,b,c]\n		if not _.isEqual(board,@board)\n			@board = board\n			@player = 1 - @player\n\nnim = new Nim \"a\"   \n		",
      c: {
        nim: "reset()|a()|b()|c()|ok()|hint()"
      },
      e: {
        Nim: "https://en.wikipedia.org/wiki/Nim",
        xor: "https://en.wikipedia.org/wiki/Bitwise_operation#XOR",
        Nimrod: "https://en.wikipedia.org/wiki/Nimrod_(computing)"
      }
    },
    Connect4: {
      b: "# LOC:29 % bg fc sc sw circle text textAlign textSize for in range push class extends constructor new @ super -> \n\nclass Connect4 extends LocalStorage\n	reset : ->\n	draw : ->\n	move : (nr) ->\n\nconnect4 = new Connect4 \"b\"",
      a: "class Connect4 extends LocalStorage\n	reset : ->\n		@size = 27\n		@list = ([] for i in range 7)\n		@moves = []\n	draw : ->\n		bg 0\n		textAlign CENTER,CENTER\n		textSize @size/2\n		fc()\n		sc 0.1,0.3,1\n		sw 0.2 * @size\n		for i in range 7\n			for j in range 6\n				circle 100-@size*3+@size*i, 180-@size*j, @size/2\n		for column,i in @list\n			for nr,j in column\n				fc 1,nr%2,0\n				sw 1\n				circle 100-@size*3+@size*i, 180-@size*j, @size*0.4\n				fc 0\n				sc()\n				text nr, 100-@size*3+@size*i, 180-@size*j\n		sc()\n		fc 1,(@moves.length+1)%2,0\n		circle 100,15,10\n	move : (nr) ->\n		@moves.push nr\n		@list[nr].push @moves.length \n\nconnect4 = new Connect4 \"a\"",
      c: {
        connect4: "reset()|move 0|move 1|move 2|move 3|move 4|move 5|move 6"
      }
    },
    chessGame: {
      b: "# LOC:64 bg fc sc sw point rect rectMode if then else text textSize textAlign class constructor new @\n#        for in range push split length indexOf\n\nclass Chess extends LocalStorage\n	reset : ->\n	draw : ->\n	move : (d) ->\n\nchess = new Chess \"b\"",
      a: "class Chess extends LocalStorage\n\n	reset : ->\n		@moves = \"e2e4 e7e5 g1f3 b8c6 f1c4\".split \" \"\n		@size = 22\n		@x = 100\n		@y = 100\n		@n = 0\n\n	putPieces : (pieces) ->\n		res = []\n		for i in range 64\n			res.push \"\" \n		arr = pieces.split \" \"\n		for piece in arr\n			if piece.length == 2\n				chr = \"o\"\n				sq = piece\n			else\n				chr = piece[0]\n				sq = piece[1..]\n			[col,row] = @getIndex sq\n			res[8*col+row] = chr	\n		res\n\n	getIndex : (sq) ->\n		col = \"abcdefgh\".indexOf sq[0]\n		row = \"12345678\".indexOf sq[1]\n		[col,row]\n		\n	render : (pieces,c) ->\n		fc c\n		sc c\n		for row in range 8\n			for col in range 8\n				piece = pieces[8*col+row]\n				x = @x - 3.5 * @size + col * @size\n				y = @y - 3.5 * @size + (7-row) * @size\n				if piece == \"o\"\n					sw @size/2\n					point x,y\n				else if piece in \"KQRBN\"\n					sw 1-c\n					text piece,x, 1+y		\n				\n	draw : ->\n		bg 0.5\n		textSize 0.9 * @size\n		textAlign CENTER,CENTER\n		rectMode CENTER\n		sc()\n		for i in range 8\n			for j in range 8\n				if (i+j)%2 == 1 then fc 0.4 else fc 0.6\n				rect @x-3.5*@size+@size*i, @y-3.5*@size+@size*j, @size, @size\n\n		white = @putPieces \"Ra1 Nb1 Bc1 Qd1 Ke1 Bf1 Ng1 Rh1 a2 b2 c2 d2 e2 f2 g2 h2\"\n		black = @putPieces \"Ra8 Nb8 Bc8 Qd8 Ke8 Bf8 Ng8 Rh8 a7 b7 c7 d7 e7 f7 g7 h7\"\n\n		for i in range @n\n			@movePiece @moves[i], if i%2==0 then white else black		\n\n		@render white,1\n		@render black,0\n\n	movePiece : (m,player) ->\n		[col1,row1] = @getIndex m[0..1]\n		[col2,row2] = @getIndex m[2..3]\n		player[col2*8+row2] = player[col1*8+row1]\n		player[col1*8+row1] = \"\"\n\n	move : (d) -> \n		@n += d\n		@n = constrain @n,0,@moves.length\n\nchess = new Chess \"a\"\n",
      c: {
        chess: "reset()|move -1|move 1"
      }
    },
    SpaceShip: {
      b: "# LOC:35 sc sw point triangle translate rd cos sin radians push pop class extends constructor new @ super ->\n\nclass Shot\n	constructor : (@x,@y,@dir) ->\n	render : ->	\n	move : ->\n\nclass Ship extends LocalStorage\n	constructor : (@name) ->\n		super @name\n		if @shots then @shots = (_.create Shot.prototype, shot for shot in @shots)\n	reset : ->\n	lt : -> \n	rt : -> \n	fd : -> \n	shoot : ->		\n	draw : ->\n\nship = new Ship \"b\"	",
      a: "class Shot\n	constructor : (@x,@y,@dir) ->\n	render : ->	point @x,@y \n	move : ->\n		@x += 5 * cos radians @dir\n		@y += 5 * sin radians @dir\n\nclass Ship extends LocalStorage \n\n	constructor : (@name) ->\n		super @name\n		if @shots then @shots = (_.create Shot.prototype, shot for shot in @shots)\n\n	reset : ->\n		@x = 100\n		@y = 100\n		@s = 10\n		@dir = 0\n		@shots = []\n\n	lt : -> @dir -= 5\n	rt : -> @dir += 5\n	fd : -> \n		@x += 5 * cos radians @dir\n		@y += 5 * sin radians @dir\n\n	shoot : ->\n		@shots.push new Shot @x,@y,@dir\n\n	draw : ->\n		push()\n		translate @x,@y\n		rd @dir\n		sc 1,1,0\n		sw 2\n		triangle 2*@s,0, -@s,@s, -@s,-@s\n		sw 5\n		point 0,0\n		pop()\n		for shot in @shots\n			shot.move()\n			shot.render()\n\nship = new Ship \"a\"	",
      c: {
        ship: "reset()|lt()|rt()|fd()|shoot()"
      }
    },
    RushHour: {
      b: "# LOC:51 bg sc fc rect text textAlign push class extends constructor new @ super -> \n#	       if then else for in range toLowerCase indexOf \n\nclass Car\n	constructor : (@i,@j,@w,@h,@r,@g,@b) ->\n	render : (i) -> \n	move : (d) ->\n\nclass RushHour extends LocalStorage\n	constructor : (@name) ->\n		super @name\n		if @cars then @cars = (_.create Car.prototype, car for car in @cars)\n	reset : ->\n	draw : ->\n	add : (pos,r,g,b) -> \n	A_Left  : ->\n	A_Right : ->\n	B_Up  : -> \n	B_Down : -> \n	C_Left  : -> \n	C_Right : ->\n	D_Up  : -> \n	D_Down : -> \n\nrushHour = new RushHour \"b\"\n",
      a: "class Car\n	constructor : (@i,@j,@w,@h,@r,@g,@b) ->\n	render : (i) -> \n		fc @r,@g,@b\n		rect 40+20*@i+2, 40+20*@j+2, 20*@w-4, 20*@h-4\n		fc 0\n		text \"ABCDEFGH\"[i], 50+20*@i, 50+20*@j\n	move : (d) ->\n		if @w == 1 then @j += d\n		if @h == 1 then @i += d\n\nclass RushHour extends LocalStorage\n\n	constructor : (@name) ->\n		super @name\n		if @cars then @cars = (_.create Car.prototype, car for car in @cars)\n\n	reset : ->\n		@cars = []\n		@add \"d3e3\",1,0,0\n		@add \"d6d5\",1,1,0\n		@add \"e5f5\",0,1,0\n		@add \"f3f1\",0,1,1\n\n	draw : ->\n		textAlign CENTER,CENTER\n		bg 0\n		sc()\n		fc 0.5,0.5,0.5\n		rect 40,40,120,120\n		rect 160,80,40,20\n		fc 1\n		sc()\n		for i in range 6\n			text \"123456\"[i],30,50+20*i\n			text \"abcdef\"[i],50+20*i,170\n		for car,i in @cars\n			car.render i\n\n	col : (s) -> \"abcdef\".indexOf s\n	row : (s) -> \"123456\".indexOf s\n\n	add : (pos,r,g,b) -> \n		i = @col pos[0] \n		j = @row pos[3]\n		w = @col(pos[2]) - i + 1\n		#h = j - @row(pos[1]) + 1 \n		h = @row(pos[1]) - j + 1 \n		@cars.push new Car i,j,w,h,r,g,b\n\n	A_Left  : -> @cars[0].move -1\n	A_Right : -> @cars[0].move  1	\n	B_Up    : -> @cars[1].move -1	\n	B_Down  : -> @cars[1].move  1\n	C_Left  : -> @cars[2].move -1\n	C_Right : -> @cars[2].move  1\n	D_Up    : -> @cars[3].move -1\n	D_Down  : -> @cars[3].move  1\n			\nrushHour = new RushHour \"a\"",
      c: {
        rushHour: "reset()|A_Left()|A_Right()|B_Up()|B_Down()|C_Left()|C_Right()|D_Up()|D_Down()"
      },
      e: {
        RushHour: "https://en.wikipedia.org/wiki/Rush_Hour_(board_game)"
      }
    },
    PickingBerries: {
      b: "# LOC:46 bg sc fc sw [] * + line text textSize textAlign constrain dist splice break for in class extends constructor new @ super ->\n\nclass PickingBerries extends LocalStorage\n	reset      : ->\n	draw       : ->\n	left       : -> \n	right      : -> \n	up         : -> \n	down       : -> \n	snailSpeed : ->\n	slowSpeed  : ->\n	highSpeed  : ->\n	warpSpeed  : ->\n	pick       : ->\n\nberries = new PickingBerries \"b\"",
      a: "class PickingBerries extends LocalStorage\n\n	reset : ->\n		super\n		@x = 100\n		@y = 100\n		@speed = 1\n		@clix = 0\n		@berries = [[100,107],[189,175],[124,138],[196,188],[13,37],[187,78],[12,168],[153,31],[32,20],[131,188]]\n\n	draw : ->\n		bg 0\n		sc 1\n		sw 1\n		d = 5 + @speed\n		line @x-d,@y,@x,@y\n		line @x,@y-d,@x,@y\n		line @x,@y,@x+d,@y\n		line @x,@y,@x,@y+d\n		\n		fc 1,1,0\n		sc()\n		textSize 20\n		textAlign CENTER,CENTER\n		text @clix,100,180\n\n		sc 1,0,0\n		sw 2\n		for [x,y] in @berries\n			line x-3,y-3,x+3,y+3\n			line x+3,y-3,x-3,y+3\n\n	move : (dx,dy) -> 		\n		@x += dx * @speed\n		@y += dy * @speed\n		@clix++\n\n	left    : -> @move -1,0\n	right   : -> @move 1,0\n	up      : -> @move 0,-1\n	down    : -> @move 0,1\n	snailSpeed : -> @speed = 1\n	slowSpeed : -> @speed = 5\n	highSpeed : -> @speed = 10\n	warpSpeed : -> @speed = 50\n\n	step : (d) -> \n		@clix++\n		constrain @zoom+d,0,3 \n	pick : ->\n		for [x,y],i in @berries\n			if dist(x,y,@x,@y) <= 2\n				@berries.splice i,1\n				break\n		@clix++\n\nberries = new PickingBerries \"a\"",
      c: {
        berries: "reset()|left()|right()|up()|down()|snailSpeed()|slowSpeed()|highSpeed()|warpSpeed()|pick()"
      }
    }
  },
  "LB: miscellaneous": {
    alphanumeric: {
      b: "# LOC:15 bg for in range indexOf & ** circle {} [] '' if then else class extends constructor new @ super ->\n\nclass AlphaNumeric extends LocalStorage\n	reset : ->\n	draw : ->\n	character : (ch) -> \n\nalpha = new AlphaNumeric \"b\"",
      a: "class AlphaNumeric extends LocalStorage\n	reset : -> \n		@pattern = {1:'4c4444e', 2:'eh1248v', A:'ehhvhhh', B:'uhhuhhu'}\n		@ch = 'A'\n	draw : ->\n		bg 0\n		sc()\n		for ch,j in @pattern[@ch]\n			index = '0123456789abcdefghijklmnopqrstuv'.indexOf ch\n			for i in range 5\n				if index & 2**i then fc 0,1,0 else fc 0,0.3,0\n				x = 140-20*i\n				y = 40+20*j\n				circle x,y,8\n	character : (ch) -> @ch = ch\n\nalpha = new AlphaNumeric \"a\"",
      c: {
        alpha: "reset()|character 'A'|character 'B'|character '1'|character '2'"
      }
    },
    GoldenStar: {
      b: "# LOC:23 bg fc for in range triangle translate rotate cos sin class extends constructor new @ super ->\n\nclass GoldenStar extends LocalStorage\n	reset : ->\n	_n : (d) -> \n	_outer : (d) ->\n	_inner : (d) ->\n	draw : ->\n\nstar = new GoldenStar \"b\"",
      a: "class GoldenStar extends LocalStorage\n	reset : ->\n		@x = 100\n		@y = 100\n		@n = 4\n		@outer = 100\n		@inner = 25\n	_n : (d) -> @n = constrain @n+d,3,12\n	_outer : (d) -> @outer = constrain @outer+d, 0, 100\n	_inner : (d) -> @inner = constrain @inner+d, 0, 100\n	draw : ->\n		bg 0\n		translate @x,@y\n		v = TWO_PI/@n\n		rotate -PI/2\n		x1 = @inner * cos v/2\n		y1 = @inner * sin v/2\n		for i in range @n\n			fc 1,1,0\n			triangle 0,0, @outer,0, x1,y1\n			fc 1,0.7,0\n			triangle 0,0, @outer,0, x1,-y1\n			rotate v\n\nstar = new GoldenStar \"a\"",
      c: {
        star: "reset()|_n -1|_n +1|_outer -1|_outer +1|_inner -1|_inner +1"
      }
    },
    Polygon: {
      b: "# LOC:23 bg sc line for in range cos sin radians class extends constructor new @ super ->\n\nclass Turtle\n	constructor : (@r=1,@g=0,@b=0, @x=100,@y=10,@dir=0) ->\n	fd : (d) ->\n	rt : (a) ->\n\nclass Polygon extends LocalStorage\n	reset : ->\n	draw : ->\n	antalSidor : (d) ->\n	antalSteg : (d) -> \n\npolygon = new Polygon \"b\"",
      a: "class Turtle\n	constructor : (@r=1,@g=0,@b=0, @x=100,@y=10,@dir=0) ->\n	fd : (d) ->\n		dx = d*cos radians @dir\n		dy = d*sin radians @dir\n		sc @r,@g,@b\n		line @x,@y,@x+dx,@y+dy\n		@x += dx\n		@y += dy\n	rt : (a) ->\n		@dir +=a\n\nclass Polygon extends LocalStorage\n	reset : ->\n		@n = 6\n		@steg = 60\n\n	draw : ->\n		t = new Turtle()\n		bg 0\n		for i in range @n\n			t.fd @steg\n			t.rt 360/@n\n\n	antalSidor : (d) -> @n += d\n	antalSteg : (d) -> @steg += d\n\npolygon = new Polygon \"a\"",
      c: {
        polygon: "reset()|antalSidor -1|antalSidor +1|antalSteg -1|antalSteg +1|"
      }
    }
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhdGEuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQSxJQUFBOztBQUFBLElBQUEsR0FHQztFQUFBLE9BQUEsRUFHQztJQUFBLE9BQUEsRUFDQztNQUFBLENBQUEsRUFBRSwrWUFBRjtNQWNBLENBQUEsRUFBRSxFQWRGO0tBREQ7SUFrQkEsS0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFFLHlEQUFGO01BSUEsQ0FBQSxFQUFFLDZmQUpGO0tBbkJEO0lBd0RBLFNBQUEsRUFDQztNQUFBLENBQUEsRUFBRSxvREFBRjtNQUlBLENBQUEsRUFBRSwyTEFKRjtLQXpERDtJQTRFQSxPQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUUsdURBQUY7TUFJQSxDQUFBLEVBQUUseVdBSkY7S0E3RUQ7SUF5R0EsYUFBQSxFQUNDO01BQUEsQ0FBQSxFQUFFLHNFQUFGO01BSUEsQ0FBQSxFQUFFLDRyQkFKRjtLQTFHRDtJQXFKQSxLQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUUseUVBQUY7TUFJQSxDQUFBLEVBQUUseVJBSkY7S0F0SkQ7SUErS0EsSUFBQSxFQUNDO01BQUEsQ0FBQSxFQUFFLDBDQUFGO01BSUEsQ0FBQSxFQUFFLG1LQUpGO0tBaExEO0lBaU1BLEtBQUEsRUFDQztNQUFBLENBQUEsRUFBRSxpREFBRjtNQUlBLENBQUEsRUFBRSwwTEFKRjtLQWxNRDtJQWtOQSxJQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUUscURBQUY7TUFJQSxDQUFBLEVBQUUsK0tBSkY7S0FuTkQ7SUFtT0EsTUFBQSxFQUNDO01BQUEsQ0FBQSxFQUFFLHFEQUFGO01BSUEsQ0FBQSxFQUFFLDBMQUpGO0tBcE9EO0lBcVBBLE9BQUEsRUFDQztNQUFBLENBQUEsRUFBRSx1RUFBRjtNQUlBLENBQUEsRUFBRSwrUEFKRjtLQXRQRDtJQXlRQSxhQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUUsb0VBQUY7TUFJQSxDQUFBLEVBQUUsOFFBSkY7S0Ex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V0EsQ0FBQSxFQUFFLDJxREFYRjtNQTBGQSxDQUFBLEVBQ0M7UUFBQSxLQUFBLEVBQVEsd0JBQVI7T0EzRkQ7S0E1TUQ7SUF5U0EsU0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFFLHFiQUFGO01BcUJBLENBQUEsRUFBRywydkJBckJIO01BbUVBLENBQUEsRUFDQztRQUFBLElBQUEsRUFBTSxnQ0FBTjtPQXBFRDtLQTFTRDtJQWlYQSxRQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUUsNmtCQUFGO01BNEJBLENBQUEsRUFBRSwwMENBNUJGO01BMEZBLENBQUEsRUFDQztRQUFBLFFBQUEsRUFBVywrRUFBWDtPQTNGRDtNQTRGQSxDQUFBLEVBQ0M7UUFBQSxRQUFBLEVBQVcsc0RBQVg7T0E3RkQ7S0FsWEQ7SUFpZEEsY0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFFLG1hQUFGO01Ba0JBLENBQUEsRUFBRSxxaUNBbEJGO01BNkVBLENBQUEsRUFDQztRQUFBLE9BQUEsRUFBVSw0RkFBVjtPQTlFRDtLQWxkRDtHQXYzREQ7RUEwNUVBLG1CQUFBLEVBR0M7SUFBQSxZQUFBLEVBQ0M7TUFBQSxDQUFBLEVBQUUsME9BQUY7TUFVQSxDQUFBLEVBQUUsd2JBVkY7TUE2QkEsQ0FBQSxFQUNDO1FBQUEsS0FBQSxFQUFPLGlFQUFQO09BOUJEO0tBREQ7SUFpQ0EsVUFBQSxFQUNDO01BQUEsQ0FBQSxFQUFHLDRQQUFIO01BWUEsQ0FBQSxFQUFHLG9pQkFaSDtNQXVDQSxDQUFBLEVBQ0M7UUFBQSxJQUFBLEVBQU8sNkRBQVA7T0F4Q0Q7S0FsQ0Q7SUE0RUEsT0FBQSxFQUNDO01BQUEsQ0FBQSxFQUFFLDBVQUFGO01BZ0JBLENBQUEsRUFBRSw4ZUFoQkY7TUE4Q0EsQ0FBQSxFQUNDO1FBQUEsT0FBQSxFQUFVLGdFQUFWO09BL0NEO0tBN0VEO0dBNzVFRCIsInNvdXJjZXNDb250ZW50IjpbIiMgYiA6IGNvbW1lbnQgbGluZS4gTE9DIGFuZCBrZXl3b3JkIGNsdWVzXHJcbiMgYSA6IGZhY2l0XHJcbiMgYyA6IGNhbGwgXHJcblxyXG5kYXRhID0gXHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblx0TnloZXRlciA6XHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcblx0XHROeWhldGVyIDpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBOWUhFVEVSIDIwMTcgTUFSXHJcbiMgICBMNjogVHdvIEFyY3NcclxuIyAgIEw3OiBSb3VsZXR0ZVxyXG4jICAgTDg6IGJvYXJkR2FtZSwgc2V2ZW5TZWdtZW50LCBPbHltcGljUmluZ1xyXG4jICAgTDk6IENvbm5lY3Q0LCBSdXNoSG91ciwgZ2lybGFuZywgYnJhaWQsIE9seW1waWNSaW5ncywgY2hlc3NHYW1lXHJcbiMgICBMMTA6IGFscGhhbnVtZXJpYywgR29sZGVuU3Rhciwgc3BhY2VTaGlwXHJcblxyXG4jIEtsaWNrYSBudSBww6UgTDEhXHJcblxyXG4jIEVsbGVyIGJlc8O2ayBVdHN0w6RsbG5pbmdlbi5cclxuIyBEZXNzYSBiaWxkZXIgw6RyIGZyYW10YWduYSBhdiBkZWx0YWdhcmUgcMOlIHA1RG9qby5cclxuIyBWaWxsIGR1IG9ja3PDpSB2aXNhIHVwcCBkaXR0IGFsc3Rlcj8gR2UgaSBzw6UgZmFsbCBrb2RlbiB0aWxsIGRpbiBtZW50b3IuXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5cIlwiXCJcclxuXHJcblx0XHRjbG93bjpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MzAgYmcgY2lyY2xlIGZjIHNjIHN3IGxpbmUgbGVycCAoRGF2aWQgTGFyc3NvbilcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5iZyAwLCAxLCAwLCAwLjVcclxuZmMgMSwgMCwgMFxyXG5jaXJjbGUgMTAsIDEwLCA1XHJcbmNpcmNsZSAyMCwgMjAsIDEwXHJcbmZvciBpIGluIHJhbmdlIDEwXHJcblx0eCA9IGxlcnAgMTAsIDIwLCBpXHJcblx0eSA9IHhcclxuXHRyID0gbGVycCA1LCAxMCwgaVxyXG5cdGNpcmNsZSB4LCB5LCByXHJcbmZjIDAsIDEsIDFcclxuY2lyY2xlIDE5MCwgMTAsIDVcclxuY2lyY2xlIDE4MCwgMjAsIDEwXHJcbmZvciBpIGluIHJhbmdlIDEwXHJcblx0eCA9IGxlcnAgMTkwLCAxODAsIGlcclxuXHR5ID0gbGVycCAxMCwgMjAsIGlcclxuXHRyID0gbGVycCA1LCAxMCwgaVxyXG5cdGNpcmNsZSB4LCB5LCByXHJcbmZjIDFcclxuY2lyY2xlIDEwMCwgMTAwLCA1MFxyXG5mYyAwXHJcbmNpcmNsZSA4MCwgODAsIDEwXHJcbmNpcmNsZSAxMjAsIDgwLCAxMFxyXG5zYyAxLCAxLCAwXHJcbnN3IDVcclxubGluZSA3MCwgMTA1LCA4MCwgMTIwXHJcbmxpbmUgODAsIDEyMCwgMTE1LCAxMjBcclxubGluZSAxMTUsIDEyMCwgMTMwLCAxMDVcclxuZmMgMSwgMCwgMFxyXG5zYyAxLCAwLCAwXHJcbmNpcmNsZSAxMDAsIDEwMCwgMTBcclxuXCJcIlwiXHJcblxyXG5cdFx0dG9tdGVsdXZhOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzoxMiBjaXJjbGUgZmMgc2MgdHJpYW5nbGUgKFNhYnJpbmEgTGFyc3NvbilcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5iZyAwLDEsMFxyXG5mYyAxLDAsMFxyXG5zYyAxLDAsMFxyXG50cmlhbmdsZSA2MCwxNDAsMTAwLDYwLDE0MCwxNDBcclxuZmMgMVxyXG5zYyAxXHJcbmNpcmNsZSA2MCwxNDAsMTBcclxuY2lyY2xlIDgwLDE0MCwxMFxyXG5jaXJjbGUgMTAwLDE0MCwxMFxyXG5jaXJjbGUgMTIwLDE0MCwxMFxyXG5jaXJjbGUgMTQwLDE0MCwxMFxyXG5jaXJjbGUgMTAwLDYwLDEwXHRcdFxyXG5cIlwiXCJcclxuXHJcblx0XHRzbm93bWFuOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzoyMSBjaXJjbGUgZmMgbGluZSBzYyB0cmlhbmdsZSAoRGF2aWQgTGFyc3NvbilcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5mYyAxXHJcbmNpcmNsZSAxMDAsIDE1MCwgNTBcclxuY2lyY2xlIDEwMCwgNzAsIDQwXHJcbmZjIDBcclxuY2lyY2xlIDgwLCA2MCwgOFxyXG5jaXJjbGUgMTIwLCA2MCwgOFxyXG5jaXJjbGUgODUsIDkwLCA2XHJcbmNpcmNsZSA5NSwgOTUsIDZcclxuY2lyY2xlIDExNSwgOTAsIDZcclxuY2lyY2xlIDEwNSwgOTUsIDZcclxuZmMgMSwgMCwgMCwgMC41XHJcbnRyaWFuZ2xlIDEwMCwgNjUsIDkwLCA4MCwgMTA1LCA3NVxyXG5zYyAxLCAxLCAwXHJcbnN3IDNcclxubGluZSA1MCwgMTQwLCAzMCwgOTBcclxubGluZSAzNSwgMTAwLCA0MCwgODBcclxubGluZSAxNDAsIDE0MCwgMTcwLCA5MFxyXG5saW5lIDE2MCwgMTA1LCAxNTUsIDEwMFxyXG5mYyAxXHJcbnNjIDFcclxucmVjdCAyLCAxODAsIDE5NiwgMjBcclxuXCJcIlwiXHJcblxyXG5cdFx0Y2hyaXN0bWFzVHJlZTpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MzUgYmcgY2lyY2xlIGZjIGxpbmUgcmVjdCBxdWFkIHNjIHRyaWFuZ2xlIChTYWJyaW5hIExhcnNzb24pXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuYmcgMCBcclxuZmMgMCwgMSwgMCBcclxuc2MgMCwgMSwgMCBcclxudHJpYW5nbGUgMTAwLCAxMDAsIDE4MCwgMTYwLCAyMCwgMTYwIFxyXG50cmlhbmdsZSAxMDAsIDYwLCAxNjAsIDEyMCwgNDAsIDEyMCBcclxudHJpYW5nbGUgMTAwLCA0MCwgMTQwLCA4MCwgNjAsIDgwIFxyXG5mYyAwLjUgXHJcbnNjIDAuNSBcclxucmVjdCA4MCwgMTYwLCA0MCwgMjAgXHJcbmZjIDEsIDEsIDAgXHJcbnNjIDEsIDEsIDAgXHJcbnF1YWQgMTAwLCAwLCAxMjAsIDIwLCAxMDAsIDQwLCA4MCwgMjAgXHJcbnJlY3QgODUsIDUsIDMwLCAzMCBcclxuc2MgMSwgMSwgMCBcclxubGluZSA4MCwgNjAsIDE0MCwgMTIwIFxyXG5saW5lIDYwLCAxMDAsIDEyMCwgMTYwIFxyXG5mYyAxLCAwLCAwIFxyXG5zYyAxLCAwLCAwIFxyXG5jaXJjbGUgODAsIDEwMCwgNSBcclxuY2lyY2xlIDE0MCwgMTQwLCA1IFxyXG5jaXJjbGUgMTAwLCA2MCwgNSBcclxuY2lyY2xlIDYwLCAxNjAsIDUgXHJcbmNpcmNsZSAxMDAsIDEyMCwgNSBcclxuZmMgMSBcclxuc2MgMSBcclxucmVjdCAwLCAxODAsIDIwMCwgMjAgXHJcbmNpcmNsZSAyMCwgMjAsIDUgXHJcbmNpcmNsZSA0MCwgNDAsIDUgXHJcbmNpcmNsZSAxMCwgODAsIDUgXHJcbmNpcmNsZSAzMCwgMTQwLCA1IFxyXG5jaXJjbGUgNTAsIDEwMCwgNSBcclxuY2lyY2xlIDEyMCwgNTAsIDUgXHJcbmNpcmNsZSAxNjAsIDIwLCA1IFxyXG5jaXJjbGUgMTgwLCA4MCwgNSBcclxuY2lyY2xlIDE2MCwgMTMwLCA1IFxyXG5jaXJjbGUgMTkwLCAxODAsIDUgXHJcblwiXCJcIlxyXG5cclxuXHRcdHNhbnRhOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzoxOCBiZyBjaXJjbGUgZWxsaXBzZSBmYyByZWN0IHF1YWQgc2MgdHJpYW5nbGUgKFNhYnJpbmEgTGFyc3NvbilcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5iZyAwLDAsMVxyXG5mYyAxLDAsMFxyXG5zYyAxLDAsMFxyXG5lbGxpcHNlIDEwMCw1MCw2MCw3MFxyXG5yZWN0IDYwLDIwLDMwLDEwXHJcbnF1YWQgMTQwLDEwLDE0NSwyMCwxMjAsMjUsMTE1LDIwXHJcbmZjIDBcclxuc2MgMFxyXG5jaXJjbGUgNTAsMjUsMTBcclxucmVjdCA3MCw0MCw2MCwxMFxyXG5jaXJjbGUgMTQwLDIwLDEwXHJcbnNjIDEsMSwwXHJcbnJlY3QgMTAwLDQ1LDUsNVxyXG5mYyAwLjVcclxuc2MgMC41XHJcbnJlY3QgNjAsODAsODAsMjBcclxucmVjdCA4MCwxMDAsNDAsNjBcclxudHJpYW5nbGUgMTAwLDE0MCwwLDIwMCwyMDAsMjAwXHJcblwiXCJcIlxyXG5cclxuXHRcdGRpc3Q6IFxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzoxMCBiZyBjaXJjbGUgZGlzdCBmYyBsZXJwIG1hcCBzY1xyXG5cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmJnIDBcclxuZmMgMVxyXG5zYygpXHJcbmZvciBpIGluIHJhbmdlIDEwXHJcblx0eCA9IGxlcnAgMTAsMzAsaVxyXG5cdGZvciBqIGluIHJhbmdlIDEwXHJcblx0XHR5ID0gbGVycCAxMCwzMCxqXHJcblx0XHRkID0gZGlzdCAxMDAsMTAwLHgseVxyXG5cdFx0ciA9IG1hcChkLDAsMTUwLDEsMjApLzJcclxuXHRcdGNpcmNsZSB4LHksclxyXG5cIlwiXCIgXHJcblx0XHRcclxuXHRcdGJ1bGdlOiBcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MTAgYmcgY2lyY2xlIGRpc3QgZmlsbCBtYXAgbm9TdHJva2Ugc2luXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuYmcgMFxyXG5maWxsIDI1NVxyXG5ub1N0cm9rZSgpXHJcbmZvciBpIGluIHJhbmdlIDIwXHJcblx0Zm9yIGogaW4gcmFuZ2UgMjBcclxuXHRcdHggPSBpKjIwMC8yMCs1XHJcblx0XHR5ID0gaioyMDAvMjArNVxyXG5cdFx0ciA9IG1hcChzaW4oaSpQSS8yMCksLTEsMSwxLDMpICogbWFwKHNpbihqKlBJLzIwKSwtMSwxLDEsMykgLyAyXHJcblx0XHRjaXJjbGUgeCx5LHJcclxuXCJcIlwiXHJcblxyXG5cdFx0d2F2ZTogXHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjkgY2lyY2xlIGNvbG9yTW9kZSBmaWxsIG1hcCBub1N0cm9rZSBzaW4gUElcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5jb2xvck1vZGUgSFNCLDM2MCwxMDAsMTAwXHJcbm5vU3Ryb2tlKClcclxuYmcgMFxyXG5mb3IgaSBpbiByYW5nZSAyMVxyXG5cdGZpbGwgbWFwKGksMCwyMCwwLDM2MCksMTAwLDEwMFxyXG5cdGEgPSBtYXAgaSwwLDIwLDAsMipQSVxyXG5cdHggPSAxMCppXHJcblx0eSA9IG1hcCBzaW4oYSksLTEsMSwwLDIwMFxyXG5cdGNpcmNsZSB4LHksM1xyXG5cIlwiXCJcclxuXHJcblx0XHRjaXJjbGU6IFxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzoxMCBiZyBjaXJjbGUgY29sb3JNb2RlIGNvcyBmYyBtYXAgUEkgc2Mgc2luXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuYmcgMFxyXG5jb2xvck1vZGUgSFNCLDM2MCwxMDAsMTAwXHJcbmZvciBpIGluIHJhbmdlIDIwXHJcblx0cj1tYXAgaSwwLDE5LDAsMzYwXHJcblx0ZmlsbCByLDI1NSwyNTVcclxuXHRhPW1hcCBpLDAsMjAsMCwyKlBJXHJcblx0c2MoKVxyXG5cdHg9bWFwIGNvcyhhKSwtMSwxLDAsMjAwXHJcblx0eT1tYXAgc2luKGEpLC0xLDEsMCwyMDBcclxuXHRjaXJjbGUgeCx5LDNcclxuXCJcIlwiXHJcblx0XHJcblx0XHRjaXJjbGVzOiBcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MTIgYmcgY2lyY2xlIGNvbG9yTW9kZSBjb3MgZmlsbCBtYXAgbm9TdHJva2UgdHJhbnNsYXRlIHNpbiBQSVxyXG5cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmJnIDBcclxubm9TdHJva2UoKVxyXG5jb2xvck1vZGUgSFNCLDM2MCwxMDAsMTAwXHJcbnRyYW5zbGF0ZSAxMDAsMTAwXHJcbmZvciBpIGluIHJhbmdlIDIwXHJcblx0Zm9yIGogaW4gcmFuZ2UgMTFcclxuXHRcdGZpbGwgbWFwKGksMCwyMCwwLDM2MCksMjU1LDI1NVxyXG5cdFx0YSA9IG1hcCBpLDAsMjAsMCwyKlBJXHJcblx0XHR4ID0gbWFwIGNvcyhhKSwtMSwxLC1qKjEwLGoqMTBcclxuXHRcdHkgPSBtYXAgc2luKGEpLC0xLDEsLWoqMTAsaioxMFxyXG5cdFx0ciA9IDNcclxuXHRcdGNpcmNsZSB4LHksclxyXG5cIlwiXCJcclxuXHRcdFxyXG5cdFx0c2l6ZWRfY2lyY2xlczogXHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjEyIGNpcmNsZSBjb2xvck1vZGUgY29zIGZpbGwgbWFwIG5vU3Ryb2tlIFBJIHNpbiB0cmFuc2xhdGVcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5iZyAwXHJcbm5vU3Ryb2tlKClcclxuY29sb3JNb2RlIEhTQiwzNjAsMTAwLDEwMFxyXG50cmFuc2xhdGUgMTAwLDEwMFxyXG5mb3IgaSBpbiByYW5nZSAyMFxyXG5cdGZpbGwgbWFwKGksMCwyMCwwLDM2MCksMjU1LDI1NVxyXG5cdGEgPSBtYXAgaSwwLDIwLDAsMipQSVxyXG5cdGZvciBqIGluIHJhbmdlIDExXHJcblx0XHR4ID0gbWFwIGNvcyhhKSwtMSwxLC1qKjEwLGoqMTBcclxuXHRcdHkgPSBtYXAgc2luKGEpLC0xLDEsLWoqMTAsaioxMFxyXG5cdFx0ciA9IG1hcChqLDAsMTAsMCwxMCkvMlxyXG5cdFx0Y2lyY2xlIHgseSxyXHJcblwiXCJcIlxyXG5cdFx0XHJcblx0XHRyb3RhdGVkX2NpcmNsZXM6IFxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzoxNyBjaXJjbGUgY29zIG1hcCBQSSBwdXNoIHBvcCByb3RhdGUgc2luIHRyYW5zbGF0ZVxyXG5cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmNvbG9yTW9kZSBIU0IsMzYwLDEwMCwxMDBcclxuc2MoKVxyXG5iZyAwXHJcbnRyYW5zbGF0ZSAxMDAsMTAwXHJcbmZvciBpIGluIHJhbmdlIDIwXHJcblx0ciA9IG1hcCBpLDAsMjAsMCwzNjBcclxuXHRhPW1hcCBpLDAsMjAsMCwyKlBJXHJcblx0Zm9yIGogaW4gcmFuZ2UgMTFcclxuXHRcdHB1c2goKVxyXG5cdFx0cm90YXRlIG1hcCBqLDAsMTAsMCwzNjBcclxuXHRcdGZpbGwgciwyNTUsMjU1XHJcblx0XHR4PW1hcCBjb3MoYSksLTEsMSwtaioxMCxqKjEwXHJcblx0XHR5PW1hcCBzaW4oYSksLTEsMSwtaioxMCxqKjEwXHJcblx0XHRjaXJjbGUgeCx5LGovMlxyXG5cdFx0cG9wKClcclxuXCJcIlwiXHJcblxyXG5cdFx0Z3Jhdml0eSA6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6NiBjaXJjbGUgbGVycFxyXG5cclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5mYyAxXHJcbmZvciBpIGluIHJhbmdlIDE1XHJcblx0eD01KzEwKmlcclxuXHR5PTUrbGVycCgwLGxlcnAoMCwxLGkpLGkpXHJcblx0Y2lyY2xlIHgseSw1XHJcblwiXCJcIlxyXG5cclxuXHRcdGh5cG5vdGljQSA6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyBMT0M6NiAtPiBiZyBjaXJjbGUgY29zIGZjIHNjIHNpblxyXG5cclxuXHRcdFx0aHlwbm90aWNBID0gKCkgLT5cclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5oeXBub3RpY0EgPSAoKSAtPlxyXG5cdGJnIDAuNSwgMCwgMFxyXG5cdHNjKClcclxuXHRmYyAxXHJcblx0Zm9yIGkgaW4gcmFuZ2UgMTAwXHJcblx0XHR4ID0gMTAwICsgY29zKGkpICogaVxyXG5cdFx0eSA9IDEwMCArIHNpbihpKSAqIGlcclxuXHRcdGNpcmNsZSB4LCB5LCA1XHJcblwiXCJcIlxyXG5cdFx0XHRjOiBcImh5cG5vdGljQSgpXCI6MFxyXG5cclxuXHRcdGh5cG5vdGljQiA6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuXHRcdFx0IyBMT0M6NyAtPiBiZyBjaXJjbGUgY29zIGZjIG1hcCBzYyBzaW5cclxuXHJcblx0XHRcdGh5cG5vdGljQiA9ICh0KSAtPlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbmh5cG5vdGljQiA9ICh0KSAtPlxyXG5cdGJnIDAuNSwgMCwgMFxyXG5cdHNjKClcclxuXHRmYyAxXHJcblx0Zm9yIGkgaW4gcmFuZ2UgMTAwXHJcblx0XHR4ID0gMTAwICsgY29zKGkpICogaVxyXG5cdFx0eSA9IDEwMCArIHNpbihpKSAqIGlcclxuXHRcdHNwZWVkID0gaS8xMC4wXHJcblx0XHRyID0gbWFwIHNpbih0KnNwZWVkKSwgLTEsIDEsIDIsIDVcclxuXHRcdGNpcmNsZSB4LCB5LCByXHJcblwiXCJcIlxyXG5cdFx0XHRjOiBcclxuXHRcdFx0XHRcImh5cG5vdGljQiAxXCI6MFxyXG5cdFx0XHRcdFwiaHlwbm90aWNCIDVcIjowXHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblx0XCJMMTogYmcgcG9pbnQgc2Mgc3dcIjogXHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcblx0XHRCYWNrZ3JvdW5kMTogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIERlbiDDtnZlcnN0YSBiaXRtYXBwZW4gdGlsbCBow7ZnZXIgdmlzYXIgcmVzdWx0YXRldCBhdiBkaW4ga29kLlxyXG4jIERlbiBtZWxsZXJzdGEgYml0bWFwcGVuIHNrYSBkdSBlZnRlcmxpa25hLlxyXG4jIERlbiB1bmRlcnN0YSBiaXRtYXBwZW4gdmlzYXIgc2tpbGxuYWRlbiBtZWxsYW4gZGUgdHbDpSBhbmRyYS5cclxuXHJcbiMgVHJ5Y2sgcMOlIFBnRG4gZsO2ciBhdHQga29tbWEgdGlsbCBzaXN0YSByYWRlbi5cclxuIyBTa3JpdiBpbiBmw7ZsamFuZGUga29tbWFuZG86IGJnIDFcclxuIyBLb250cm9sbGVyYSBhdHQgZGUgYsOlZGEgw7Z2cmUgYml0bWFwcGFybmEgbnUgw6RyIGxpa2EuXHJcblxyXG4jIEtsaWNrYSBww6UgQmFja2dyb3VuZDIgZsO2ciBhdHQga29tbWEgdGlsbCBuw6RzdGEgw7Z2bmluZy5cclxuIyBLbGlja2EgcMOlIEhlbHAgbmVyZSB0aWxsIHbDpG5zdGVyIGbDtnIgbWVyYSBpbmZvcm1hdGlvbi5cclxuIyBLbGlja2EgcMOlIFJlZmVyZW5jZSBmw7ZyIGF0dCBzZSBmbGVyIGtvbW1hbmRvbi5cclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcImJnIDFcIlxyXG5cclxuXHRcdEJhY2tncm91bmQyOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjEgYmdcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcImJnIDAuNVwiXHJcblxyXG5cdFx0QmFja2dyb3VuZDM6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6MSBiZ1xyXG5cclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiYmcgMSwwLDBcIlxyXG5cclxuXHRcdEJhY2tncm91bmQ0OiBcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjEgYmdcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcImJnIDEsMSwwXCJcclxuXHJcblx0XHRDb3JuZXJQb2ludHM6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6OSBzYyBzdyBwb2ludFxyXG5cclxuc3cgNVxyXG5zYyAxLDAsMFxyXG5wb2ludCAwLDBcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuc3cgNVxyXG5zYyAxLDAsMFxyXG5wb2ludCAwLDBcclxuc2MgMCwxLDBcclxucG9pbnQgMjAwLDBcclxuc2MgMSwxLDBcclxucG9pbnQgMCwyMDBcclxuc2MgMFxyXG5wb2ludCAyMDAsMjAwXHJcblwiXCJcIlxyXG5cclxuXHRcdE1pZFBvaW50czogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzoxMSBzYyBzdyBwb2ludFxyXG5cclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5zdyA1XHJcbnNjIDEsMCwwXHJcbnBvaW50IDEwMCwxMDBcclxuc2MgMCwxLDBcclxucG9pbnQgMTAwLDBcclxuc2MgMSwxLDBcclxucG9pbnQgMCwxMDBcclxuc2MgMFxyXG5wb2ludCAyMDAsMTAwXHJcbnNjIDFcclxucG9pbnQgMTAwLDIwMFxyXG5cIlwiXCJcclxuXHJcblx0XHRDb3JuZXJQb2ludHMzOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjE3IHNjIHN3IHBvaW50XHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbnN3IDVcclxuc2MgMSwwLDBcclxucG9pbnQgMjAsMFxyXG5wb2ludCAyMCwyMFxyXG5wb2ludCAwLDIwXHJcblxyXG5zYyAwLDEsMFxyXG5wb2ludCAxODAsMFxyXG5wb2ludCAxODAsMjBcclxucG9pbnQgMjAwLDIwXHJcblxyXG5zYyAxLDEsMFxyXG5wb2ludCAyMCwxODBcclxucG9pbnQgMjAsMjAwXHJcbnBvaW50IDAsMTgwXHJcblxyXG5zYyAxXHJcbnBvaW50IDE4MCwxODBcclxucG9pbnQgMTgwLDIwMFxyXG5wb2ludCAyMDAsMTgwXHJcblwiXCJcIlxyXG5cclxuXHRcdENvcm5lclBvaW50czc6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6MTcgc2Mgc3cgcG9pbnRcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuc3cgNVxyXG5zYyAxLDAsMFxyXG5wb2ludCAzMCwwXHJcbnBvaW50IDMwLDEwXHJcbnBvaW50IDMwLDIwXHJcbnBvaW50IDMwLDMwXHJcbnBvaW50IDEwLDMwXHJcbnBvaW50IDIwLDMwXHJcbnBvaW50IDAsMzBcclxuXHJcbnNjIDAsMSwwXHJcbnBvaW50IDE3MCwyMDBcclxucG9pbnQgMTcwLDE5MFxyXG5wb2ludCAxNzAsMTgwXHJcbnBvaW50IDE3MCwxNzBcclxucG9pbnQgMTkwLDE3MFxyXG5wb2ludCAxODAsMTcwXHJcbnBvaW50IDIwMCwxNzBcclxuXCJcIlwiXHJcblxyXG5cdFx0RGlhZ29uYWw6IFxyXG5cdFx0XHRiOiBcIlwiXCJcclxuIyBMT0M6MjMgc2Mgc3cgcG9pbnRcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuc2MgMSwwLDBcclxuc3cgMTFcclxucG9pbnQgMjAwLDBcclxuc3cgMTBcclxucG9pbnQgMTgwLDIwXHJcbnN3IDlcclxucG9pbnQgMTYwLDQwXHJcbnN3IDhcclxucG9pbnQgMTQwLDYwXHJcbnN3IDdcclxucG9pbnQgMTIwLDgwXHJcbnN3IDZcclxucG9pbnQgMTAwLDEwMFxyXG5zdyA1XHJcbnBvaW50IDgwLDEyMFxyXG5zdyA0XHJcbnBvaW50IDYwLDE0MFxyXG5zdyAzXHJcbnBvaW50IDQwLDE2MFxyXG5zdyAyXHJcbnBvaW50IDIwLDE4MFxyXG5zdyAxXHJcbnBvaW50IDAsMjAwXHJcblwiXCJcIlxyXG5cclxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cdFwiTDI6IGNpcmNsZSBmYyB0ZXh0XCIgOiBcclxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuXHRcdGRpY2VzIDogXHJcblx0XHRcdGIgOiBcIlwiXCJcclxuIyBMT0M6MjYgcG9pbnQgc2NcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxucG9pbnQgMTAsMTBcclxuXHJcbnNjIDEsMCwwIFxyXG5wb2ludCAxODUsNSBcclxucG9pbnQgMTk1LDE1IFxyXG5cclxuc2MgMCwxLDAgXHJcbnBvaW50IDg1LDY1IFxyXG5wb2ludCA5MCw3MCBcclxucG9pbnQgOTUsNzUgXHJcblxyXG5zYyAxLDEsMCBcclxucG9pbnQgMTY1LDEwNSBcclxucG9pbnQgMTY1LDExNSBcclxucG9pbnQgMTc1LDEwNSBcclxucG9pbnQgMTc1LDExNSBcclxuXHJcbnNjIDEsMCwxIFxyXG5wb2ludCA0NSwxMjUgXHJcbnBvaW50IDQ1LDEzNSBcclxucG9pbnQgNTAsMTMwIFxyXG5wb2ludCA1NSwxMjUgXHJcbnBvaW50IDU1LDEzNSBcclxuXHJcbnNjIDAsMSwxIFxyXG5wb2ludCAxMDUsMTY1IFxyXG5wb2ludCAxMDUsMTcwIFxyXG5wb2ludCAxMDUsMTc1IFxyXG5wb2ludCAxMTUsMTY1IFxyXG5wb2ludCAxMTUsMTcwIFxyXG5wb2ludCAxMTUsMTc1IFxyXG5cIlwiXCJcdFxyXG5cdFx0XHJcblx0XHRGaXZlOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjEyIGJnIGNpcmNsZSBmYyBzY1xyXG5cclxuXCJcIlwiIFxyXG5cdFx0XHRhOiBcIlwiXCJcclxuYmcgMC41XHJcbnNjKClcclxuZmMgMVxyXG5jaXJjbGUgMTAwLDEwMCwyMFxyXG5mYyAxLDAsMFxyXG5jaXJjbGUgNDAsNDAsMjBcclxuZmMgMSwxLDBcclxuY2lyY2xlIDQwLDE2MCwyMFxyXG5mYyAwLDEsMFxyXG5jaXJjbGUgMTYwLDE2MCwyMFxyXG5mYyAwLDAsMVxyXG5jaXJjbGUgMTYwLDQwLDIwXHJcblwiXCJcIiBcclxuXHJcblx0XHR3aGl0ZUNpcmNsZTogXHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjIgY2lyY2xlIGZjXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZmMgMVxyXG5jaXJjbGUgNjAsODAsMzBcclxuXCJcIlwiXHJcblxyXG5cdFx0d2hpdGVFbXB0eUNpcmNsZTogXHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjQgY2lyY2xlIGZjIHNjIHN3XHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuc2MgMVxyXG5mYygpXHJcbnN3IDJcclxuY2lyY2xlIDcwLDkwLDQwXHJcblwiXCJcIlxyXG5cclxuXHRcdHR3b0Rpc2NzQTogXHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjQgY2lyY2xlIGZjXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZmMgMSwwLDAgXHJcbmNpcmNsZSA4MCwxMDAsNDBcclxuZmMgMCwxLDBcclxuY2lyY2xlIDEwMCwxMjAsNTBcclxuXCJcIlwiXHJcblxyXG5cdFx0dHdvRGlzY3NCOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzo0IGNpcmNsZSBmY1xyXG5cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmZjIDEsMCwwXHJcbmNpcmNsZSA4MCwxMDAsNDBcclxuZmMgMCwxLDAsIDAuNVxyXG5jaXJjbGUgMTIwLDEwMCw1MFxyXG5cIlwiXCJcclxuXHJcblx0XHR0ZXh0QTogXHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjMgZmMgdGV4dFNpemUgdGV4dFxyXG5cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmZjIDEsMSwwXHJcbnRleHRTaXplIDMyXHJcbnRleHQgJ0NvZmZlZXNjcmlwdCcsMTAwLDEwMFxyXG5cIlwiXCJcclxuXHJcblx0XHR0ZXh0QjogXHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjQgZmMgdGV4dCB0ZXh0QWxpZ24gdGV4dFNpemVcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5mYyAxLDEsMFxyXG50ZXh0U2l6ZSAzMlxyXG50ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG50ZXh0ICdDb2ZmZWVzY3JpcHQnLDEwMCwxMDBcclxuXCJcIlwiXHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHRcdFx0XHRcclxuXHRcIkwzOiBlbGxpcHNlIHJlY3RcIiA6IFxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG5cdFx0Z3JlZW5FbGxpcHNlOiBcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MiBmYyBlbGxpcHNlXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZmMgMCwxLDBcclxuZWxsaXBzZSAxMjAsNjAsIDYwLDQwXHJcblwiXCJcIlxyXG5cclxuXHRcdGdyZWVuUmVjdDogXHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjIgZmMgcmVjdFxyXG5cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmZjIDAsMSwwXHJcbnJlY3QgNjAsODAsIDQwLDUwXHJcblwiXCJcIlxyXG5cclxuXHRcdHJlZFJlY3Q6XHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjIgZmMgcmVjdFxyXG5cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmZjIDEsMCwwXHJcbnJlY3QgODAsNzAsIDQwLDEwMFxyXG5cIlwiXCJcclxuXHJcblx0XHRjcm9zczogXHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjQgZmMgcmVjdFxyXG5cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmZjIDEsMCwwXHJcbnNjKClcclxucmVjdCA4NSw3MCwgNzAsMTBcclxucmVjdCAxMTUsNDAsIDEwLDEwMFxyXG5cIlwiXCJcclxuXHJcblx0XHRzcXVhcmVIb2xlOiBcclxuXHRcdFx0YiA6IFwiXCJcIlxyXG4jIExPQzoxMSBmYyBzYyBzdyByZWN0XHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZmMgMCwxLDFcclxuc2MoKVxyXG5yZWN0IDYwLDYwLCA4MCwyMFxyXG5yZWN0IDYwLDEyMCwgODAsMjBcclxucmVjdCA2MCw2MCwgMjAsODBcclxucmVjdCAxMjAsNjAsIDIwLDgwXHJcbmZjKClcclxuc2MgMSwwLDBcclxuc3cgM1xyXG5yZWN0IDYwLDYwLCA4MCw4MFxyXG5yZWN0IDgwLDgwLCA0MCw0MFxyXG5cIlwiXCIgXHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblx0XCJMNDogZm9yIGxlcnAgcmVjdFwiIDogXHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcblx0XHRcImhvcml6b250YWwgc3F1YXJlc1wiOiBcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MyByZWN0IGZvciBpbiByYW5nZSBsZXJwIFxyXG5cclxucmVjdCAgNSw1LDEwLDEwXHJcbnJlY3QgMjUsNSwxMCwxMFxyXG5mb3IgaSBpbiByYW5nZSA1XHJcblx0eCA9IGxlcnAgNSwyNSxpIFxyXG5cdHJlY3RcclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmZvciBpIGluIHJhbmdlIDEwXHJcblx0eCA9IDUrMjAqaVxyXG5cdHJlY3QgeCw1LCAxMCwxMFxyXG5cIlwiXCJcclxuXHJcblx0XHRcInZlcnRpY2FsIHNxdWFyZXNcIjogXHJcblx0XHRcdGI6XCIjIExPQzozIHJlY3QgZm9yIGluIHJhbmdlIGxlcnBcXG5cIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5mb3IgaSBpbiByYW5nZSAxMFxyXG5cdHkgPSA1KzIwKmlcclxuXHRyZWN0IDUseSwgMTAsMTBcclxuXCJcIlwiXHJcblxyXG5cdFx0XCJkaWFnb25hbCBzcXVhcmVzXCI6IFxyXG5cdFx0XHRiOlwiIyBMT0M6NCByZWN0IGZvciBpbiByYW5nZSBsZXJwXFxuXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZm9yIGkgaW4gcmFuZ2UgMTBcclxuXHR4ID0gNSsyMCppXHJcblx0eSA9IDUrMjAqaVxyXG5cdHJlY3QgeCx5LCAxMCwxMFxyXG5cIlwiXCJcclxuXHJcblx0XHRcImRvdWJsZSBmb3IgbG9vcFwiOiBcclxuXHRcdFx0YjpcIiMgTE9DOjUgcmVjdCBmb3IgaW4gcmFuZ2UgbGVycFxcblwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmZvciBpIGluIHJhbmdlIDEwXHJcblx0Zm9yIGogaW4gcmFuZ2UgMTBcclxuXHRcdHggPSA1KzIwKmlcclxuXHRcdHkgPSA1KzIwKmpcclxuXHRcdHJlY3QgeCx5LCAxMCwxMFxyXG5cIlwiXCJcclxuXHJcblx0XHRcImdyb3dpbmcgc3F1YXJlc1wiOiBcclxuXHRcdFx0YjpcIiMgTE9DOjcgcmVjdCByZWN0TW9kZSBmb3IgaW4gcmFuZ2UgbGVycFxcblwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbnJlY3RNb2RlIENFTlRFUlxyXG5mb3IgaSBpbiByYW5nZSAxMFxyXG5cdHggPSAxMCsyMCppXHJcblx0eSA9IDEwXHJcblx0dyA9IDIqaVxyXG5cdGggPSAyKmlcclxuXHRyZWN0IHgseSwgdyxoXHJcblwiXCJcIlxyXG5cclxuXHRcdFwiZ3Jvd2luZ3MgcmVkIHNxdWFyZXNcIjogXHJcblx0XHRcdGI6XCIjIExPQzo4IGZjIGZvciBpbiByYW5nZSBsZXJwIHJlY3QgcmVjdE1vZGVcXG5cIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5yZWN0TW9kZSBDRU5URVJcclxuZm9yIGkgaW4gcmFuZ2UgMTBcclxuXHRmYyBpLzEwLjAsMCwwXHJcblx0eCA9IDEwKzIwKmlcclxuXHR5ID0gMTBcclxuXHR3ID0gMippXHJcblx0aCA9IDIqaVxyXG5cdHJlY3QgeCx5LHcsaFxyXG5cIlwiXCJcclxuXHJcblx0XHRcImdyb3dpbmcgY2lyY2xlc1wiOiBcclxuXHRcdFx0YjpcIiMgTE9DOjYgZm9yIGluIHJhbmdlIGZjIGNpcmNsZSBsZXJwXFxuXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZm9yIGkgaW4gcmFuZ2UgMTBcclxuXHRmYyBpLzEwLjAsMCwwXHJcblx0eCA9IDEwKzIwKmlcclxuXHR5ID0gMTBcclxuXHRyID0gaVxyXG5cdGNpcmNsZSB4LHksclxyXG5cIlwiXCJcclxuXHJcblx0XHRcInNocmlua2luZyBjaXJjbGVzXCI6IFxyXG5cdFx0XHRiOlwiIyBMT0M6NCBmb3IgaW4gcmFuZ2UgZmMgY2lyY2xlIGxlcnBcXG5cIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5mb3IgaSBpbiByYW5nZSAxMCwwLC0xXHJcblx0ZmMgaS8xMC4wLDAsMFxyXG5cdHIgPSAxMCAqIGlcclxuXHRjaXJjbGUgMTAwLDEwMCwgclxyXG5cIlwiXCJcclxuXHJcblx0XHRcInJlZCBjb25lXCI6IFxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzo2IGZvciBpbiByYW5nZSBmYyBjaXJjbGUgbGVycFxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZm9yIGkgaW4gcmFuZ2UgMTAsMCwtMVxyXG5cdGZjIGkvMTAuMCwwLDBcclxuXHR4ID0gMTAqaVxyXG5cdHkgPSAxMCppXHJcblx0ciA9IDEwKmlcclxuXHRjaXJjbGUgeCx5LHJcclxuXCJcIlwiXHJcblxyXG5cdFx0XCJwZW50YSBsZXJwXCI6IFxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzoxMSBiZyBzYyBmYyBmb3IgaW4gcmFuZ2UgY2lyY2xlIGxlcnBcclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmJnIDAuNVxyXG5zYygpXHJcbmZvciBpIGluIHJhbmdlIDEwXHJcblx0Zm9yIGogaW4gcmFuZ2UgMTBcclxuXHRcdHIgPSBsZXJwIDAuMSwwLjIsaVxyXG5cdFx0ZyA9IGxlcnAgMC4xLDAuMixqXHJcblx0XHRmYyByLGcsMFxyXG5cdFx0eCA9IGxlcnAgMTAsMzAsaVxyXG5cdFx0eSA9IGxlcnAgMTAsMzAsalxyXG5cdFx0cmFkaXVzID0gbGVycCAxLDEuNSxpK2pcclxuXHRcdGNpcmNsZSB4LHkscmFkaXVzXHJcblwiXCJcIlxyXG5cclxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1x0XHJcblx0XCJMNTogbGluZSBmb3IgbGVycFwiIDpcclxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuXHRcdEhvcml6b250YWxMaW5lOiBcclxuXHRcdFx0YjogXCIjIExPQzoyIHNjIGxpbmVcXG5cIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuc2MgMSwwLDFcclxubGluZSAxMCw3MCwgMTkwLDcwXHJcblwiXCJcIlxyXG5cclxuXHRcdFZlcnRpY2FsTGluZTogXHJcblx0XHRcdGI6IFwiIyBMT0M6MyBzYyBzdyBsaW5lXFxuXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbnNjIDEsMSwwXHJcbnN3IDEwXHJcbmxpbmUgMTEwLDMwLCAxMTAsMTcwXHJcblwiXCJcIlxyXG5cclxuXHRcdExpbmU6IFxyXG5cdFx0XHRiOiBcIiMgTE9DOjIgc2MgbGluZVxcblwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5zYyAxLDEsMFxyXG5saW5lIDIwLDAsIDIwMCwyMFxyXG5cIlwiXCJcclxuXHJcblx0XHRHcmlkOiBcclxuXHRcdFx0YjpcIiMgTE9DOjUgc2Mgc3cgZm9yIGluIHJhbmdlIGxpbmUgXFxuXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuc2MgMSwxLDBcclxuc3cgMlxyXG5mb3IgaSBpbiByYW5nZSAxMCwyMDAsMTBcclxuXHRsaW5lIDEwLGksMTkwLGlcclxuXHRsaW5lIGksMTkwLGksMTBcclxuXCJcIlwiXHJcblxyXG5cdFx0U2tpc2xvcGU6XHJcblx0XHRcdGI6IFwiIyBMT0M6NCBiZyBzYyBmb3IgaW4gcmFuZ2UgbGVycCBsaW5lXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbmJnIDBcclxuc2MgMSwwLDBcclxuZm9yIGkgaW4gcmFuZ2UgMjFcclxuXHRsaW5lIGkqMTAsMCwyMDAsaSoxMFxyXG5cIlwiXCJcclxuXHJcblx0XHRTdW5zaGluZTpcclxuXHRcdFx0YjogXCIjIExPQzo1IGJnIHNjIGZvciBpbiByYW5nZSBsZXJwIGxpbmVcXG5cIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuYmcgMFxyXG5zYyAxLDEsMFxyXG5mb3IgaSBpbiByYW5nZSAxMFxyXG5cdGxpbmUgaSoyMCwwLDIwMC1pKjIwLDIwMFxyXG5cdGxpbmUgMCwyMCtpKjIwLDIwMCwxODAtaSoyMFxyXG5cIlwiXCJcclxuXHRcdFxyXG5cdFx0TGluZXM6ICBcclxuXHRcdFx0YjpcIiMgTE9DOjUgYmcgZm9yIGluIHJhbmdlIGxlcnAgbGluZSAoTm9lbCBXYXRzb24pXFxuXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuYmcgMFxyXG5mb3IgaSBpbiByYW5nZSAzN1xyXG5cdGxpbmUgMTAsMTAsMTkwLDEwK2kqNVxyXG5cdGxpbmUgMTAsMTAwLDE5MCwxMCtpKjVcclxuXHRsaW5lIDEwLDE5MCwxOTAsMTAraSo1XHJcblwiXCJcIlxyXG5cclxuXHRcdGNoZXNzUm93OiBcclxuXHRcdFx0YjpcIiMgTE9DOjUgJSBiZyBmYyBmb3IgaW4gcmFuZ2UgbGVycCByZWN0XFxuXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuYmcgMC41XHJcbmZvciBpIGluIHJhbmdlIDhcclxuXHRmYyBpJTJcclxuXHR4ID0gMjArMjAqaSBcclxuXHRyZWN0IHgsMjAsIDIwLDIwXHJcblwiXCJcIlxyXG5cdFx0XHJcblx0XHRjaGVzc0JvYXJkOiBcclxuXHRcdFx0YjpcIiMgTE9DOjcgYmcgZmMgZm9yIGluIHJhbmdlIGxlcnAgcmVjdFxcblwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmJnIDAuNVxyXG5mb3IgaSBpbiByYW5nZSA4XHJcblx0Zm9yIGogaW4gcmFuZ2UgOFxyXG5cdFx0ZmMgKGkraiklMlxyXG5cdFx0eCA9IDIwKzIwKmlcclxuXHRcdHkgPSAyMCsyMCpqXHJcblx0XHRyZWN0IHgseSwgMjAsMjBcclxuXCJcIlwiXHJcblx0XHRcclxuXHRcdGNoZXNzQ3Jvc3MgOiBcclxuXHRcdFx0YjogXCIjIExPQzo4IGZvciBpbiByYW5nZSBsZXJwIHJlY3QgaWYgdGhlbiBmYyAoRGF2aWQgTGFyc3NvbilcXG5cIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuZm9yIGkgaW4gcmFuZ2UgMTBcclxuXHRmb3IgaiBpbiByYW5nZSAxMFxyXG5cdFx0ZmMoKVxyXG5cdFx0aWYgaS1qIGluIFstMiwwLDJdIHRoZW4gZmMgMSwxLDBcclxuXHRcdGlmIGkraiBpbiBbNyw5LDExXSB0aGVuIGZjIDEsMCwwXHJcblx0XHR4ID0gMjAqaVxyXG5cdFx0eSA9IDIwKmpcclxuXHRcdHJlY3QgeCx5LCAyMCwyMFxyXG5cIlwiXCJcclxuXHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblx0XCJMNjogdHJpYW5nbGUgcXVhZCBhcmNcIiA6XHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcblx0XHRUcmlhbmdsZTogXHJcblx0XHRcdGI6XCIjIExPQzoyIGZjIHRyaWFuZ2xlXFxuXCIgXHJcblx0XHRcdGE6XCJcIlwiXHJcbmZjIDFcclxudHJpYW5nbGUgMjAsNDAsIDE2MCwxMDAsIDEwMCwxNDBcclxuXCJcIlwiXHJcblxyXG5cdFx0UXVhZDogXHJcblx0XHRcdGI6XCIjIExPQzoyIGZjIHF1YWRcXG5cIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5mYyAxLDEsMFxyXG5xdWFkIDE1MCwxMDAsIDE4MCwyMCwgNDAsMjAsIDEwMCwxNDBcclxuXCJcIlwiXHJcblxyXG5cdFx0UGFjTWFuOiBcclxuXHRcdFx0YjpcIiMgTE9DOjIgYXJjIGZjIHJhZGlhbnMgUElFXFxuXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZmMgMSwxLDBcclxuYXJjIDEwMCwxMDAsIDgwLDgwLCByYWRpYW5zKC0xMzUpLHJhZGlhbnMoMTM1KSwgUElFXHJcblwiXCJcIlxyXG5cclxuXHRcdFwiVHdvIEFyY3NcIjpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6NyBmYyBzYyBzdyBhcmMgcmFkaWFucyBzdHJva2VDYXBcclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmZjKClcclxuc2MgMSwwLDBcclxuc3cgMjBcclxuYXJjIDEwMCw3MCwgMTAwLDEwMCwgcmFkaWFucygtOTApLHJhZGlhbnMoOTApXHJcbnNjIDEsMSwwXHJcbnN0cm9rZUNhcCBTUVVBUkVcclxuYXJjIDEwMCwxMjAsIDEwMCwxMDAsIHJhZGlhbnMoOTApLHJhZGlhbnMoLTkwKVxyXG5cIlwiXCJcclxuXHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHRcIkw3OiB0cmFuc2xhdGUgcm90YXRlIHB1c2ggcG9wXCIgOiBcclxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuXHRcdHRleHRDOiBcclxuXHRcdFx0YjpcIiMgTE9DOjYgZmMgdGV4dCB0ZXh0QWxpZ24gdGV4dFNpemUgdHJhbnNsYXRlIHJkXFxuXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZmMgMSwxLDBcclxudGV4dFNpemUgMzJcclxudGV4dEFsaWduIENFTlRFUixDRU5URVJcclxudHJhbnNsYXRlIDEwMCwxMDBcclxucmQgOTBcclxudGV4dCAnQ29mZmVlc2NyaXB0JywwLDBcclxuXCJcIlwiXHJcblxyXG5cdFx0dGV4dEQ6IFxyXG5cdFx0XHRiOlwiIyBMT0M6NiBmYyB0ZXh0IHRleHRBbGlnbiB0ZXh0U2l6ZSB0cmFuc2xhdGUgcmRcXG5cIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5mYyAxLDEsMFxyXG50ZXh0U2l6ZSAzMlxyXG50ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG50cmFuc2xhdGUgMTAwLDEwMFxyXG5yZCAxODBcclxudGV4dCAnQ29mZmVlc2NyaXB0JywwLDBcclxuXCJcIlwiXHJcblx0XHRcclxuXHRcdHJvdGF0ZWRFbGxpcHNlOiBcclxuXHRcdFx0YjpcIiMgTE9DOjUgZWxsaXBzZSB0cmFuc2xhdGUgcmRcXG5cIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5mYyAxLDAsMFxyXG5zYygpXHJcbnRyYW5zbGF0ZSAxMDAsMTAwXHJcbnJkIDQ1XHJcbmVsbGlwc2UgMCwwLCA4MCw0MFxyXG5cIlwiXCJcclxuXHJcblx0XHRyb3RhdGVkUmVjdEE6IFxyXG5cdFx0XHRiOlwiIyBMT0M6NCBmYyByZWN0XFxuXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuZmMgMSwwLDBcclxucmVjdCA2MCwxMDAsIDQwLDQwXHJcbmZjIDAsMSwwXHJcbnJlY3QgMTQwLDEwMCwgNDAsNDBcclxuXCJcIlwiXHJcblxyXG5cdFx0cm90YXRlZFJlY3RCOiBcclxuXHRcdFx0YjpcIiMgTE9DOjEyIGZjIHJlY3QgdHJhbnNsYXRlIHJkIHB1c2ggcG9wXFxuXCJcclxuXHRcdFx0YTpcIlwiXCJcclxucHVzaCgpXHJcbmZjIDEsMCwwXHJcbnRyYW5zbGF0ZSA2MCwxMDBcclxucmQgNDVcclxucmVjdCAwLDAsIDQwLDQwXHJcbnBvcCgpXHJcbnB1c2goKVxyXG5mYyAwLDEsMFxyXG50cmFuc2xhdGUgMTQwLDEwMFxyXG5yZCA0NVxyXG5yZWN0IDAsMCwgNDAsNDBcclxucG9wKClcclxuXCJcIlwiXHJcblxyXG5cdFx0cm90YXRlZFJlY3RDOiBcclxuXHRcdFx0YjpcIiMgTE9DOjEzIGZjIHJlY3QgdHJhbnNsYXRlIHJkIHB1c2ggcG9wXFxuXCJcclxuXHRcdFx0YTpcIlwiXCJcclxucmVjdE1vZGUgQ0VOVEVSXHJcbnB1c2goKVxyXG5mYyAxLDAsMFxyXG50cmFuc2xhdGUgODAsMTIwXHJcbnJkIDQ1XHJcbnJlY3QgMCwwLCA0MCw0MFxyXG5wb3AoKVxyXG5wdXNoKClcclxuZmMgMCwxLDBcclxudHJhbnNsYXRlIDE2MCwxMjBcclxucmQgNDVcclxucmVjdCAwLDAsIDQwLDQwXHJcbnBvcCgpXHJcblwiXCJcIlxyXG5cclxuXHRcdGNhcmRzOiBcclxuXHRcdFx0YjpcIiMgTE9DOjEwIGZjIHNjIGNpcmNsZSByZWN0IHJlY3RNb2RlIGZvciBpbiByYW5nZSBsZXJwIHRyYW5zbGF0ZSByZFxcblwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbnJlY3RNb2RlIENFTlRFUlxyXG5zYyAxXHJcbnRyYW5zbGF0ZSAxMDAsMTAwXHJcbmZvciBpIGluIHJhbmdlIDE4LC0xLC0xXHJcbiAgciA9IDEuMCppLzE4XHJcbiAgZmMgciwwLDBcclxuICB3ID0gNzArNSppXHJcbiAgaCA9IDcwKzUqaVxyXG4gIHJlY3QgMCwwLCB3LGhcclxuICByZCA1XHJcblwiXCJcIiBcclxuXHJcblx0XHRcIlNub3cgV2hpdGUgYW5kIHRoZSA3IGxlcnBzXCI6IFxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzoxNyBiZyBmYyBzYyByZWN0IHJlY3RNb2RlIGZvciBpbiByYW5nZSBsZXJwIHRyYW5zbGF0ZSByZCBwdXNoIHBvcFxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuYmcgMVxyXG5yZWN0TW9kZSBDRU5URVJcclxuc2MoKVxyXG5mb3IgaSBpbiByYW5nZSAxMFxyXG4gIGZvciBqIGluIHJhbmdlIDEwXHJcbiAgICBwdXNoKClcclxuXHRcdHggPSBsZXJwIDEwLDMwLGlcclxuXHRcdHkgPSBsZXJwIDEwLDMwLGpcclxuICAgIHRyYW5zbGF0ZSB4LHlcclxuICAgIHJkIGxlcnAgMCwxMCxpLWpcclxuICAgIHIgPSBsZXJwIDAuMSwwLjIsaVxyXG4gICAgZyA9IGxlcnAgMC4xLDAuMixqXHJcbiAgICBmYyByLGcsMFxyXG5cdFx0dyA9IGxlcnAgNSw2LGlcclxuXHRcdGggPSBsZXJwIDUsNixqXHJcbiAgICByZWN0IDAsMCwgdyxoXHJcbiAgICBwb3AoKVxyXG5cIlwiXCIgXHJcblxyXG5cdFx0Um91bGV0dGU6XHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjIwIGJnIHN3IGZjIHNjIGZvciBpbiByYW5nZSBpZiB0aGVuIGVsc2UgPT0gJSAvIFtdIFwiXCIgdGV4dCB0ZXh0QWxpZ24gYXJjIHN0cm9rZUNhcCB0cmFuc2xhdGUgcm90YXRlIHJkIFRXT19QSSBwdXNoIHBvcCBcclxuXHJcbm51bWJlcnMgPSBbMCwzMiwxNSwxOSw0LDIxLDIsMjUsMTcsMzQsNiwyNywxMywzNiwxMSwzMCw4LDIzLDEwLDUsMjQsMTYsMzMsMSwyMCwxNCwzMSw5LDIyLDE4LDI5LDcsMjgsMTIsMzUsMywyNl1cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbm51bWJlcnMgPSBbMCwzMiwxNSwxOSw0LDIxLDIsMjUsMTcsMzQsNiwyNywxMywzNiwxMSwzMCw4LDIzLDEwLDUsMjQsMTYsMzMsMSwyMCwxNCwzMSw5LDIyLDE4LDI5LDcsMjgsMTIsMzUsMywyNl1cclxuYmcgMC41XHJcbnRyYW5zbGF0ZSAxMDAsMTAwXHJcbnJkIC05MFxyXG5kID0gUEkvbnVtYmVycy5sZW5ndGhcclxuc3cgMjBcclxuc3Ryb2tlQ2FwIFNRVUFSRVxyXG50ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5mb3IgaSBpbiByYW5nZSBudW1iZXJzLmxlbmd0aFxyXG5cdHB1c2goKVxyXG5cdGZjKClcclxuXHRpZiBpPT0wIHRoZW4gc2MgMCwxLDAgZWxzZSBzYyBpJTIsMCwwXHJcblx0YXJjIDAsMCwxODAsMTgwLC1kLGRcclxuXHR0cmFuc2xhdGUgOTAsMFxyXG5cdHJkIDkwXHJcblx0c2MoKVxyXG5cdGZjIDFcclxuXHR0ZXh0IG51bWJlcnNbaV0sMCwwXHJcblx0cG9wKClcclxuXHRyb3RhdGUgVFdPX1BJIC8gbnVtYmVycy5sZW5ndGhcclxuXCJcIlwiXHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblx0XCJMODogZnVuY3Rpb24sIGNsYXNzXCIgOiBcclxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuXHRcdG1hbnlEaWNlczogXHJcblx0XHRcdGIgOiBcIlwiXCJcclxuIyBMT0M6MjAgLT4gZmMgZm9yIGluIGlmIHRoZW4gcG9pbnQgW10gJSAtPiA9PVxyXG5cclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmRvdHMgPSAoeCx5LGRvdHMpIC0+XHJcblx0Zm9yIGRvdCBpbiBkb3RzXHJcblx0XHRpZiBkb3Q9PTEgdGhlbiBwb2ludCB4KzgseSs4XHJcblx0XHRpZiBkb3Q9PTIgdGhlbiBwb2ludCB4KzgseSsxMFxyXG5cdFx0aWYgZG90PT0zIHRoZW4gcG9pbnQgeCs4LHkrMTJcclxuXHRcdGlmIGRvdD09NCB0aGVuIHBvaW50IHgrMTAseSsxMFxyXG5cdFx0aWYgZG90PT01IHRoZW4gcG9pbnQgeCsxMix5KzhcclxuXHRcdGlmIGRvdD09NiB0aGVuIHBvaW50IHgrMTIseSsxMFxyXG5cdFx0aWYgZG90PT03IHRoZW4gcG9pbnQgeCsxMix5KzEyXHJcbmRpY2UgPSAoeCx5LGQpIC0+XHJcblx0aWYgZD09MSB0aGVuIGRvdHMgeCx5LFs0XVxyXG5cdGlmIGQ9PTIgdGhlbiBkb3RzIHgseSxbMSw3XVxyXG5cdGlmIGQ9PTMgdGhlbiBkb3RzIHgseSxbMSw0LDddXHJcblx0aWYgZD09NCB0aGVuIGRvdHMgeCx5LFsxLDMsNSw3XVxyXG5cdGlmIGQ9PTUgdGhlbiBkb3RzIHgseSxbMSwzLDQsNSw3XVxyXG5cdGlmIGQ9PTYgdGhlbiBkb3RzIHgseSxbMSwyLDMsNSw2LDddXHJcblxyXG5mYyAwXHJcbmZvciBpIGluIHJhbmdlIDEwXHJcblx0Zm9yIGogaW4gcmFuZ2UgMTBcclxuXHRcdGRpY2UgMjAqaSwyMCpqLDErKGkraiklNlxyXG5cIlwiXCJcclxuXHRcdFxyXG5cclxuXHRcdGdpcmxhbmcgOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzogMTYgc2MgYmcgc3cgZm9yIGluIHJhbmdlIGxpbmUgY2xhc3MgY29uc3RydWN0b3IgbmV3IEBcclxuXHJcbmNsYXNzIENhcnRlc2l1c1xyXG5cdGNvbnN0cnVjdG9yIDogKEByLEBnLEBiLCBAeCxAeSkgLT5cclxuXHRnbyA6IChkeCxkeSkgLT5cclxuXHJcbmdpcmxhbmcgPSAoeCx5LG4sd2lkdGgsZHgsZHkpIC0+XHJcblxyXG5naXJsYW5nIDAsMCw5LDUsMjAsMjBcclxuXCJcIlwiXHRcdFxyXG5cdFx0XHRhOlwiXCJcIlxyXG5jbGFzcyBDYXJ0ZXNpdXNcclxuXHRjb25zdHJ1Y3RvciA6IChAcixAZyxAYiwgQHgsQHkpIC0+XHJcblx0Z28gOiAoZHgsZHkpIC0+XHJcblx0XHRzYyBAcixAZyxAYlxyXG5cdFx0bGluZSBAeCxAeSxAeCtkeCxAeStkeVxyXG5cdFx0W0B4LEB5XSA9IFtAeCtkeCxAeStkeV1cclxuXHJcbmdpcmxhbmcgPSAoeCx5LG4sd2lkdGgsZHgsZHkpIC0+XHJcblx0YSA9IG5ldyBDYXJ0ZXNpdXMgMSwwLDAsIHgrZHgvMiwwXHJcblx0YiA9IG5ldyBDYXJ0ZXNpdXMgMSwxLDAsIHgseStkeS8yXHJcblxyXG5cdGJnIDBcclxuXHRzdyB3aWR0aFxyXG5cclxuXHRmb3IgaSBpbiByYW5nZSBuXHJcblx0XHRhLmdvIDAsZHlcclxuXHRcdGIuZ28gZHgsMFxyXG5cdFx0Yi5nbyAwLGR5XHJcblx0XHRhLmdvIGR4LDBcclxuXHJcbmdpcmxhbmcgMCwwLDksNSwyMCwyMFx0XHRcdFxyXG5cIlwiXCJcclxuXHJcblx0XHRicmFpZDpcclxuXHRcdFx0YiA6IFwiXCJcIlxyXG4jIExPQzogMTkgc2MgYmcgc3cgZm9yIGluIHJhbmdlIGxpbmUgY2xhc3MgY29uc3RydWN0b3IgbmV3IEBcclxuXHJcbmNsYXNzIENhcnRlc2l1c1xyXG5cdGNvbnN0cnVjdG9yIDogKEByLEBnLEBiLCBAeCxAeSkgLT5cclxuXHRnbyA6IChkeCxkeSkgLT5cclxuXHJcbmJyYWlkID0gKG4sZHgsZHksd2lkdGgpIC0+XHRcclxuXHJcbmJyYWlkIDUsMTgsMTgsNlxyXG5cIlwiXCJcclxuXHJcblx0XHRcdGE6XCJcIlwiXHJcbmNsYXNzIENhcnRlc2l1c1xyXG5cdGNvbnN0cnVjdG9yIDogKEByLEBnLEBiLCBAeCxAeSkgLT5cclxuXHRnbyA6IChkeCxkeSkgLT5cclxuXHRcdHNjIEByLEBnLEBiXHJcblx0XHRsaW5lIEB4LEB5LEB4K2R4LEB5K2R5XHJcblx0XHRbQHgsQHldID0gW0B4K2R4LEB5K2R5XVxyXG5cclxuYnJhaWQgPSAobixkeCxkeSx3aWR0aCkgLT5cdFx0XHJcblxyXG5cdGEgPSBuZXcgQ2FydGVzaXVzIDEsMCwwLCAxMDAtZHgvMixkeS8zXHJcblx0YiA9IG5ldyBDYXJ0ZXNpdXMgMSwxLDAsIDEwMCtkeC8yLDIqZHkvM1xyXG5cdGMgPSBuZXcgQ2FydGVzaXVzIDAsMSwwLCAxMDAtZHgvMixkeVxyXG5cclxuXHRiZyAwXHJcblx0c3cgd2lkdGhcclxuXHJcblx0Zm9yIGkgaW4gcmFuZ2UgblxyXG5cdFx0YS5nbyBkeCxkeVxyXG5cdFx0Yi5nbyAtZHgsZHlcclxuXHRcdGMuZ28gZHgsZHlcclxuXHJcblx0XHRhLmdvIC1keCxkeVxyXG5cdFx0Yi5nbyBkeCxkeVxyXG5cdFx0Yy5nbyAtZHgsZHlcclxuXHJcbmJyYWlkIDUsMTgsMTgsNlxyXG5cIlwiXCJcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRicmFpZCA6IFwiaHR0cHM6Ly9jZG4udHV0c3BsdXMuY29tL3ZlY3Rvci91cGxvYWRzL2xlZ2FjeS90dXRzLzAwMC0yMDExLzM5OC1oYWlyLWJyYWlkLzYuanBnXCJcclxuXHJcblx0XHRPbHltcGljUmluZ3M6XHJcblx0XHRcdGI6IFwiXCJcIlxyXG5cdFx0XHQjIExPQzoyNCBzYyBiZyBmYyBzdyBhcmMgc3Ryb2tlQ2FwIGNsYXNzIGNvbnN0cnVjdG9yIG5ldyBAXHJcblxyXG5cdFx0XHRjbGFzcyBSaW5nXHJcblx0XHRcdFx0Y29uc3RydWN0b3IgOiAoQHgsQHksQHIsQGcsQGIpIC0+XHJcblx0XHRcdFx0ZHJhdyA6IChzdGFydD0zLHN0b3BwPTMsaG91cj1QSS82KSAtPlxyXG5cclxuXHRcdFx0b2x5bXBpYyA9ICh4PTEwMCx5PTEwMCxyYWRpdXM9NTAsZD02MCx3PTEwKSAtPlxyXG5cclxuXHRcdFx0b2x5bXBpYygpXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuY2xhc3MgUmluZ1xyXG5cdGNvbnN0cnVjdG9yIDogKEB4LEB5LEByYWRpdXMsIEByLEBnLEBiKSAtPlxyXG5cdGRyYXcgOiAoc3RhcnQ9MyxzdG9wcD0zLGhvdXI9UEkvNikgLT5cclxuXHRcdHNjIEByLEBnLEBiXHJcblx0XHRhcmMgQHgsQHksQHJhZGl1cyxAcmFkaXVzLChzdGFydC0zKSpob3VyLChzdG9wcC0zKSpob3VyXHJcblx0XHRcclxub2x5bXBpYyA9ICh4PTEwMCx5PTEwMCxyYWRpdXM9NTAsZD02MCx3PTEwKSAtPlxyXG5cdHIxID0gbmV3IFJpbmcgeC1kLCAgeSwgICAgIHJhZGl1cywgMCwwLDFcclxuXHRyMiA9IG5ldyBSaW5nIHgsICAgIHksICAgICByYWRpdXMsIDAsMCwwXHJcblx0cjMgPSBuZXcgUmluZyB4K2QsICB5LCAgICAgcmFkaXVzLCAxLDAsMFxyXG5cdHI0ID0gbmV3IFJpbmcgeC1kLzIseStkLzMsIHJhZGl1cywgMSwxLDBcclxuXHRyNSA9IG5ldyBSaW5nIHgrZC8yLHkrZC8zLCByYWRpdXMsIDAsMSwwXHJcblxyXG5cdHN0cm9rZUNhcCBTUVVBUkVcclxuXHRiZyAwLjVcclxuXHRmYygpXHJcblx0c3cgd1xyXG5cclxuXHRyMS5kcmF3KClcclxuXHRyMy5kcmF3KClcclxuXHRyNC5kcmF3KClcclxuXHRyNS5kcmF3KClcclxuXHRyMS5kcmF3IDIsNFxyXG5cdHIyLmRyYXcoKVxyXG5cdHI0LmRyYXcgMTIsMlxyXG5cdHI1LmRyYXcgOCwxMFxyXG5cdHIzLmRyYXcgNiw4XHJcblxyXG5vbHltcGljKClcdFx0XHRcclxuXCJcIlwiXHRcclxuXHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHRcIkw5OiBpbnRlcmFjdGl2aXR5LCBiYXNpY1wiIDogXHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcclxuXHJcblx0XHRjb3VudGVyIDpcclxuXHRcdFx0YjpcIlwiXCJcdFx0XHJcbiMgTE9DOjggdGV4dCB0ZXh0QWxpZ24gdGV4dFNpemUgKyAtIGNsYXNzIGV4dGVuZHMgY29uc3RydWN0b3IgbmV3IEAgc3VwZXIgLT5cclxuXHJcbmNsYXNzIENvdW50ZXIgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHRyZXNldCA6IC0+XHJcblx0dXAgOiAtPiBcclxuXHRkb3duIDogLT4gXHJcblx0ZHJhdyA6IC0+XHJcblxyXG5jb3VudGVyID0gbmV3IENvdW50ZXIgXCJiXCIgICAgIFxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuY2xhc3MgQ291bnRlciBleHRlbmRzIExvY2FsU3RvcmFnZVxyXG5cdHJlc2V0IDogLT4gQGNvdW50ZXIgPSAwXHJcblx0dXAgOiAtPiBAY291bnRlciArPSAxXHJcblx0ZG93biA6IC0+IEBjb3VudGVyIC09IDFcclxuXHRkcmF3IDogLT5cclxuXHRcdGJnIDAuNVxyXG5cdFx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRcdHRleHRTaXplIDEwMFxyXG5cdFx0ZmMgMSwxLDBcclxuXHRcdHRleHQgQGNvdW50ZXIsMTAwLDEwMFxyXG5cclxuY291bnRlciA9IG5ldyBDb3VudGVyIFwiYVwiICAgXHRcdFxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRjb3VudGVyIDogXCJyZXNldCgpfHVwKCl8ZG93bigpXCJcclxuXHJcblx0XHRzcXVhcmUgOiBcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjIwIC0+IGJnIHN3IGZjIHJlY3QgcmVjdE1vZGUgdHJhbnNsYXRlIHJkICsgY2xhc3MgZXh0ZW5kcyBjb25zdHJ1Y3RvciBuZXcgQCBzdXBlciAtPlxyXG5cclxuY2xhc3MgU3F1YXJlIGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblx0cmVzZXQgOiAtPlxyXG5cdGRyYXcgOiAtPlxyXG5cdGhvcmlzb250ZWxsdCA6IChkKSAtPiBcclxuXHR2ZXJ0aWthbHQgOiAoZCkgLT5cclxuXHRzdG9ybGVrIDogKGQpIC0+IFxyXG5cdHRqb2NrbGVrIDogKGQpIC0+IFxyXG5cdHJvdGVyYSA6IChkKSAtPlxyXG5cclxuc3F1YXJlID0gbmV3IFNxdWFyZSBcImJcIlxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbmNsYXNzIFNxdWFyZSBleHRlbmRzIExvY2FsU3RvcmFnZVxyXG5cdHJlc2V0IDogLT5cclxuXHRcdEB4ID0gMTAwXHJcblx0XHRAeSA9IDEwMFxyXG5cdFx0QHNpemUgPSAxMDBcclxuXHRcdEB3ID0gMVxyXG5cdFx0QGRpciA9IDBcclxuXHRkcmF3IDogLT5cclxuXHRcdGJnIDBcclxuXHRcdHJlY3RNb2RlIENFTlRFUlxyXG5cdFx0c3cgQHdcclxuXHRcdGZjIDAuNVxyXG5cdFx0dHJhbnNsYXRlIEB4LEB5XHJcblx0XHRyZCBAZGlyIFxyXG5cdFx0cmVjdCAwLDAsQHNpemUsQHNpemVcclxuXHJcblx0aG9yaXNvbnRlbGx0IDogKGQpIC0+IEB4ICs9IGRcclxuXHR2ZXJ0aWthbHQgOiAoZCkgLT4gQHkgKz0gZFxyXG5cdHN0b3JsZWsgOiAoZCkgLT4gQHNpemUgKz0gZFxyXG5cdHRqb2NrbGVrIDogKGQpIC0+IEB3ICs9IGRcclxuXHRyb3RlcmEgOiAoZCkgLT4gQGRpciArPSBkIFxyXG5cclxuc3F1YXJlID0gbmV3IFNxdWFyZSBcImFcIlxyXG5cIlwiXCJcclxuXHRcdFx0YzogXHJcblx0XHRcdFx0c3F1YXJlIDogXCJyZXNldCgpfGhvcmlzb250ZWxsdCAtMXxob3Jpc29udGVsbHQgKzF8dmVydGlrYWx0IC0xfHZlcnRpa2FsdCArMXxzdG9ybGVrIC0xfHN0b3JsZWsgKzF8dGpvY2tsZWsgLTF8dGpvY2tsZWsgMXxyb3RlcmEgLTF8cm90ZXJhICsxXCIgICBcclxuXHJcblx0XHRzZXZlblNlZ21lbnQgOlxyXG5cdFx0XHRiIDogXCJcIlwiXHJcbiMgTE9DOjI2IGJnIHNjIGZjIHJlY3QgcmVjdE1vZGUgaWYgdGhlbiAmIFtdIGNsYXNzIGV4dGVuZHMgY29uc3RydWN0b3IgbmV3IEAgc3VwZXIgLT5cclxuXHJcbmNsYXNzIERpZ2l0IGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblx0cmVzZXQgOiAtPiBcclxuXHRkcmF3IDogLT5cclxuXHR1cCA6IC0+IFxyXG5cdGRvd24gOiAtPiBcclxuXHJcbmRpZ2l0ID0gbmV3IERpZ2l0IFwiYlwiXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5jbGFzcyBEaWdpdCBleHRlbmRzIExvY2FsU3RvcmFnZVxyXG5cdHJlc2V0IDogLT5cclxuXHRcdEBkPTBcclxuXHRcdEB4PTEwMFxyXG5cdFx0QHk9MTAwXHJcblx0XHRAdz04MFxyXG5cdFx0QGg9MThcclxuXHRkcmF3IDogLT5cclxuXHRcdGJnIDAuNVxyXG5cdFx0c2MoKVxyXG5cdFx0ZmMgMSwwLDBcclxuXHRcdHJlY3RNb2RlIENFTlRFUlxyXG5cdFx0cGF0dGVybiA9IFs2Myw2LDkxLDc5LDEwMiwxMDksMTI1LDcsMTI3LDExMV1cclxuXHRcdHAgPSBwYXR0ZXJuW0BkXVxyXG5cdFx0dzAgPSBAdy0yMFxyXG5cdFx0aWYgcCAmIDEgdGhlbiBmYyAxLDAsMCBlbHNlIGZjIDAuMywwLDBcclxuXHRcdHJlY3QgQHgsQHktQHcsdzAsQGggXHJcblx0XHRpZiBwICYgMiB0aGVuIGZjIDEsMCwwIGVsc2UgZmMgMC4zLDAsMFxyXG5cdFx0cmVjdCBAeCtAdy8yLEB5LUB3LzIsQGgsdzAgXHJcblx0XHRpZiBwICYgNCB0aGVuIGZjIDEsMCwwIGVsc2UgZmMgMC4zLDAsMFxyXG5cdFx0cmVjdCBAeCtAdy8yLEB5K0B3LzIsQGgsdzAgXHJcblx0XHRpZiBwICYgOCB0aGVuIGZjIDEsMCwwIGVsc2UgZmMgMC4zLDAsMFxyXG5cdFx0cmVjdCBAeCxAeStAdyx3MCxAaCBcclxuXHRcdGlmIHAgJiAxNiB0aGVuIGZjIDEsMCwwIGVsc2UgZmMgMC4zLDAsMFxyXG5cdFx0cmVjdCBAeC1Ady8yLEB5K0B3LzIsQGgsdzBcclxuXHRcdGlmIHAgJiAzMiB0aGVuIGZjIDEsMCwwIGVsc2UgZmMgMC4zLDAsMFxyXG5cdFx0cmVjdCBAeC1Ady8yLEB5LUB3LzIsQGgsdzAgXHJcblx0XHRpZiBwICYgNjQgdGhlbiBmYyAxLDAsMCBlbHNlIGZjIDAuMywwLDBcclxuXHRcdHJlY3QgQHgsQHksdzAsQGggXHJcblx0dXAgOiAtPiBAZCsrXHJcblx0ZG93biA6IC0+IEBkLS1cclxuXHJcbmRpZ2l0ID0gbmV3IERpZ2l0IFwiYVwiXHJcblwiXCJcIlxyXG5cdFx0XHRjOiBcclxuXHRcdFx0XHRkaWdpdCA6IFwicmVzZXQoKXx1cCgpfGRvd24oKVwiXHJcblxyXG5cdFx0QnJhaWRlcjpcclxuXHRcdFx0YiA6IFwiXCJcIlxyXG4jIExPQzogNjEgc2MgYmcgc3cgZm9yIGluIHJhbmdlIGlmIHRoZW4gKyBsaW5lIGNsYXNzIGNvbnN0cnVjdG9yIGV4dGVuZHMgbmV3IEBcclxuXHJcbmNsYXNzIEJyYWlkZXIgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHRicmFpZDIgOiAtPlxyXG5cdGJyYWlkMyA6IC0+XHJcblx0YnJhaWQ0IDogLT5cclxuXHRkcmF3IDogLT5cclxuXHRmb3J3YXJkIDogLT5cclxuXHRiYWNrIDogLT5cclxuXHJcbmJyYWlkZXIgPSBuZXcgQnJhaWRlciBcImJcIlxyXG5cIlwiXCJcclxuXHJcblx0XHRcdGE6XCJcIlwiXHJcbmNsYXNzIENhcnRlc2l1c1xyXG5cdGNvbnN0cnVjdG9yIDogKEB4LEB5LEBjKSAtPlxyXG5cdGdvIDogKGR4LGR5KSAtPlxyXG5cdFx0c2NjIEBjIFxyXG5cdFx0bGluZSBAeCxAeSxAeCtkeCxAeStkeVxyXG5cdFx0W0B4LEB5XSA9IFtAeCtkeCxAeStkeV1cclxuXHRkb3duIDogKGQpIC0+IEBnbyAwLGRcclxuXHRsZWZ0IDogKGQpIC0+IEBnbyAtZCwwXHJcblxyXG5jbGFzcyBCcmFpZGVyIGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblxyXG5cdGJyYWlkMiA6IC0+XHJcblx0XHRAdHlwZSA9IDJcclxuXHRcdEBuID0gMFxyXG5cdGJyYWlkMyA6IC0+XHJcblx0XHRAdHlwZSA9IDNcclxuXHRcdEBuID0gMFxyXG5cdGJyYWlkNCA6IC0+XHJcblx0XHRAdHlwZSA9IDRcclxuXHRcdEBuID0gMFxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0aWYgQHR5cGU9PTJcclxuXHRcdFx0c3cgNVxyXG5cdFx0XHRhID0gbmV3IENhcnRlc2l1cyAyMDAsMjAsIDEgIyByw7ZkXHJcblx0XHRcdGIgPSBuZXcgQ2FydGVzaXVzIDE5MCwxMCwgMiAjIGdyw7ZuXHJcblx0XHRcdGZvciBpIGluIHJhbmdlIEBuXHJcblx0XHRcdFx0aWYgaSU0ID09IDAgdGhlbiBiLmRvd24gMjBcclxuXHRcdFx0XHRpZiBpJTQgPT0gMSB0aGVuIGEubGVmdCAyMFxyXG5cdFx0XHRcdGlmIGklNCA9PSAyIHRoZW4gYS5kb3duIDIwXHJcblx0XHRcdFx0aWYgaSU0ID09IDMgdGhlbiBiLmxlZnQgMjBcclxuXHRcdGlmIEB0eXBlPT0zXHJcblx0XHRcdHN3IDVcclxuXHRcdFx0YSA9IG5ldyBDYXJ0ZXNpdXMgMjAwLDMwLCAxXHJcblx0XHRcdGIgPSBuZXcgQ2FydGVzaXVzIDE5MCwxMCwgMlxyXG5cdFx0XHRjID0gbmV3IENhcnRlc2l1cyAxODAsMjAsIDNcclxuXHRcdFx0Zm9yIGkgaW4gcmFuZ2UgQG5cclxuXHRcdFx0XHRpZiBpJTYgPT0gMCB0aGVuIGIuZG93biAzMFxyXG5cdFx0XHRcdGlmIGklNiA9PSAxIHRoZW4gYS5sZWZ0IDMwXHJcblx0XHRcdFx0aWYgaSU2ID09IDIgdGhlbiBjLmRvd24gMzBcclxuXHRcdFx0XHRpZiBpJTYgPT0gMyB0aGVuIGIubGVmdCAzMFxyXG5cdFx0XHRcdGlmIGklNiA9PSA0IHRoZW4gYS5kb3duIDMwXHJcblx0XHRcdFx0aWYgaSU2ID09IDUgdGhlbiBjLmxlZnQgMzBcclxuXHRcdGlmIEB0eXBlPT00XHJcblx0XHRcdHN3IDEwXHJcblx0XHRcdGEgPSBuZXcgQ2FydGVzaXVzIDE1MCw0MCwgMSAjIHLDtmRcclxuXHRcdFx0YiA9IG5ldyBDYXJ0ZXNpdXMgMTcwLDIwLCAyICMgZ3LDtm5cclxuXHRcdFx0YyA9IG5ldyBDYXJ0ZXNpdXMgMTYwLDMwLCAzICMgZ3VsXHJcblx0XHRcdGQgPSBuZXcgQ2FydGVzaXVzIDE5MCw1MCwgNCAjIGJsw6VcclxuXHRcdFx0Zm9yIGkgaW4gcmFuZ2UgQG5cclxuXHRcdFx0XHRpZiBpJTEyID09IDAgdGhlbiBiLmRvd24gNTBcclxuXHRcdFx0XHRpZiBpJTEyID09IDEgdGhlbiBjLmxlZnQgMzA7IGMuZG93biAzMFxyXG5cdFx0XHRcdGlmIGklMTIgPT0gMiB0aGVuIGQubGVmdCA1MFxyXG5cdFx0XHRcdGlmIGklMTIgPT0gMyB0aGVuIGEuZG93biA1MFxyXG5cdFx0XHRcdGlmIGklMTIgPT0gNCB0aGVuIGIubGVmdCA1MFxyXG5cdFx0XHRcdGlmIGklMTIgPT0gNSB0aGVuIGMuZG93biA1MFxyXG5cdFx0XHRcdGlmIGklMTIgPT0gNiB0aGVuIGQubGVmdCAzMDsgZC5kb3duIDMwXHJcblx0XHRcdFx0aWYgaSUxMiA9PSA3IHRoZW4gYS5sZWZ0IDUwXHJcblx0XHRcdFx0aWYgaSUxMiA9PSA4IHRoZW4gYi5sZWZ0IDMwOyBiLmRvd24gMzBcclxuXHRcdFx0XHRpZiBpJTEyID09IDkgdGhlbiBkLmRvd24gNTBcclxuXHRcdFx0XHRpZiBpJTEyID09IDEwIHRoZW4gYy5sZWZ0IDUwXHJcblx0XHRcdFx0aWYgaSUxMiA9PSAxMSB0aGVuIGEubGVmdCAzMDsgYS5kb3duIDMwXHJcblxyXG5cdGZvcndhcmQgOiAtPiBAbisrXHJcblx0YmFjayA6IC0+IEBuLS1cclxuXHJcbmJyYWlkZXIgPSBuZXcgQnJhaWRlciBcImFcIlxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRicmFpZGVyIDogXCJicmFpZDIoKXxicmFpZDMoKXxicmFpZDQoKXxmb3J3YXJkKCl8YmFjaygpXCJcclxuXHJcblx0XHRcdGU6XHJcblx0XHRcdFx0YnJhaWQgOiBcImh0dHBzOi8vY2RuLnR1dHNwbHVzLmNvbS92ZWN0b3IvdXBsb2Fkcy9sZWdhY3kvdHV0cy8wMDAtMjAxMS8zOTgtaGFpci1icmFpZC82LmpwZ1wiXHJcblxyXG5cdFx0Qm91bmNpbmdCYWxscyA6XHJcblx0XHRcdGIgOiBcIlwiXCJcclxuIyBMT0M6IDQzICsgKysgLSAtLSAlJSA9PSBwdXNoIGlmIHRoZW4gZm9yIGluIHNwbGljZSBsZW5ndGggY2lyY2xlIGZjIHN3IHNjIF8uY3JlYXRlIGNsYXNzIGNvbnN0cnVjdG9yIHN1cGVyIGV4dGVuZHMgbmV3IEBcclxuXHJcbmNsYXNzIEJhbGwgXHJcblx0Y29uc3RydWN0b3IgOiAtPlxyXG5cdHVwZGF0ZSA6IChncmF2KSAtPlxyXG5cdHJlbmRlciA6IChzZWwpIC0+XHJcblxyXG5jbGFzcyBCb3VuY2luZ0JhbGxzIGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblxyXG5cdGNvbnN0cnVjdG9yIDogKEBuYW1lKSAtPlxyXG5cdFx0c3VwZXIgQG5hbWVcclxuXHRcdGlmIEBiYWxscyB0aGVuIEBiYWxscyA9IChfLmNyZWF0ZSBCYWxsLnByb3RvdHlwZSwgYmFsbCBmb3IgYmFsbCBpbiBAYmFsbHMpXHJcblxyXG5cdHJlc2V0IDogLT4gc3VwZXJcclxuXHRkcmF3IDogLT5cclxuXHR1cGRhdGUgOiAtPiBcclxuXHRhZGQgOiAtPiBcclxuXHRkZWxldGUgOi0+XHJcblx0c2VsTmV4dCA6IC0+IFxyXG5cdHNlbFByZXYgOiAtPiBcclxuXHRncm93IDogLT4gICAgXHJcblx0c2hyaW5rIDogLT4gIFxyXG5cdG5leHRDb2wgOiAtPiBcclxuXHRwcmV2Q29sIDogLT4gXHJcblx0Z3Jhdml0eSA6IC0+XHJcblxyXG5ib3VuY2luZ0JhbGxzID0gbmV3IEJvdW5jaW5nQmFsbHMgXCJiXCJcclxuXCJcIlwiXHJcblxyXG5cdFx0XHRhOlwiXCJcIlxyXG5jbGFzcyBCYWxsIFxyXG5cdGNvbnN0cnVjdG9yIDogLT5cclxuXHRcdEB4ID0gMTAwXHJcblx0XHRAeSA9IDEwMFxyXG5cdFx0QHIgPSAxMFxyXG5cdFx0QGMgPSAxXHJcblx0XHRAZHggPSAzXHJcblx0XHRAZHkgPSA0XHJcblx0dXBkYXRlIDogKGdyYXYpIC0+XHJcblx0XHRAeCArPSBAZHhcclxuXHRcdEB5ICs9IEBkeVxyXG5cdFx0aWYgbm90IChAciA8IEB4IDwgMjAwLUByKSB0aGVuIEBkeCA9IC0gQGR4XHJcblx0XHRpZiBub3QgKEByIDwgQHkgPCAyMDAtQHIpIHRoZW4gQGR5ID0gLSBAZHlcclxuXHRcdGlmIGdyYXYgYW5kIEB5IDwgMjAwLUByIHRoZW4gQGR5ICs9IDEgXHJcblx0cmVuZGVyIDogKHNlbCkgLT5cclxuXHRcdGZjYyBAY1xyXG5cdFx0c3cgMlxyXG5cdFx0aWYgc2VsIHRoZW4gc2NjIDcgZWxzZSBzYygpXHJcblx0XHRjaXJjbGUgQHgsQHksQHJcclxuXHJcbmNsYXNzIEJvdW5jaW5nQmFsbHMgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHJcblx0Y29uc3RydWN0b3IgOiAoQG5hbWUpIC0+XHJcblx0XHRzdXBlciBAbmFtZVxyXG5cdFx0aWYgQGJhbGxzIHRoZW4gQGJhbGxzID0gKF8uY3JlYXRlIEJhbGwucHJvdG90eXBlLCBiYWxsIGZvciBiYWxsIGluIEBiYWxscylcclxuXHJcblx0cmVzZXQgOiAtPlxyXG5cdFx0c3VwZXJcclxuXHRcdEBiYWxscyA9IFtdXHJcblx0XHRAc2VsID0gLTFcclxuXHRcdEBncmF2ID0gZmFsc2VcclxuXHRkcmF3IDogLT5cclxuXHRcdGZvciBiYWxsLGkgaW4gQGJhbGxzXHJcblx0XHRcdGJhbGwucmVuZGVyIGk9PUBzZWwsIEBncmF2XHJcblx0dXBkYXRlIDogLT4gXHJcblx0XHRmb3IgYmFsbCBpbiBAYmFsbHNcclxuXHRcdFx0YmFsbC51cGRhdGUoQGdyYXYpXHJcblxyXG5cdGFkZCA6IC0+IFxyXG5cdFx0QGJhbGxzLnB1c2ggbmV3IEJhbGxcclxuXHRcdEBzZWwgPSBAYmFsbHMubGVuZ3RoIC0gMVxyXG5cclxuXHRkZWxldGUgOi0+XHJcblx0XHRAYmFsbHMuc3BsaWNlIEBzZWwsIDFcclxuXHRcdGlmIEBzZWwgPj0gQGJhbGxzLmxlbmd0aCB0aGVuIEBzZWwgPSBAYmFsbHMubGVuZ3RoIC0gMSAgXHJcblx0c2VsTmV4dCA6IC0+IEBzZWwgPSAoQHNlbCArIDEpICUlIEBiYWxscy5sZW5ndGhcclxuXHRzZWxQcmV2IDogLT4gQHNlbCA9IChAc2VsIC0gMSkgJSUgQGJhbGxzLmxlbmd0aFxyXG5cdGdyb3cgOiAtPiAgICBAYmFsbHNbQHNlbF0ucisrXHJcblx0c2hyaW5rIDogLT4gIEBiYWxsc1tAc2VsXS5yLS1cclxuXHRuZXh0Q29sIDogLT4gQGJhbGxzW0BzZWxdLmMgPSAoQGJhbGxzW0BzZWxdLmMrMSkgJSUgOFxyXG5cdHByZXZDb2wgOiAtPiBAYmFsbHNbQHNlbF0uYyA9IChAYmFsbHNbQHNlbF0uYy0xKSAlJSA4XHJcblx0Z3Jhdml0eSA6IC0+IEBncmF2ID0gbm90IEBncmF2IFxyXG5cclxuYm91bmNpbmdCYWxscyA9IG5ldyBCb3VuY2luZ0JhbGxzIFwiYVwiXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdGJvdW5jaW5nQmFsbHMgOiBcInJlc2V0KCl8dXBkYXRlKCl8YWRkKCl8ZGVsZXRlKCl8c2VsTmV4dCgpfHNlbFByZXYoKXxncm93KCl8c2hyaW5rKCl8bmV4dENvbCgpfHByZXZDb2woKXxncmF2aXR5KClcIlxyXG5cclxuXHRcdEd1ZXNzX2FfbnVtYmVyIDpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MjggYmcgc2MgZmMgY2lyY2xlICUlICogLyArIC0gPD0gPj0gdGV4dCB0ZXh0QWxpZ24gZm9yIGluIHJhbmdlIE1hdGguZmxvb3IgaWYgdGhlbiByZXR1cm4gPCBjbGFzcyBleHRlbmRzIGNvbnN0cnVjdG9yIG5ldyBAIHN1cGVyIC0+XHJcblxyXG5jbGFzcyBHdWVzcyBleHRlbmRzIExvY2FsU3RvcmFnZVxyXG5cdHJlc2V0IDogLT5cclxuXHRsZWZ0IDotPiBcclxuXHRyaWdodCA6LT5cclxuXHR1cCA6LT5cclxuXHRkb3duIDotPlxyXG5cdGd1ZXNzIDotPlxyXG5cdGRyYXcgOiAtPlxyXG5cclxuZ3Vlc3MgPSBuZXcgR3Vlc3MgXCJiXCJcclxuXCJcIlwiXHJcblx0XHRcdGE6XCJcIlwiXHJcbmNsYXNzIEd1ZXNzIGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblx0cmVzZXQgOiAtPlxyXG5cdFx0QG4gPSAxMFxyXG5cdFx0QGkgPSBAbi8yXHJcblx0XHRAaiA9IEBuLzJcclxuXHRcdEBzdGFydCA9IDBcclxuXHRcdEBzdG9wcCA9IEBuKkBuLTFcclxuXHRcdEBzZWNyZXQgPSAyN1xyXG5cclxuXHRsZWZ0IDotPiBAaSA9IChAaS0xKSAlJSBAblxyXG5cdHJpZ2h0IDotPkBpID0gKEBpKzEpICUlIEBuXHJcblx0dXAgOi0+ICAgQGogPSAoQGotMSkgJSUgQG5cclxuXHRkb3duIDotPiBAaiA9IChAaisxKSAlJSBAblxyXG5cdGd1ZXNzIDotPiBcclxuXHRcdGkgPSBAbiAqIEBqICsgQGlcclxuXHRcdGlmIGkgPD0gQHNlY3JldCB0aGVuIEBzdGFydCA9IGkrMSBcclxuXHRcdGlmIGkgPj0gQHNlY3JldCB0aGVuIEBzdG9wcCA9IGktMSBcclxuXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRiZyAwLjFcclxuXHRcdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0XHRmb3IgaSBpbiByYW5nZSBAbipAblxyXG5cdFx0XHRpZiBAc3RhcnQgPD0gaSA8PSBAc3RvcHAgdGhlbiBmYyAxIGVsc2UgZmMgMC41XHJcblx0XHRcdHNjKClcclxuXHRcdFx0eCA9IGkgJSBAblxyXG5cdFx0XHR5ID0gTWF0aC5mbG9vciBpIC8gQG5cclxuXHRcdFx0dGV4dCBpLCAxMCArIDIwICogeCwgMTAgKyAyMCAqIHlcclxuXHRcdGZjIDEsMSwwXHJcblx0XHRzYygpXHJcblx0XHRjaXJjbGUgMTAgKyAyMCAqIEBpLCAxMCArIDIwICpAaiwxMFxyXG5cdFx0ZmMgMFxyXG5cdFx0aSA9IEBuICogQGogKyBAaVxyXG5cdFx0dGV4dCBpLCAxMCArIDIwICogQGksIDEwICsgMjAgKkBqXHJcblxyXG5ndWVzcyA9IG5ldyBHdWVzcyBcImFcIlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRndWVzcyA6IFwicmVzZXQoKXxsZWZ0KCl8cmlnaHQoKXx1cCgpfGRvd24oKXxndWVzcygpXCJcclxuXHJcblx0XHRcclxuXHRcdGtvcmc6IFxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzoyNyAtPiBiZyBmYyBzYyBzdyByZWN0IGZvciBpZiBlbHNlIGNsYXNzIGV4dGVuZHMgY29uc3RydWN0b3IgbmV3IEAgc3VwZXIgLT5cclxuXHJcbmNsYXNzIEtvcmcgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHRyZXNldCA6IC0+XHJcblx0ZHJhdyA6IC0+XHJcblx0bW9yZSA6IC0+XHJcblx0bGVzcyA6IC0+XHJcblx0dGhpbm5lciA6IC0+XHJcblx0dGhpY2tlciA6IC0+XHJcblxyXG5rb3JnID0gbmV3IEtvcmcgXCJiXCJcclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5jbGFzcyBLb3JnIGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblx0cmVzZXQgOiAtPlxyXG5cdFx0QG4gPSAxXHJcblx0XHRAdyA9IDVcclxuXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRjMSA9IGNvIDEsMCwwXHJcblx0XHRjMiA9IGNvIDEsMSwwXHJcblx0XHRiZyAwXHJcblx0XHRzdyBAd1xyXG5cdFx0ZmlsbCBjMVxyXG5cdFx0c3Ryb2tlIGMyXHJcblx0XHRxID0gMipAbisxXHJcblx0XHRkID0gMjAwLjAvcVxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgQG5cclxuXHRcdFx0cmVjdCBkK2kqMipkLDAsZCwyMDBcclxuXHRcdGZvciBqIGluIHJhbmdlIEBuXHJcblx0XHRcdHJlY3QgMCxkK2oqMipkLDIwMCxkXHJcblx0XHRmb3IgaSBpbiByYW5nZSBAblxyXG5cdFx0XHRmb3IgaiBpbiByYW5nZSBAblxyXG5cdFx0XHRcdGlmIChpK2opICUgMiA9PSAxXHJcblx0XHRcdFx0XHRyZWN0IGkqMipkLGQraioyKmQsMypkLGRcclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRyZWN0IGQraSoyKmQsaioyKmQsZCwzKmRcclxuXHRtb3JlIDogLT4gQG4rK1xyXG5cdGxlc3MgOiAtPiBAbi0tXHJcblx0dGhpbm5lciA6IC0+IEB3LS1cclxuXHR0aGlja2VyIDogLT4gQHcrK1xyXG5cclxua29yZyA9IG5ldyBLb3JnIFwiYVwiXHJcblwiXCJcIlxyXG5cdFx0XHRjOiBcclxuXHRcdFx0XHRrb3JnIDogXCJyZXNldCgpfG1vcmUoKXxsZXNzKCl8dGhpbm5lcigpfHRoaWNrZXIoKVwiXHJcblxyXG5cdFx0XCJPbHltcGljUmluZyBQcmVwXCI6XHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjIxIHNjIGZjIHN3IGFyYyBzdHJva2VDYXAgY2xhc3MgZXh0ZW5kcyBjb25zdHJ1Y3RvciBuZXcgQCBzdXBlciAtPlxyXG5cclxuY2xhc3MgUmluZyBleHRlbmRzIExvY2FsU3RvcmFnZVxyXG5cdHJlc2V0IDogLT5cclxuXHRfc3RhcnQgOiAoZCkgLT5cclxuXHRfc3RvcHAgOiAoZCkgLT4gXHJcblx0X3JhZGl1cyA6IChkKSAtPlxyXG5cdF93aWR0aCA6IChkKSAtPlxyXG5cdGRyYXcgOiAtPlxyXG5cclxucmluZyA9IG5ldyBSaW5nIFwiYlwiXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5jbGFzcyBSaW5nIGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblx0cmVzZXQgOiAtPlxyXG5cdFx0QHN0YXJ0ID0gM1xyXG5cdFx0QHN0b3BwID0gNlxyXG5cdFx0QHcgPSA1XHJcblx0XHRAcmFkaXVzID0gNTBcclxuXHRfc3RhcnQgOiAoZCkgLT4gQHN0YXJ0Kz1kXHJcblx0X3N0b3BwIDogKGQpIC0+IEBzdG9wcCs9ZFxyXG5cdF9yYWRpdXMgOiAoZCkgLT4gQHJhZGl1cys9ZFxyXG5cdF93aWR0aCA6IChkKSAtPiBAdys9ZFxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0aG91ciA9IFBJLzZcclxuXHRcdHN0cm9rZUNhcCBTUVVBUkVcclxuXHRcdGZjKClcclxuXHRcdHN3IEB3XHJcblx0XHRzYyAxLDEsMFxyXG5cdFx0YXJjIDEwMCwxMDAsMipAcmFkaXVzLDIqQHJhZGl1cywoQHN0YXJ0LTMpKmhvdXIsKEBzdG9wcC0zKSpob3VyXHJcblxyXG5yaW5nID0gbmV3IFJpbmcgXCJhXCJcclxuXCJcIlwiXHJcblx0XHRcdGM6IFxyXG5cdFx0XHRcdHJpbmcgOiBcInJlc2V0KCl8X3N0YXJ0IC0xfF9zdGFydCAxfF9zdG9wcCAtMXxfc3RvcHAgMXxfcmFkaXVzIC0xfF9yYWRpdXMgMXxfd2lkdGggLTF8X3dpZHRoIDFcIlxyXG5cclxuXHJcblx0XHRib2FyZEdhbWUgOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzoxMCBiZyBmYyBzYyBjaXJjbGUgZm9yIGluIHJhbmdlIC0+XHJcblxyXG5jbGFzcyBCb2FyZCBleHRlbmRzIExvY2FsU3RvcmFnZVxyXG5cdHJlc2V0IDogLT5cclxuXHRkcmF3IDogLT5cdFxyXG5cdF9yIDogKGQpIC0+XHJcblx0X2QgOiAoZCkgLT5cclxuXHRfbiA6IChkKSAtPlxyXG5cclxuYm9hcmQgPSBuZXcgQm9hcmQgXCJiXCIgXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5cclxuY2xhc3MgQm9hcmQgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHRyZXNldCA6IC0+XHJcblx0XHRAeCA9IDEwMFxyXG5cdFx0QHkgPSAxMDBcclxuXHRcdEBkID0gMThcclxuXHRcdEByID0gN1xyXG5cdFx0QG4gPSA1XHJcblx0ZHJhdyA6IC0+XHRcclxuXHRcdGJnIDFcclxuXHRcdGZjIDBcclxuXHRcdHNjKClcclxuXHRcdEBvbmUgQGQsQHIsQHgtQG4qQGQsIEB5LUBkLDIqQG4rMSwzXHJcblx0XHRAb25lIEBkLEByLEB4LUBkLCBAeS1AbipAZCwzLDIqQG4rMVxyXG5cdG9uZSA6IChkLHIseDAseTAsbSxuKSAtPlxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgbVxyXG5cdFx0XHRmb3IgaiBpbiByYW5nZSBuXHJcblx0XHRcdFx0Y2lyY2xlIHgwK2QqaSx5MCtkKmosclxyXG5cdF9yIDogKGQpIC0+IEByKz1kXHJcblx0X2QgOiAoZCkgLT4gQGQrPWRcclxuXHRfbiA6IChkKSAtPiBAbis9ZFxyXG5ib2FyZCA9IG5ldyBCb2FyZCBcImFcIiBcclxuXCJcIlwiXHJcblxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdGJvYXJkIDogXCJyZXNldCgpfF9yIC0xfF9yIDF8X2QgLTF8X2QgMXxfbiAtMXxfbiAxXCJcclxuXHJcblxyXG5cclxuXHRcdG11bHRpbW9pcmU6IFxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzoxMCBiZyBmb3IgbGluZSBtYXAgY2xhc3MgZXh0ZW5kcyBjb25zdHJ1Y3RvciBuZXcgQCBzdXBlciAtPlxyXG5cclxuY2xhc3MgTW9pcmUgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHRyZXNldCA6IC0+XHJcblx0ZHJhdyA6IC0+XHJcblx0bW9yZSA6IC0+IFxyXG5cdGxlc3MgOiAtPiBcclxuXHJcbm1vaXJlID0gbmV3IE1vaXJlIFwiYlwiXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRhOiBcIlwiXCJcclxuY2xhc3MgTW9pcmUgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHRyZXNldCA6IC0+XHJcblx0XHRAbiA9IDJcclxuXHRkcmF3IDogLT5cclxuXHRcdGJhY2tncm91bmQgMFxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgQG5cclxuXHRcdFx0Zm9yIGogaW4gcmFuZ2UgMzdcclxuXHRcdFx0XHRsaW5lIDEwLG1hcChpLDAsQG4tMSwxMCwxOTApLDE5MCwxMCtqKjVcclxuXHRtb3JlIDogLT4gQG4rK1xyXG5cdGxlc3MgOiAtPiBAbi0tXHJcblxyXG5tb2lyZSA9IG5ldyBNb2lyZSBcImFcIlxyXG5cIlwiXCJcclxuXHRcdFx0YzogXHJcblx0XHRcdFx0bW9pcmUgOiBcInJlc2V0KCl8bW9yZSgpfGxlc3MoKVwiXHJcblx0XHRcclxuXHRcdGNvbG9yQ3ViZTpcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjIwIC0+IGJnIGZjIGZvciBpbiByYW5nZSByZWN0IGNsYXNzIGV4dGVuZHMgY29uc3RydWN0b3IgbmV3IEAgc3VwZXIgLT5cclxuXHJcbmNsYXNzIENvbG9yQ3ViZSBleHRlbmRzIExvY2FsU3RvcmFnZVxyXG5cdHJlc2V0IDogLT5cclxuXHRkcmF3IDogLT5cclxuXHRtb3JlRGV0YWlscyA6IC0+XHJcblx0bGVzc0RldGFpbHMgOiAtPlxyXG5cdG1vcmVCbHVlIDogLT5cclxuXHRsZXNzQmx1ZSA6IC0+XHJcblxyXG5jYyA9IG5ldyBDb2xvckN1YmUgXCJiXCJcclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5jbGFzcyBDb2xvckN1YmUgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRiZyAwXHJcblx0XHRkID0gMjAwLjAvQG5cclxuXHRcdG0gPSBAbi0xLjBcclxuXHRcdGZvciByIGluIHJhbmdlIEBuXHJcblx0XHRcdGZvciBnIGluIHJhbmdlIEBuXHJcblx0XHRcdFx0ZmMgci9tLGcvbSxAYi9tXHJcblx0XHRcdFx0cmVjdCByKmQsZypkLGQsZFxyXG5cclxuXHRyZXNldCA6IC0+IFxyXG5cdFx0QG49MlxyXG5cdFx0QGI9MFxyXG5cdG1vcmVEZXRhaWxzIDogLT4gaWYgQG48MjU1IHRoZW4gQG4rK1xyXG5cdGxlc3NEZXRhaWxzIDogLT4gaWYgQG4+MiB0aGVuIEBuLS1cclxuXHRtb3JlQmx1ZSA6IC0+IGlmIEBiPEBuLTEgdGhlbiBAYis9MVxyXG5cdGxlc3NCbHVlIDogLT4gaWYgQGI+MCB0aGVuIEBiLT0xXHJcblxyXG5jYyA9IG5ldyBDb2xvckN1YmUgXCJhXCJcclxuXCJcIlwiXHJcblx0XHRcdGM6IFxyXG5cdFx0XHRcdGNjIDogXCJyZXNldCgpfG1vcmVEZXRhaWxzKCl8bGVzc0RldGFpbHMoKXxtb3JlQmx1ZSgpfGxlc3NCbHVlKClcIlxyXG5cclxuXHJcblx0XHRsYWJvcmF0b3JpdW0gOlxyXG5cdFx0XHRiOlwiXCJcIlx0XHRcclxuIyBIw6RyIGthbiBkdSBsYWJvcmVyYSBtZWQgZWduYSBpZMOpZXIhXHJcblxyXG5jbGFzcyBMYWJiIGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblx0cmVzZXQgOiAtPlxyXG5cdFx0c3VwZXJcclxuXHRcdEB4ID0gMTAwXHJcblx0XHRAeSA9IDEwMFxyXG5cdFx0QGNvbW1hbmQgPSBcIlwiXHJcblx0bGVmdCA6IC0+IEB4IC09IDEwXHJcblx0cmlnaHQgOiAtPiBAeCArPSAxMFxyXG5cdHVwIDogLT4gQHkgLT0gMTBcclxuXHRkb3duIDogLT4gQHkgKz0gMTBcclxuXHRhIDogLT4gQGNvbW1hbmQgPSBcImFcIlxyXG5cdGIgOiAtPiBAY29tbWFuZCA9IFwiYlwiXHJcblx0YyA6IC0+IEBjb21tYW5kID0gXCJjXCJcclxuXHRkIDogLT4gQGNvbW1hbmQgPSBcImRcIlxyXG5cdGUgOiAtPiBAY29tbWFuZCA9IE1hdGguZmxvb3IgcmFuZG9tIDEsN1xyXG5cdGYgOiAtPiBAY29tbWFuZCA9IE1hdGguZmxvb3IgbWlsbGlzKClcclxuXHRkcmF3IDogLT4gXHJcblx0XHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdFx0dGV4dFNpemUgNTBcclxuXHRcdGZjIDEsMSwwXHJcblx0XHR0ZXh0IEBjb21tYW5kLEB4LEB5XHJcblxyXG5sYWJiID0gbmV3IExhYmIgXCJiXCIgICAgIFxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuY2xhc3MgTGFiYiBleHRlbmRzIExvY2FsU3RvcmFnZVxyXG5cdHJlc2V0IDogLT5cclxuXHRsZWZ0IDogLT4gXHJcblx0cmlnaHQgOiAtPiBcclxuXHR1cCA6IC0+IFxyXG5cdGRvd24gOiAtPiBcclxuXHRhIDogLT4gXHJcblx0YiA6IC0+IFxyXG5cdGMgOiAtPiBcclxuXHRkIDogLT4gXHJcblx0ZSA6IC0+IFxyXG5cdGYgOiAtPiBcclxuXHRkcmF3IDogLT4gXHJcblxyXG5sYWJiID0gbmV3IExhYmIgXCJhXCIgICBcdFx0XHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdGxhYmIgOiBcInJlc2V0KCl8bGVmdCgpfHJpZ2h0KCl8dXAoKXxkb3duKCl8YSgpfGIoKXxjKCl8ZCgpfGUoKXxmKClcIlxyXG5cclxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cdFwiTEE6IGludGVyYWN0aXZpdHksIGFkdmFuY2VkXCIgOlxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG5cclxuXHRcdGtsb2NrYTogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzozNiAtPiBmYyBzYyBwb2ludCByZWN0IHJlY3RNb2RlIGNpcmNsZSBmb3IgaW4gcmFuZ2UgaWYgZWxzZSB0cmFuc2xhdGUgcmQgcHVzaCBwb3AgY2xhc3MgZXh0ZW5kcyBjb25zdHJ1Y3RvciBuZXcgQCBzdXBlciAtPlxyXG5cclxuY2xhc3MgS2xvY2thIGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblx0cmVzZXQgOiAtPiBcclxuXHRkcmF3IDogLT5cclxuXHRpbmNyX2hvdXIgICA6IC0+IFxyXG5cdGluY3JfbWludXRlIDogLT4gXHJcblx0aW5jcl9zZWNvbmQgOiAtPiBcclxuXHRkZWNyX2hvdXIgICA6IC0+IFxyXG5cdGRlY3JfbWludXRlIDogLT4gXHJcblx0ZGVjcl9zZWNvbmQgOiAtPiBcclxuXHJcbmtsb2NrYSA9IG5ldyBLbG9ja2EgXCJiXCJcclxuXHRcdFx0XCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5jbGFzcyBLbG9ja2EgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHRyZXNldCA6IC0+IFxyXG5cdFx0QGg9MTBcclxuXHRcdEBtPTlcclxuXHRcdEBzPTMwXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRyZWN0TW9kZSBDRU5URVJcclxuXHRcdHRyYW5zbGF0ZSAxMDAsMTAwXHJcblx0XHRAdXJ0YXZsYSgpXHJcblx0XHRAdmlzYXJlIChAaCtAbS82MC4wKSozMCwgNyw2MCwxLDAsMFxyXG5cdFx0QHZpc2FyZSAoQG0rQHMvNjAuMCkqNiw1LDgwLDAsMSwwXHJcblx0XHRAdmlzYXJlIEBzKjYsMiw4MCwwLDAsMVxyXG5cdGluY3JfaG91ciAgIDogLT4gQGgrK1xyXG5cdGluY3JfbWludXRlIDogLT4gQG0rK1xyXG5cdGluY3Jfc2Vjb25kIDogLT4gQHMrK1xyXG5cdGRlY3JfaG91ciAgIDogLT4gQGgtLVxyXG5cdGRlY3JfbWludXRlIDogLT4gQG0tLVxyXG5cdGRlY3Jfc2Vjb25kIDogLT4gQHMtLVxyXG5cclxuXHR2aXNhcmUgOiAodix3LGwscixnLGIpIC0+XHJcblx0XHRwdXNoKClcclxuXHRcdHJkIHYtOTBcclxuXHRcdHRyYW5zbGF0ZSBsLzIsMFxyXG5cdFx0ZmMgcixnLGJcclxuXHRcdHJlY3QgMCwwLGwsd1xyXG5cdFx0cG9wKClcclxuXHR1cnRhdmxhIDogLT5cclxuXHRcdGZjIDBcclxuXHRcdHNjIDFcclxuXHRcdGNpcmNsZSAwLDAsOTBcclxuXHRcdGZjIDFcclxuXHRcdGZvciBpIGluIHJhbmdlIDYwXHJcblx0XHRcdGlmIGklNT09MFxyXG5cdFx0XHRcdGNpcmNsZSA4NSwwLDJcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHBvaW50IDg1LDBcclxuXHRcdFx0cmQgNlxyXG5rbG9ja2EgPSBuZXcgS2xvY2thIFwiYVwiXHJcblwiXCJcIlxyXG5cdFx0XHRjOiBcclxuXHRcdFx0XHRrbG9ja2EgOiBcInJlc2V0KCl8aW5jcl9ob3VyKCl8aW5jcl9taW51dGUoKXxpbmNyX3NlY29uZCgpfGRlY3JfaG91cigpfGRlY3JfbWludXRlKCl8ZGVjcl9zZWNvbmQoKVwiXHJcblxyXG5cclxuXHRcdHJlY3Vyc2l2ZUNpcmNsZTogXHJcblx0XHRcdGI6IFwiXCJcIlxyXG4jIExPQzoxMCAtPiBzYyBjaXJjbGUgaWYgcmV0dXJuIDwgY2xhc3MgZXh0ZW5kcyBjb25zdHJ1Y3RvciBuZXcgQCBzdXBlciAtPlxyXG5cclxuY2xhc3MgUmVjdXJzaXZlQ2lyY2xlIGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblx0cmVzZXQgOiAtPiBcclxuXHRkcmF3IDogLT4gXHRcclxuXHRjaXJjbGVzIDogKHgseSxyLGxldmVsKSAtPlxyXG5cdG1vcmUgOiAtPiBcclxuXHRsZXNzIDogLT4gXHJcblxyXG5yYyA9IG5ldyBSZWN1cnNpdmVDaXJjbGUgXCJiXCJcclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5cclxuY2xhc3MgUmVjdXJzaXZlQ2lyY2xlIGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblx0cmVzZXQgOiAtPiBAbiA9IDBcclxuXHRkcmF3IDogLT4gQGNpcmNsZXMgMTAwLDEwMCwxMDAsQG5cdFx0XHJcblx0Y2lyY2xlcyA6ICh4LHkscixsZXZlbCkgLT5cclxuXHRcdGNpcmNsZSB4LHksclxyXG5cdFx0aWYgbGV2ZWwgPD0gMCB0aGVuIHJldHVyblxyXG5cdFx0QGNpcmNsZXMgeC1yLzIsIHksci8yLCBsZXZlbC0xXHJcblx0XHRAY2lyY2xlcyB4K3IvMiwgeSxyLzIsIGxldmVsLTFcclxuXHRtb3JlIDogLT4gQG4gPSBjb25zdHJhaW4gQG4rMSwwLDEwXHJcblx0bGVzcyA6IC0+IEBuID0gY29uc3RyYWluIEBuLTEsMCwxMFxyXG5cclxucmMgPSBuZXcgUmVjdXJzaXZlQ2lyY2xlIFwiYVwiXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdHJjIDogXCJyZXNldCgpfG1vcmUoKXxsZXNzKClcIlxyXG5cclxuXHRcdE5pbTpcclxuXHRcdFx0YjpcIlwiXCJcdFx0XHJcbiMgTE9DOjM0IC0+IGJnIGZjIHNjIGNpcmNsZSAqICsgLSBeIGlmIHRoZW4gZWxzZSBfLmlzRXF1YWwgcmV0dXJuIDwgY29uc3RyYWluIHRleHQgdGV4dEFsaWduIHRleHRTaXplIGNsYXNzIGV4dGVuZHMgY29uc3RydWN0b3IgbmV3IEAgc3VwZXIgLT5cclxuXHJcbmNsYXNzIE5pbSBleHRlbmRzIExvY2FsU3RvcmFnZVxyXG5cdHJlc2V0IDogLT4gXHJcblx0YSA6IC0+XHJcblx0YiA6IC0+XHJcblx0YyA6IC0+XHJcblx0b2sgOiAtPiBcclxuXHRkcmF3IDogLT5cclxuXHRoaW50IDogLT5cclxuXHJcbm5pbSA9IG5ldyBOaW0gXCJiXCIgIFxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuY2xhc3MgTmltIGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblx0cmVzZXQgOiAtPiBcclxuXHRcdEBib2FyZCA9IFs3LDgsOV1cclxuXHRcdEBhY3RpdmUgPSAtMVxyXG5cdFx0QHBsYXllciA9IDBcclxuXHRtb3ZlIDogKGluZGV4KSAtPlxyXG5cdFx0aWYgQGFjdGl2ZSBpbiBbaW5kZXgsLTFdXHJcblx0XHRcdEBhY3RpdmUgPSBpbmRleFxyXG5cdFx0XHRAYm9hcmRbQGFjdGl2ZV0gPSBjb25zdHJhaW4gQGJvYXJkW0BhY3RpdmVdLTEsIDAsIDk5XHJcblxyXG5cdGEgOiAtPiBAbW92ZSAwXHJcblx0YiA6IC0+IEBtb3ZlIDFcclxuXHRjIDogLT4gQG1vdmUgMlxyXG5cdG9rIDogLT4gXHJcblx0XHRpZiBAYWN0aXZlID09IC0xIHRoZW4gcmV0dXJuXHJcblx0XHRAcGxheWVyID0gMSAtIEBwbGF5ZXJcclxuXHRcdEBhY3RpdmUgPSAtMSBcclxuXHRkcmF3IDogLT5cclxuXHRcdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0XHR0ZXh0U2l6ZSA1MFxyXG5cdFx0YmcgMFxyXG5cdFx0ZmMgMVxyXG5cdFx0c2MoKVxyXG5cdFx0dGV4dCBAYm9hcmRbMF0sNTAsMTAwXHJcblx0XHR0ZXh0IEBib2FyZFsxXSwxMDAsMTAwXHJcblx0XHR0ZXh0IEBib2FyZFsyXSwxNTAsMTAwXHJcblx0XHRmYyAxLEBwbGF5ZXIsMFxyXG5cdFx0Y2lyY2xlIDIwICsgQHBsYXllciAqIDE2MCwyMCwxMFxyXG5cdGhpbnQgOiAtPlxyXG5cdFx0aWYgQGFjdGl2ZSAhPSAtMSB0aGVuIHJldHVyblxyXG5cdFx0W2EsYixjXSA9IEBib2FyZFxyXG5cdFx0Ym9hcmQgPSBpZiAoYl5jKSA8IGEgdGhlbiBbYl5jLGIsY10gZWxzZSBpZiAoYV5jKSA8IGIgdGhlbiBbYSxhXmMsY10gZWxzZSBpZiAoYV5iKSA8IGMgdGhlbiBbYSxiLGFeYl0gZWxzZSBbYSxiLGNdXHJcblx0XHRpZiBub3QgXy5pc0VxdWFsKGJvYXJkLEBib2FyZClcclxuXHRcdFx0QGJvYXJkID0gYm9hcmRcclxuXHRcdFx0QHBsYXllciA9IDEgLSBAcGxheWVyXHJcblxyXG5uaW0gPSBuZXcgTmltIFwiYVwiICAgXHJcblx0XHRcclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0bmltIDogXCJyZXNldCgpfGEoKXxiKCl8YygpfG9rKCl8aGludCgpXCJcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHROaW0gOiBcImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL05pbVwiXHJcblx0XHRcdFx0eG9yIDogXCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CaXR3aXNlX29wZXJhdGlvbiNYT1JcIlxyXG5cdFx0XHRcdE5pbXJvZCA6IFwiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTmltcm9kXyhjb21wdXRpbmcpXCJcclxuXHJcblxyXG5cclxuXHRcdENvbm5lY3Q0IDpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MjkgJSBiZyBmYyBzYyBzdyBjaXJjbGUgdGV4dCB0ZXh0QWxpZ24gdGV4dFNpemUgZm9yIGluIHJhbmdlIHB1c2ggY2xhc3MgZXh0ZW5kcyBjb25zdHJ1Y3RvciBuZXcgQCBzdXBlciAtPiBcclxuXHJcbmNsYXNzIENvbm5lY3Q0IGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblx0cmVzZXQgOiAtPlxyXG5cdGRyYXcgOiAtPlxyXG5cdG1vdmUgOiAobnIpIC0+XHJcblxyXG5jb25uZWN0NCA9IG5ldyBDb25uZWN0NCBcImJcIlxyXG5cdFx0XHRcIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuY2xhc3MgQ29ubmVjdDQgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHRyZXNldCA6IC0+XHJcblx0XHRAc2l6ZSA9IDI3XHJcblx0XHRAbGlzdCA9IChbXSBmb3IgaSBpbiByYW5nZSA3KVxyXG5cdFx0QG1vdmVzID0gW11cclxuXHRkcmF3IDogLT5cclxuXHRcdGJnIDBcclxuXHRcdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0XHR0ZXh0U2l6ZSBAc2l6ZS8yXHJcblx0XHRmYygpXHJcblx0XHRzYyAwLjEsMC4zLDFcclxuXHRcdHN3IDAuMiAqIEBzaXplXHJcblx0XHRmb3IgaSBpbiByYW5nZSA3XHJcblx0XHRcdGZvciBqIGluIHJhbmdlIDZcclxuXHRcdFx0XHRjaXJjbGUgMTAwLUBzaXplKjMrQHNpemUqaSwgMTgwLUBzaXplKmosIEBzaXplLzJcclxuXHRcdGZvciBjb2x1bW4saSBpbiBAbGlzdFxyXG5cdFx0XHRmb3IgbnIsaiBpbiBjb2x1bW5cclxuXHRcdFx0XHRmYyAxLG5yJTIsMFxyXG5cdFx0XHRcdHN3IDFcclxuXHRcdFx0XHRjaXJjbGUgMTAwLUBzaXplKjMrQHNpemUqaSwgMTgwLUBzaXplKmosIEBzaXplKjAuNFxyXG5cdFx0XHRcdGZjIDBcclxuXHRcdFx0XHRzYygpXHJcblx0XHRcdFx0dGV4dCBuciwgMTAwLUBzaXplKjMrQHNpemUqaSwgMTgwLUBzaXplKmpcclxuXHRcdHNjKClcclxuXHRcdGZjIDEsKEBtb3Zlcy5sZW5ndGgrMSklMiwwXHJcblx0XHRjaXJjbGUgMTAwLDE1LDEwXHJcblx0bW92ZSA6IChucikgLT5cclxuXHRcdEBtb3Zlcy5wdXNoIG5yXHJcblx0XHRAbGlzdFtucl0ucHVzaCBAbW92ZXMubGVuZ3RoIFxyXG5cclxuY29ubmVjdDQgPSBuZXcgQ29ubmVjdDQgXCJhXCJcclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0Y29ubmVjdDQgOiBcInJlc2V0KCl8bW92ZSAwfG1vdmUgMXxtb3ZlIDJ8bW92ZSAzfG1vdmUgNHxtb3ZlIDV8bW92ZSA2XCJcclxuXHJcblxyXG5cdFx0Y2hlc3NHYW1lIDpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6NjQgYmcgZmMgc2Mgc3cgcG9pbnQgcmVjdCByZWN0TW9kZSBpZiB0aGVuIGVsc2UgdGV4dCB0ZXh0U2l6ZSB0ZXh0QWxpZ24gY2xhc3MgY29uc3RydWN0b3IgbmV3IEBcclxuIyAgICAgICAgZm9yIGluIHJhbmdlIHB1c2ggc3BsaXQgbGVuZ3RoIGluZGV4T2ZcclxuXHJcbmNsYXNzIENoZXNzIGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblx0cmVzZXQgOiAtPlxyXG5cdGRyYXcgOiAtPlxyXG5cdG1vdmUgOiAoZCkgLT5cclxuXHJcbmNoZXNzID0gbmV3IENoZXNzIFwiYlwiXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5jbGFzcyBDaGVzcyBleHRlbmRzIExvY2FsU3RvcmFnZVxyXG5cclxuXHRyZXNldCA6IC0+XHJcblx0XHRAbW92ZXMgPSBcImUyZTQgZTdlNSBnMWYzIGI4YzYgZjFjNFwiLnNwbGl0IFwiIFwiXHJcblx0XHRAc2l6ZSA9IDIyXHJcblx0XHRAeCA9IDEwMFxyXG5cdFx0QHkgPSAxMDBcclxuXHRcdEBuID0gMFxyXG5cclxuXHRwdXRQaWVjZXMgOiAocGllY2VzKSAtPlxyXG5cdFx0cmVzID0gW11cclxuXHRcdGZvciBpIGluIHJhbmdlIDY0XHJcblx0XHRcdHJlcy5wdXNoIFwiXCIgXHJcblx0XHRhcnIgPSBwaWVjZXMuc3BsaXQgXCIgXCJcclxuXHRcdGZvciBwaWVjZSBpbiBhcnJcclxuXHRcdFx0aWYgcGllY2UubGVuZ3RoID09IDJcclxuXHRcdFx0XHRjaHIgPSBcIm9cIlxyXG5cdFx0XHRcdHNxID0gcGllY2VcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGNociA9IHBpZWNlWzBdXHJcblx0XHRcdFx0c3EgPSBwaWVjZVsxLi5dXHJcblx0XHRcdFtjb2wscm93XSA9IEBnZXRJbmRleCBzcVxyXG5cdFx0XHRyZXNbOCpjb2wrcm93XSA9IGNoclx0XHJcblx0XHRyZXNcclxuXHJcblx0Z2V0SW5kZXggOiAoc3EpIC0+XHJcblx0XHRjb2wgPSBcImFiY2RlZmdoXCIuaW5kZXhPZiBzcVswXVxyXG5cdFx0cm93ID0gXCIxMjM0NTY3OFwiLmluZGV4T2Ygc3FbMV1cclxuXHRcdFtjb2wscm93XVxyXG5cdFx0XHJcblx0cmVuZGVyIDogKHBpZWNlcyxjKSAtPlxyXG5cdFx0ZmMgY1xyXG5cdFx0c2MgY1xyXG5cdFx0Zm9yIHJvdyBpbiByYW5nZSA4XHJcblx0XHRcdGZvciBjb2wgaW4gcmFuZ2UgOFxyXG5cdFx0XHRcdHBpZWNlID0gcGllY2VzWzgqY29sK3Jvd11cclxuXHRcdFx0XHR4ID0gQHggLSAzLjUgKiBAc2l6ZSArIGNvbCAqIEBzaXplXHJcblx0XHRcdFx0eSA9IEB5IC0gMy41ICogQHNpemUgKyAoNy1yb3cpICogQHNpemVcclxuXHRcdFx0XHRpZiBwaWVjZSA9PSBcIm9cIlxyXG5cdFx0XHRcdFx0c3cgQHNpemUvMlxyXG5cdFx0XHRcdFx0cG9pbnQgeCx5XHJcblx0XHRcdFx0ZWxzZSBpZiBwaWVjZSBpbiBcIktRUkJOXCJcclxuXHRcdFx0XHRcdHN3IDEtY1xyXG5cdFx0XHRcdFx0dGV4dCBwaWVjZSx4LCAxK3lcdFx0XHJcblx0XHRcdFx0XHJcblx0ZHJhdyA6IC0+XHJcblx0XHRiZyAwLjVcclxuXHRcdHRleHRTaXplIDAuOSAqIEBzaXplXHJcblx0XHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdFx0cmVjdE1vZGUgQ0VOVEVSXHJcblx0XHRzYygpXHJcblx0XHRmb3IgaSBpbiByYW5nZSA4XHJcblx0XHRcdGZvciBqIGluIHJhbmdlIDhcclxuXHRcdFx0XHRpZiAoaStqKSUyID09IDEgdGhlbiBmYyAwLjQgZWxzZSBmYyAwLjZcclxuXHRcdFx0XHRyZWN0IEB4LTMuNSpAc2l6ZStAc2l6ZSppLCBAeS0zLjUqQHNpemUrQHNpemUqaiwgQHNpemUsIEBzaXplXHJcblxyXG5cdFx0d2hpdGUgPSBAcHV0UGllY2VzIFwiUmExIE5iMSBCYzEgUWQxIEtlMSBCZjEgTmcxIFJoMSBhMiBiMiBjMiBkMiBlMiBmMiBnMiBoMlwiXHJcblx0XHRibGFjayA9IEBwdXRQaWVjZXMgXCJSYTggTmI4IEJjOCBRZDggS2U4IEJmOCBOZzggUmg4IGE3IGI3IGM3IGQ3IGU3IGY3IGc3IGg3XCJcclxuXHJcblx0XHRmb3IgaSBpbiByYW5nZSBAblxyXG5cdFx0XHRAbW92ZVBpZWNlIEBtb3Zlc1tpXSwgaWYgaSUyPT0wIHRoZW4gd2hpdGUgZWxzZSBibGFja1x0XHRcclxuXHJcblx0XHRAcmVuZGVyIHdoaXRlLDFcclxuXHRcdEByZW5kZXIgYmxhY2ssMFxyXG5cclxuXHRtb3ZlUGllY2UgOiAobSxwbGF5ZXIpIC0+XHJcblx0XHRbY29sMSxyb3cxXSA9IEBnZXRJbmRleCBtWzAuLjFdXHJcblx0XHRbY29sMixyb3cyXSA9IEBnZXRJbmRleCBtWzIuLjNdXHJcblx0XHRwbGF5ZXJbY29sMio4K3JvdzJdID0gcGxheWVyW2NvbDEqOCtyb3cxXVxyXG5cdFx0cGxheWVyW2NvbDEqOCtyb3cxXSA9IFwiXCJcclxuXHJcblx0bW92ZSA6IChkKSAtPiBcclxuXHRcdEBuICs9IGRcclxuXHRcdEBuID0gY29uc3RyYWluIEBuLDAsQG1vdmVzLmxlbmd0aFxyXG5cclxuY2hlc3MgPSBuZXcgQ2hlc3MgXCJhXCJcclxuXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdGNoZXNzIDogXCJyZXNldCgpfG1vdmUgLTF8bW92ZSAxXCJcclxuXHJcblx0XHRTcGFjZVNoaXAgOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzozNSBzYyBzdyBwb2ludCB0cmlhbmdsZSB0cmFuc2xhdGUgcmQgY29zIHNpbiByYWRpYW5zIHB1c2ggcG9wIGNsYXNzIGV4dGVuZHMgY29uc3RydWN0b3IgbmV3IEAgc3VwZXIgLT5cclxuXHJcbmNsYXNzIFNob3RcclxuXHRjb25zdHJ1Y3RvciA6IChAeCxAeSxAZGlyKSAtPlxyXG5cdHJlbmRlciA6IC0+XHRcclxuXHRtb3ZlIDogLT5cclxuXHJcbmNsYXNzIFNoaXAgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuXHRcdHN1cGVyIEBuYW1lXHJcblx0XHRpZiBAc2hvdHMgdGhlbiBAc2hvdHMgPSAoXy5jcmVhdGUgU2hvdC5wcm90b3R5cGUsIHNob3QgZm9yIHNob3QgaW4gQHNob3RzKVxyXG5cdHJlc2V0IDogLT5cclxuXHRsdCA6IC0+IFxyXG5cdHJ0IDogLT4gXHJcblx0ZmQgOiAtPiBcclxuXHRzaG9vdCA6IC0+XHRcdFxyXG5cdGRyYXcgOiAtPlxyXG5cclxuc2hpcCA9IG5ldyBTaGlwIFwiYlwiXHRcclxuXCJcIlwiXHJcblx0XHRcdGE6IFwiXCJcIlxyXG5jbGFzcyBTaG90XHJcblx0Y29uc3RydWN0b3IgOiAoQHgsQHksQGRpcikgLT5cclxuXHRyZW5kZXIgOiAtPlx0cG9pbnQgQHgsQHkgXHJcblx0bW92ZSA6IC0+XHJcblx0XHRAeCArPSA1ICogY29zIHJhZGlhbnMgQGRpclxyXG5cdFx0QHkgKz0gNSAqIHNpbiByYWRpYW5zIEBkaXJcclxuXHJcbmNsYXNzIFNoaXAgZXh0ZW5kcyBMb2NhbFN0b3JhZ2UgXHJcblxyXG5cdGNvbnN0cnVjdG9yIDogKEBuYW1lKSAtPlxyXG5cdFx0c3VwZXIgQG5hbWVcclxuXHRcdGlmIEBzaG90cyB0aGVuIEBzaG90cyA9IChfLmNyZWF0ZSBTaG90LnByb3RvdHlwZSwgc2hvdCBmb3Igc2hvdCBpbiBAc2hvdHMpXHJcblxyXG5cdHJlc2V0IDogLT5cclxuXHRcdEB4ID0gMTAwXHJcblx0XHRAeSA9IDEwMFxyXG5cdFx0QHMgPSAxMFxyXG5cdFx0QGRpciA9IDBcclxuXHRcdEBzaG90cyA9IFtdXHJcblxyXG5cdGx0IDogLT4gQGRpciAtPSA1XHJcblx0cnQgOiAtPiBAZGlyICs9IDVcclxuXHRmZCA6IC0+IFxyXG5cdFx0QHggKz0gNSAqIGNvcyByYWRpYW5zIEBkaXJcclxuXHRcdEB5ICs9IDUgKiBzaW4gcmFkaWFucyBAZGlyXHJcblxyXG5cdHNob290IDogLT5cclxuXHRcdEBzaG90cy5wdXNoIG5ldyBTaG90IEB4LEB5LEBkaXJcclxuXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRwdXNoKClcclxuXHRcdHRyYW5zbGF0ZSBAeCxAeVxyXG5cdFx0cmQgQGRpclxyXG5cdFx0c2MgMSwxLDBcclxuXHRcdHN3IDJcclxuXHRcdHRyaWFuZ2xlIDIqQHMsMCwgLUBzLEBzLCAtQHMsLUBzXHJcblx0XHRzdyA1XHJcblx0XHRwb2ludCAwLDBcclxuXHRcdHBvcCgpXHJcblx0XHRmb3Igc2hvdCBpbiBAc2hvdHNcclxuXHRcdFx0c2hvdC5tb3ZlKClcclxuXHRcdFx0c2hvdC5yZW5kZXIoKVxyXG5cclxuc2hpcCA9IG5ldyBTaGlwIFwiYVwiXHRcclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0c2hpcDogXCJyZXNldCgpfGx0KCl8cnQoKXxmZCgpfHNob290KClcIlxyXG5cclxuXHJcblx0XHRSdXNoSG91ciA6XHJcblx0XHRcdGI6XCJcIlwiXHJcbiMgTE9DOjUxIGJnIHNjIGZjIHJlY3QgdGV4dCB0ZXh0QWxpZ24gcHVzaCBjbGFzcyBleHRlbmRzIGNvbnN0cnVjdG9yIG5ldyBAIHN1cGVyIC0+IFxyXG4jXHQgICAgICAgaWYgdGhlbiBlbHNlIGZvciBpbiByYW5nZSB0b0xvd2VyQ2FzZSBpbmRleE9mIFxyXG5cclxuY2xhc3MgQ2FyXHJcblx0Y29uc3RydWN0b3IgOiAoQGksQGosQHcsQGgsQHIsQGcsQGIpIC0+XHJcblx0cmVuZGVyIDogKGkpIC0+IFxyXG5cdG1vdmUgOiAoZCkgLT5cclxuXHJcbmNsYXNzIFJ1c2hIb3VyIGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblx0Y29uc3RydWN0b3IgOiAoQG5hbWUpIC0+XHJcblx0XHRzdXBlciBAbmFtZVxyXG5cdFx0aWYgQGNhcnMgdGhlbiBAY2FycyA9IChfLmNyZWF0ZSBDYXIucHJvdG90eXBlLCBjYXIgZm9yIGNhciBpbiBAY2FycylcclxuXHRyZXNldCA6IC0+XHJcblx0ZHJhdyA6IC0+XHJcblx0YWRkIDogKHBvcyxyLGcsYikgLT4gXHJcblx0QV9MZWZ0ICA6IC0+XHJcblx0QV9SaWdodCA6IC0+XHJcblx0Ql9VcCAgOiAtPiBcclxuXHRCX0Rvd24gOiAtPiBcclxuXHRDX0xlZnQgIDogLT4gXHJcblx0Q19SaWdodCA6IC0+XHJcblx0RF9VcCAgOiAtPiBcclxuXHREX0Rvd24gOiAtPiBcclxuXHJcbnJ1c2hIb3VyID0gbmV3IFJ1c2hIb3VyIFwiYlwiXHJcblxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuY2xhc3MgQ2FyXHJcblx0Y29uc3RydWN0b3IgOiAoQGksQGosQHcsQGgsQHIsQGcsQGIpIC0+XHJcblx0cmVuZGVyIDogKGkpIC0+IFxyXG5cdFx0ZmMgQHIsQGcsQGJcclxuXHRcdHJlY3QgNDArMjAqQGkrMiwgNDArMjAqQGorMiwgMjAqQHctNCwgMjAqQGgtNFxyXG5cdFx0ZmMgMFxyXG5cdFx0dGV4dCBcIkFCQ0RFRkdIXCJbaV0sIDUwKzIwKkBpLCA1MCsyMCpAalxyXG5cdG1vdmUgOiAoZCkgLT5cclxuXHRcdGlmIEB3ID09IDEgdGhlbiBAaiArPSBkXHJcblx0XHRpZiBAaCA9PSAxIHRoZW4gQGkgKz0gZFxyXG5cclxuY2xhc3MgUnVzaEhvdXIgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHJcblx0Y29uc3RydWN0b3IgOiAoQG5hbWUpIC0+XHJcblx0XHRzdXBlciBAbmFtZVxyXG5cdFx0aWYgQGNhcnMgdGhlbiBAY2FycyA9IChfLmNyZWF0ZSBDYXIucHJvdG90eXBlLCBjYXIgZm9yIGNhciBpbiBAY2FycylcclxuXHJcblx0cmVzZXQgOiAtPlxyXG5cdFx0QGNhcnMgPSBbXVxyXG5cdFx0QGFkZCBcImQzZTNcIiwxLDAsMFxyXG5cdFx0QGFkZCBcImQ2ZDVcIiwxLDEsMFxyXG5cdFx0QGFkZCBcImU1ZjVcIiwwLDEsMFxyXG5cdFx0QGFkZCBcImYzZjFcIiwwLDEsMVxyXG5cclxuXHRkcmF3IDogLT5cclxuXHRcdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0XHRiZyAwXHJcblx0XHRzYygpXHJcblx0XHRmYyAwLjUsMC41LDAuNVxyXG5cdFx0cmVjdCA0MCw0MCwxMjAsMTIwXHJcblx0XHRyZWN0IDE2MCw4MCw0MCwyMFxyXG5cdFx0ZmMgMVxyXG5cdFx0c2MoKVxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgNlxyXG5cdFx0XHR0ZXh0IFwiMTIzNDU2XCJbaV0sMzAsNTArMjAqaVxyXG5cdFx0XHR0ZXh0IFwiYWJjZGVmXCJbaV0sNTArMjAqaSwxNzBcclxuXHRcdGZvciBjYXIsaSBpbiBAY2Fyc1xyXG5cdFx0XHRjYXIucmVuZGVyIGlcclxuXHJcblx0Y29sIDogKHMpIC0+IFwiYWJjZGVmXCIuaW5kZXhPZiBzXHJcblx0cm93IDogKHMpIC0+IFwiMTIzNDU2XCIuaW5kZXhPZiBzXHJcblxyXG5cdGFkZCA6IChwb3MscixnLGIpIC0+IFxyXG5cdFx0aSA9IEBjb2wgcG9zWzBdIFxyXG5cdFx0aiA9IEByb3cgcG9zWzNdXHJcblx0XHR3ID0gQGNvbChwb3NbMl0pIC0gaSArIDFcclxuXHRcdCNoID0gaiAtIEByb3cocG9zWzFdKSArIDEgXHJcblx0XHRoID0gQHJvdyhwb3NbMV0pIC0gaiArIDEgXHJcblx0XHRAY2Fycy5wdXNoIG5ldyBDYXIgaSxqLHcsaCxyLGcsYlxyXG5cclxuXHRBX0xlZnQgIDogLT4gQGNhcnNbMF0ubW92ZSAtMVxyXG5cdEFfUmlnaHQgOiAtPiBAY2Fyc1swXS5tb3ZlICAxXHRcclxuXHRCX1VwICAgIDogLT4gQGNhcnNbMV0ubW92ZSAtMVx0XHJcblx0Ql9Eb3duICA6IC0+IEBjYXJzWzFdLm1vdmUgIDFcclxuXHRDX0xlZnQgIDogLT4gQGNhcnNbMl0ubW92ZSAtMVxyXG5cdENfUmlnaHQgOiAtPiBAY2Fyc1syXS5tb3ZlICAxXHJcblx0RF9VcCAgICA6IC0+IEBjYXJzWzNdLm1vdmUgLTFcclxuXHREX0Rvd24gIDogLT4gQGNhcnNbM10ubW92ZSAgMVxyXG5cdFx0XHRcclxucnVzaEhvdXIgPSBuZXcgUnVzaEhvdXIgXCJhXCJcclxuXCJcIlwiXHJcblx0XHRcdGM6XHJcblx0XHRcdFx0cnVzaEhvdXIgOiBcInJlc2V0KCl8QV9MZWZ0KCl8QV9SaWdodCgpfEJfVXAoKXxCX0Rvd24oKXxDX0xlZnQoKXxDX1JpZ2h0KCl8RF9VcCgpfERfRG93bigpXCJcclxuXHRcdFx0ZTpcclxuXHRcdFx0XHRSdXNoSG91ciA6IFwiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUnVzaF9Ib3VyXyhib2FyZF9nYW1lKVwiXHJcblxyXG5cdFx0UGlja2luZ0JlcnJpZXMgOlxyXG5cdFx0XHRiOlwiXCJcIlxyXG4jIExPQzo0NiBiZyBzYyBmYyBzdyBbXSAqICsgbGluZSB0ZXh0IHRleHRTaXplIHRleHRBbGlnbiBjb25zdHJhaW4gZGlzdCBzcGxpY2UgYnJlYWsgZm9yIGluIGNsYXNzIGV4dGVuZHMgY29uc3RydWN0b3IgbmV3IEAgc3VwZXIgLT5cclxuXHJcbmNsYXNzIFBpY2tpbmdCZXJyaWVzIGV4dGVuZHMgTG9jYWxTdG9yYWdlXHJcblx0cmVzZXQgICAgICA6IC0+XHJcblx0ZHJhdyAgICAgICA6IC0+XHJcblx0bGVmdCAgICAgICA6IC0+IFxyXG5cdHJpZ2h0ICAgICAgOiAtPiBcclxuXHR1cCAgICAgICAgIDogLT4gXHJcblx0ZG93biAgICAgICA6IC0+IFxyXG5cdHNuYWlsU3BlZWQgOiAtPlxyXG5cdHNsb3dTcGVlZCAgOiAtPlxyXG5cdGhpZ2hTcGVlZCAgOiAtPlxyXG5cdHdhcnBTcGVlZCAgOiAtPlxyXG5cdHBpY2sgICAgICAgOiAtPlxyXG5cclxuYmVycmllcyA9IG5ldyBQaWNraW5nQmVycmllcyBcImJcIlxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuY2xhc3MgUGlja2luZ0JlcnJpZXMgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHJcblx0cmVzZXQgOiAtPlxyXG5cdFx0c3VwZXJcclxuXHRcdEB4ID0gMTAwXHJcblx0XHRAeSA9IDEwMFxyXG5cdFx0QHNwZWVkID0gMVxyXG5cdFx0QGNsaXggPSAwXHJcblx0XHRAYmVycmllcyA9IFtbMTAwLDEwN10sWzE4OSwxNzVdLFsxMjQsMTM4XSxbMTk2LDE4OF0sWzEzLDM3XSxbMTg3LDc4XSxbMTIsMTY4XSxbMTUzLDMxXSxbMzIsMjBdLFsxMzEsMTg4XV1cclxuXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRiZyAwXHJcblx0XHRzYyAxXHJcblx0XHRzdyAxXHJcblx0XHRkID0gNSArIEBzcGVlZFxyXG5cdFx0bGluZSBAeC1kLEB5LEB4LEB5XHJcblx0XHRsaW5lIEB4LEB5LWQsQHgsQHlcclxuXHRcdGxpbmUgQHgsQHksQHgrZCxAeVxyXG5cdFx0bGluZSBAeCxAeSxAeCxAeStkXHJcblx0XHRcclxuXHRcdGZjIDEsMSwwXHJcblx0XHRzYygpXHJcblx0XHR0ZXh0U2l6ZSAyMFxyXG5cdFx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRcdHRleHQgQGNsaXgsMTAwLDE4MFxyXG5cclxuXHRcdHNjIDEsMCwwXHJcblx0XHRzdyAyXHJcblx0XHRmb3IgW3gseV0gaW4gQGJlcnJpZXNcclxuXHRcdFx0bGluZSB4LTMseS0zLHgrMyx5KzNcclxuXHRcdFx0bGluZSB4KzMseS0zLHgtMyx5KzNcclxuXHJcblx0bW92ZSA6IChkeCxkeSkgLT4gXHRcdFxyXG5cdFx0QHggKz0gZHggKiBAc3BlZWRcclxuXHRcdEB5ICs9IGR5ICogQHNwZWVkXHJcblx0XHRAY2xpeCsrXHJcblxyXG5cdGxlZnQgICAgOiAtPiBAbW92ZSAtMSwwXHJcblx0cmlnaHQgICA6IC0+IEBtb3ZlIDEsMFxyXG5cdHVwICAgICAgOiAtPiBAbW92ZSAwLC0xXHJcblx0ZG93biAgICA6IC0+IEBtb3ZlIDAsMVxyXG5cdHNuYWlsU3BlZWQgOiAtPiBAc3BlZWQgPSAxXHJcblx0c2xvd1NwZWVkIDogLT4gQHNwZWVkID0gNVxyXG5cdGhpZ2hTcGVlZCA6IC0+IEBzcGVlZCA9IDEwXHJcblx0d2FycFNwZWVkIDogLT4gQHNwZWVkID0gNTBcclxuXHJcblx0c3RlcCA6IChkKSAtPiBcclxuXHRcdEBjbGl4KytcclxuXHRcdGNvbnN0cmFpbiBAem9vbStkLDAsMyBcclxuXHRwaWNrIDogLT5cclxuXHRcdGZvciBbeCx5XSxpIGluIEBiZXJyaWVzXHJcblx0XHRcdGlmIGRpc3QoeCx5LEB4LEB5KSA8PSAyXHJcblx0XHRcdFx0QGJlcnJpZXMuc3BsaWNlIGksMVxyXG5cdFx0XHRcdGJyZWFrXHJcblx0XHRAY2xpeCsrXHJcblxyXG5iZXJyaWVzID0gbmV3IFBpY2tpbmdCZXJyaWVzIFwiYVwiXHJcblx0XHRcdFwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdGJlcnJpZXMgOiBcInJlc2V0KCl8bGVmdCgpfHJpZ2h0KCl8dXAoKXxkb3duKCl8c25haWxTcGVlZCgpfHNsb3dTcGVlZCgpfGhpZ2hTcGVlZCgpfHdhcnBTcGVlZCgpfHBpY2soKVwiXHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblx0XCJMQjogbWlzY2VsbGFuZW91c1wiIDpcclxuIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxuXHRcdGFscGhhbnVtZXJpYzpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MTUgYmcgZm9yIGluIHJhbmdlIGluZGV4T2YgJiAqKiBjaXJjbGUge30gW10gJycgaWYgdGhlbiBlbHNlIGNsYXNzIGV4dGVuZHMgY29uc3RydWN0b3IgbmV3IEAgc3VwZXIgLT5cclxuXHJcbmNsYXNzIEFscGhhTnVtZXJpYyBleHRlbmRzIExvY2FsU3RvcmFnZVxyXG5cdHJlc2V0IDogLT5cclxuXHRkcmF3IDogLT5cclxuXHRjaGFyYWN0ZXIgOiAoY2gpIC0+IFxyXG5cclxuYWxwaGEgPSBuZXcgQWxwaGFOdW1lcmljIFwiYlwiXHJcblwiXCJcIlxyXG5cdFx0XHRhOlwiXCJcIlxyXG5jbGFzcyBBbHBoYU51bWVyaWMgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHRyZXNldCA6IC0+IFxyXG5cdFx0QHBhdHRlcm4gPSB7MTonNGM0NDQ0ZScsIDI6J2VoMTI0OHYnLCBBOidlaGh2aGhoJywgQjondWhodWhodSd9XHJcblx0XHRAY2ggPSAnQSdcclxuXHRkcmF3IDogLT5cclxuXHRcdGJnIDBcclxuXHRcdHNjKClcclxuXHRcdGZvciBjaCxqIGluIEBwYXR0ZXJuW0BjaF1cclxuXHRcdFx0aW5kZXggPSAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXYnLmluZGV4T2YgY2hcclxuXHRcdFx0Zm9yIGkgaW4gcmFuZ2UgNVxyXG5cdFx0XHRcdGlmIGluZGV4ICYgMioqaSB0aGVuIGZjIDAsMSwwIGVsc2UgZmMgMCwwLjMsMFxyXG5cdFx0XHRcdHggPSAxNDAtMjAqaVxyXG5cdFx0XHRcdHkgPSA0MCsyMCpqXHJcblx0XHRcdFx0Y2lyY2xlIHgseSw4XHJcblx0Y2hhcmFjdGVyIDogKGNoKSAtPiBAY2ggPSBjaFxyXG5cclxuYWxwaGEgPSBuZXcgQWxwaGFOdW1lcmljIFwiYVwiXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdGFscGhhOiBcInJlc2V0KCl8Y2hhcmFjdGVyICdBJ3xjaGFyYWN0ZXIgJ0InfGNoYXJhY3RlciAnMSd8Y2hhcmFjdGVyICcyJ1wiXHJcblxyXG5cdFx0R29sZGVuU3RhcjpcclxuXHRcdFx0YjogXCJcIlwiXHJcbiMgTE9DOjIzIGJnIGZjIGZvciBpbiByYW5nZSB0cmlhbmdsZSB0cmFuc2xhdGUgcm90YXRlIGNvcyBzaW4gY2xhc3MgZXh0ZW5kcyBjb25zdHJ1Y3RvciBuZXcgQCBzdXBlciAtPlxyXG5cclxuY2xhc3MgR29sZGVuU3RhciBleHRlbmRzIExvY2FsU3RvcmFnZVxyXG5cdHJlc2V0IDogLT5cclxuXHRfbiA6IChkKSAtPiBcclxuXHRfb3V0ZXIgOiAoZCkgLT5cclxuXHRfaW5uZXIgOiAoZCkgLT5cclxuXHRkcmF3IDogLT5cclxuXHJcbnN0YXIgPSBuZXcgR29sZGVuU3RhciBcImJcIlxyXG5cIlwiXCJcclxuXHRcdFx0YTogXCJcIlwiXHJcbmNsYXNzIEdvbGRlblN0YXIgZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHRyZXNldCA6IC0+XHJcblx0XHRAeCA9IDEwMFxyXG5cdFx0QHkgPSAxMDBcclxuXHRcdEBuID0gNFxyXG5cdFx0QG91dGVyID0gMTAwXHJcblx0XHRAaW5uZXIgPSAyNVxyXG5cdF9uIDogKGQpIC0+IEBuID0gY29uc3RyYWluIEBuK2QsMywxMlxyXG5cdF9vdXRlciA6IChkKSAtPiBAb3V0ZXIgPSBjb25zdHJhaW4gQG91dGVyK2QsIDAsIDEwMFxyXG5cdF9pbm5lciA6IChkKSAtPiBAaW5uZXIgPSBjb25zdHJhaW4gQGlubmVyK2QsIDAsIDEwMFxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0YmcgMFxyXG5cdFx0dHJhbnNsYXRlIEB4LEB5XHJcblx0XHR2ID0gVFdPX1BJL0BuXHJcblx0XHRyb3RhdGUgLVBJLzJcclxuXHRcdHgxID0gQGlubmVyICogY29zIHYvMlxyXG5cdFx0eTEgPSBAaW5uZXIgKiBzaW4gdi8yXHJcblx0XHRmb3IgaSBpbiByYW5nZSBAblxyXG5cdFx0XHRmYyAxLDEsMFxyXG5cdFx0XHR0cmlhbmdsZSAwLDAsIEBvdXRlciwwLCB4MSx5MVxyXG5cdFx0XHRmYyAxLDAuNywwXHJcblx0XHRcdHRyaWFuZ2xlIDAsMCwgQG91dGVyLDAsIHgxLC15MVxyXG5cdFx0XHRyb3RhdGUgdlxyXG5cclxuc3RhciA9IG5ldyBHb2xkZW5TdGFyIFwiYVwiXHJcblwiXCJcIlxyXG5cdFx0XHRjOlxyXG5cdFx0XHRcdHN0YXIgOiBcInJlc2V0KCl8X24gLTF8X24gKzF8X291dGVyIC0xfF9vdXRlciArMXxfaW5uZXIgLTF8X2lubmVyICsxXCJcclxuXHRcdFxyXG5cdFx0UG9seWdvbjpcclxuXHRcdFx0YjpcIlwiXCJcclxuIyBMT0M6MjMgYmcgc2MgbGluZSBmb3IgaW4gcmFuZ2UgY29zIHNpbiByYWRpYW5zIGNsYXNzIGV4dGVuZHMgY29uc3RydWN0b3IgbmV3IEAgc3VwZXIgLT5cclxuXHJcbmNsYXNzIFR1cnRsZVxyXG5cdGNvbnN0cnVjdG9yIDogKEByPTEsQGc9MCxAYj0wLCBAeD0xMDAsQHk9MTAsQGRpcj0wKSAtPlxyXG5cdGZkIDogKGQpIC0+XHJcblx0cnQgOiAoYSkgLT5cclxuXHJcbmNsYXNzIFBvbHlnb24gZXh0ZW5kcyBMb2NhbFN0b3JhZ2VcclxuXHRyZXNldCA6IC0+XHJcblx0ZHJhdyA6IC0+XHJcblx0YW50YWxTaWRvciA6IChkKSAtPlxyXG5cdGFudGFsU3RlZyA6IChkKSAtPiBcclxuXHJcbnBvbHlnb24gPSBuZXcgUG9seWdvbiBcImJcIlxyXG5cIlwiXCJcclxuXHRcdFx0YTpcIlwiXCJcclxuY2xhc3MgVHVydGxlXHJcblx0Y29uc3RydWN0b3IgOiAoQHI9MSxAZz0wLEBiPTAsIEB4PTEwMCxAeT0xMCxAZGlyPTApIC0+XHJcblx0ZmQgOiAoZCkgLT5cclxuXHRcdGR4ID0gZCpjb3MgcmFkaWFucyBAZGlyXHJcblx0XHRkeSA9IGQqc2luIHJhZGlhbnMgQGRpclxyXG5cdFx0c2MgQHIsQGcsQGJcclxuXHRcdGxpbmUgQHgsQHksQHgrZHgsQHkrZHlcclxuXHRcdEB4ICs9IGR4XHJcblx0XHRAeSArPSBkeVxyXG5cdHJ0IDogKGEpIC0+XHJcblx0XHRAZGlyICs9YVxyXG5cclxuY2xhc3MgUG9seWdvbiBleHRlbmRzIExvY2FsU3RvcmFnZVxyXG5cdHJlc2V0IDogLT5cclxuXHRcdEBuID0gNlxyXG5cdFx0QHN0ZWcgPSA2MFxyXG5cclxuXHRkcmF3IDogLT5cclxuXHRcdHQgPSBuZXcgVHVydGxlKClcclxuXHRcdGJnIDBcclxuXHRcdGZvciBpIGluIHJhbmdlIEBuXHJcblx0XHRcdHQuZmQgQHN0ZWdcclxuXHRcdFx0dC5ydCAzNjAvQG5cclxuXHJcblx0YW50YWxTaWRvciA6IChkKSAtPiBAbiArPSBkXHJcblx0YW50YWxTdGVnIDogKGQpIC0+IEBzdGVnICs9IGRcclxuXHJcbnBvbHlnb24gPSBuZXcgUG9seWdvbiBcImFcIlxyXG5cIlwiXCJcclxuXHRcdFx0YzpcclxuXHRcdFx0XHRwb2x5Z29uIDogXCJyZXNldCgpfGFudGFsU2lkb3IgLTF8YW50YWxTaWRvciArMXxhbnRhbFN0ZWcgLTF8YW50YWxTdGVnICsxfFwiXHJcblxyXG4iXX0=
//# sourceURL=C:\github\p5Dojo\data.coffee