// Generated by CoffeeScript 2.4.1
// todo: Code Mirror hanterar inte toggleComment via Ctrl+/

// if the renew button is available, a new version of the b code is available.
// Clicking renew prints the current b code on the console as a backup.
var bg, block, buffer, buildKeywordLink, buildLink, cc, cct, changeLayout, circle, co, compare, decorate, editor_change, fc, fetch, fillSelect, fillTable, firstDiff, fixColor, fix_frames, gap, grid, ip, kwl, kwlinks, meny, mousePressed, msg, myCodeMirror, myprint, range, rd, reset, resizeTimer, run, run0, run1, saveSourceCode, saveToKeyStorage, sc, setMsg, setup, store, sw, tableAppend, tableClear, unmark, updateTables;

myCodeMirror = null;

msg = null;

kwl = {};

kwlinks = [];

gap = 0;

block = 0;

buffer = [[], [], []];

meny = null;

setMsg = function(e, nr) {
  var p, s;
  if (e === '') {
    msg.val("");
    msg.hide();
  } else {
    s = e.toString();
    p = s.indexOf(':');
    if (p !== -1) {
      s = s.substr(p + 1);
    }
    s = s.replace(/\t/g, '  ');
    msg.val(s + ' (' + e.name + ')' + (nr === 1 ? " (in A)" : ""));
    msg.show();
  }
  return msg.css('background-color', e === '' ? '#FFFFFF' : '#FF0000');
};

grid = function() {
  var i, l, len, ref;
  push();
  bg(0.25);
  sc(0.5);
  ref = range(11);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    line(0, 20 * i, 200, 20 * i);
    line(20 * i, 0, 20 * i, 200);
  }
  return pop();
};

myprint = function() {
  return print(Array.prototype.slice.call(arguments).join(" "));
};

co = function() {
  return fixColor(arguments);
};

ip = function(y1, y2, x, x1, x2) {
  if (arguments.length === 3) {
    x1 = 0;
    x2 = 9;
  }
  return map(x, x1, x2, y1, y2);
};

fixColor = function(args) {
  var a, b, g, n, r;
  n = args.length;
  r = 0;
  g = 0;
  b = 0;
  a = 1;
  if (n === 1) {
    r = args[0];
    g = r;
    b = r;
  } else if (n === 3) {
    r = args[0];
    g = args[1];
    b = args[2];
  } else if (n === 4) {
    r = args[0];
    g = args[1];
    b = args[2];
    a = args[3];
  }
  return color(255 * r, 255 * g, 255 * b, 255 * a);
};

bg = function() {
  return background(fixColor(arguments));
};

fc = function() {
  var n;
  n = arguments.length;
  if (n === 0) {
    return noFill();
  } else {
    return fill(fixColor(arguments));
  }
};

sc = function() {
  var n;
  n = arguments.length;
  if (n === 0) {
    return noStroke();
  } else {
    return stroke(fixColor(arguments));
  }
};

//b g c = (cc) -> bg cc%2, int(cc/2)%2, int(cc/4)
//f c c = (cc) -> fc cc%2, int(cc/2)%2, int(cc/4)
//s c c = (cc) -> sc cc%2, int(cc/2)%2, int(cc/4)
//t c c = (cc) -> f c c [7,7,0,0,7,0,0,0][cc]
cc = function(n) { // https://github.com/jonasjacek/colors with modifications
  var b, g, helper, lst, r, z;
  helper = function(n, big) {
    return [n % 2 * big, int(n / 2) % 2 * big, int(n / 4) * big];
  };
  if (n < 8) {
    return helper(n, 255);
  } else if (n === 8) {
    return [192, 192, 192];
  } else if (n < 16) {
    return helper(n - 8, 128);
  } else if (n === 16) {
    return [64, 64, 64];
  } else if (n < 232) {
    n -= 16;
    r = n % 6;
    n = Math.floor(n / 6);
    g = n % 6;
    n = Math.floor(n / 6);
    b = n;
    lst = [0, 95, 135, 175, 215, 255];
    return [lst[r], lst[g], lst[b]];
  } else {
    n -= 232;
    z = lerp(8, 18, n);
    return [z, z, z];
  }
};

cct = function(n) { // makes text visible
  var b, g, r;
  [r, g, b] = cc(n);
  if (r + g + b >= 3 * 128) {
    return [0, 0, 0];
  } else {
    return [255, 255, 255];
  }
};

sw = function(n) {
  return strokeWeight(n);
};

circle = function(x, y, r) {
  return ellipse(x, y, 2 * r, 2 * r);
};

rd = function(vinkel) {
  return rotate(radians(vinkel));
};

range = _.range;

fillSelect = function(sel, dict) {
  var key, results;
  sel.empty();
  results = [];
  for (key in dict) {
    results.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results;
};

buildLink = function(keyword) {
  var nr;
  if (keyword.indexOf('_.') === 0) {
    keyword = keyword.replace('_.', '');
  }
  nr = kwl[keyword];
  if (nr === void 0) {
    return;
  }
  if (nr === 0) {
    keyword = keyword.toLowerCase();
  }
  if (nr === null) {
    return null;
  } else {
    keyword = keyword.replace('[]', 'array');
    keyword = keyword.replace('""', 'string');
    keyword = keyword.replace('{}', 'object');
    keyword = keyword.replace('->', 'pil');
    keyword = keyword.replace('@', 'this');
    keyword = keyword.replace('...', 'exclusiverange');
    keyword = keyword.replace('..', 'inclusiverange');
    keyword = keyword.replace('HSB', 'colorMode');
    return kwlinks[nr].replace('{}', keyword);
  }
};

buildKeywordLink = function() {
  var save;
  kwl = {};
  kwlinks = [];
  kwlinks.push('https://github.com/ChristerNilsson/p5Dojo/blob/master/README.md#{}');
  kwlinks.push('https://p5js.org/reference/#/p5/{}');
  kwlinks.push('https://www.w3schools.com/jsref/jsref_{}.asp');
  kwlinks.push('https://github.com/ChristerNilsson/p5Dojo/blob/master/_.md#{}');
  save = function(index, words) {
    var l, len, ref, results, word;
    ref = words.split(' ');
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      word = ref[l];
      results.push(kwl[word] = index);
    }
    return results;
  };
  save(0, '[] "" {} .. ... @ -> class text textSize textAlign textFont operators comparisons logical if bg fc sc sw rd');
  save(0, 'range circle for while angleMode readText readInt readFloat');
  save(0, 'PI sqrt atan2 abs cos sin log10 Date arc rect ellipse point line triangle quad arguments');
  save(0, 'parseInt parseFloat dist nf constrain int round map lerp radians rotate reduce');
  save(1, 'rectMode translate scale push pop random millis colorMode HSB strokeCap fill');
  save(2, 'break return');
  return save(3, 'contains filter countBy isEqual last max min pairs sortBy findIndex');
};

mousePressed = function() {
  var code, dict, objekt, p, ref, ref1, ref2, ref3;
  if (meny.chapter === '' || meny.exercise === '') {
    return;
  }
  p = null;
  if ((0 <= (ref = mouseX - 5) && ref <= 200) && (0 <= (ref1 = mouseY - 5) && ref1 <= 200)) {
    p = [mouseX - 5, mouseY - 5];
  }
  if ((0 <= (ref2 = mouseX - 5) && ref2 <= 200) && (0 <= (ref3 = mouseY - 210) && ref3 <= 200)) {
    p = [mouseX - 5, mouseY - 210];
  }
  if (p) {
    dict = data[meny.chapter][meny.exercise].c;
    if (dict != null) {
      objekt = _.keys(dict)[0];
      code = objekt + `.mousePressed(${p[0]},${p[1]}); ` + objekt + ".draw(); " + objekt + ".store()";
      if (run1(code) === true) {
        run0(code);
        return compare();
      }
    }
  }
};

decorate = function(dict) { // {klocka: "draw|incr_hour"}
  var l, len, method, methods, objekt, res, s;
  if (dict === void 0) {
    return {};
  }
  if (dict === null) {
    return {};
  }
  res = {};
  for (objekt in dict) {
    s = dict[objekt];
    methods = s.split("|");
    res["draw()"] = objekt + ".draw(); " + objekt + ".store()";
    for (l = 0, len = methods.length; l < len; l++) {
      method = methods[l];
      res[method] = objekt + "." + method + "; " + objekt + ".draw(); " + objekt + ".store()";
    }
  }
  return res;
};

changeLayout = function() {
  var w;
  w = $(window).width();
  $(".CodeMirror").width(w - 425);
  $("#canvas").css({
    top: 0,
    left: 205,
    position: 'absolute'
  });
  $("#msg").width(w - 430);
  return $("#input").width(w - 218);
};

resizeTimer = 0;

$(window).resize(function() {
  clearTimeout(resizeTimer);
  return resizeTimer = setTimeout(changeLayout, 10);
});

updateTables = function() {
  meny.rensa();
  return meny.traverse();
};

setup = function() {
  var c, timestamp;
  meny = new Menu(data, document.getElementById("meny"));
  updateTables();
  timestamp = millis();
  c = createCanvas(5 + 201 + 5, 3 * 201 + 20);
  buildKeywordLink();
  gap = 5 * width * 4;
  block = 201 * width * 4;
  pixelDensity(1);
  c.parent('canvas');
  return msg = $('#msg');
};

window.onbeforeunload = function() {
  var blob, chapter, exercise, i, key1, key2, l, len, ref, res, s;
  if (document.URL.indexOf("record") === -1) {
    return;
  }
  res = [];
  for (key1 in data) {
    chapter = data[key1];
    for (key2 in chapter) {
      exercise = chapter[key2];
      if (exercise.d) {
        res.push(`### ${key1} ### ${key2}\n`);
        ref = exercise.d;
        for (i = l = 0, len = ref.length; l < len; i = ++l) {
          s = ref[i];
          res.push(`=== ${i}\n`);
          res.push(s + "\n");
        }
      }
    }
  }
  blob = new Blob(res, {
    type: "text/plain;charset=utf-8"
  });
  saveAs(blob, "recording.txt");
  return true;
};

window.onload = function() {
  var ta;
  ta = document.getElementById("code");
  myCodeMirror = CodeMirror.fromTextArea(document.getElementById("code"), {
    lineNumbers: true,
    mode: "coffeescript",
    keyMap: "sublime",
    theme: "dracula",
    autoCloseBrackets: true,
    lineWiseCopyCut: true,
    tabSize: 2,
    indentWithTabs: true,
    matchBrackets: true
  });
  $(".CodeMirror").css('font-size', "16pt");
  myCodeMirror.on("change", editor_change);
  meny.chapter = "";
  meny.exercise = "";
  myCodeMirror.setValue('# Klicka först på L1:\n# Klicka därefter på Background1');
  myCodeMirror.focus();
  window.resizeTo(1000, 750);
  changeLayout();
  return meny.setState(0);
};

saveToKeyStorage = function(b) {
  var l, len, line, place, ref, s;
  s = "";
  ref = b.split('\n');
  for (l = 0, len = ref.length; l < len; l++) {
    line = ref[l];
    if (line.indexOf("#") !== 0) {
      s += line;
    }
  }
  place = data[meny.chapter][meny.exer()];
  if (!place.d) {
    place.d = [];
  }
  return place.d.push(s);
};

editor_change = function() {
  var code, dce, res;
  reset();
  if (meny.exer() === '') {
    return;
  }
  if (0 === _.size(meny.calls)) {
    code = ""; // transpile, draw
  } else {
    code = meny.calls["draw()"];
  }
  dce = data[meny.chapter][meny.exer()];
  if (dce && dce.a && _.size(dce.a.c) > 0) {
    if (false === run1(code)) { // bör normalt vara true
      return;
    }
  }
  res = run0(code);
  //if res # spara källkod EFTER exekvering
  saveSourceCode();
  return compare();
};

saveSourceCode = function() {
  return localStorage[meny.exer() + "/d"] = myCodeMirror.getValue();
};

run0 = function(code) {
  var checkBox, src;
  if (meny.exer() === "") {
    return false;
  }
  src = myCodeMirror.getValue();
  checkBox = document.getElementById("chkAutoRun");
  if (checkBox.checked) {
    return run(0, src + "\n" + code);
  } else {
    return run(0, "\n" + code);
  }
};

run1 = function(code) {
  if (meny.exer() === "") {
    return;
  }
  return run(1, data[meny.chapter][meny.exer()].a + "\n" + code);
};

reset = function() {
  resetMatrix();
  colorMode(RGB, 255);
  angleMode(RADIANS);
  rectMode(CORNER);
  strokeCap(ROUND);
  textAlign(LEFT, BASELINE);
  smooth(); // pga SuperCircle
  bg(0);
  fc(0);
  sc(1);
  return sw(1);
};

run = function(_n, coffee) {
  var code, e;
  reset();
  push();
  translate(5, 5);
  grid();
  setMsg("", _n);
  if (meny.exercise === "") {
    pop();
    return true;
  }
  try {
    code = transpile(coffee);
    try {
      eval(code);
      buffer[1 - _n] = store();
      pop();
      return true;
    } catch (error) {
      e = error;
      setMsg(e, _n);
      pop();
      return false;
    }
  } catch (error) {
    e = error;
    setMsg(e, _n);
    pop();
    return false;
  }
};

store = function() {
  loadPixels();
  return pixels.slice(gap, gap + block);
};

fetch = function(buffer, y0) {
  var i, l, len, ref;
  loadPixels();
  ref = range(block);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    pixels[gap + (gap + block) * y0 + i] = buffer[i];
  }
  return updatePixels();
};

fix_frames = function() {
  var i, j, k, l, len, len1, len2, len3, m, o, q, ref, ref1, ref2, ref3;
  loadPixels();
  ref = range(4);
  for (l = 0, len = ref.length; l < len; l++) {
    k = ref[l];
    ref1 = range(gap);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      i = ref1[m];
      pixels[(gap + block) * k + i] = 128 - 64;
    }
  }
  ref2 = range(height);
  // 3*201+20
  for (o = 0, len2 = ref2.length; o < len2; o++) {
    j = ref2[o];
    ref3 = range(20);
    for (q = 0, len3 = ref3.length; q < len3; q++) {
      i = ref3[q];
      pixels[j * width * 4 + i] = 128 - 64;
      pixels[j * width * 4 + 206 * 4 + i] = 128 - 64;
    }
  }
  return updatePixels();
};

compare = function() { // Lägg en timer på denna. Bör vänta någon sekund
  var a, b, c, i, i4, l, len, ref;
  a = buffer[0];
  b = buffer[1];
  c = a.slice(0);
  if (msg.val() === '') {
    ref = range(block / 4);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      i4 = 4 * i;
      c[i4 + 0] = abs(c[i4 + 0] - b[i4 + 0]);
      c[i4 + 1] = abs(c[i4 + 1] - b[i4 + 1]);
      c[i4 + 2] = abs(c[i4 + 2] - b[i4 + 2]);
      c[i4 + 3] = 255;
    }
  }
  fetch(a, 0);
  if (msg.val() === '') {
    fetch(b, 1);
    fetch(c, 2);
  }
  return fix_frames();
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(t, call, expected, actual) { // exakt tre rader
  var cell1, cell2, cell4, cell6, dummy, row;
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell2 = row.insertCell(-1);
  cell1.innerHTML = call;
  cell2.innerHTML = JSON.stringify(expected);
  cell2.style.backgroundColor = '#00FF00';
  if (_.isEqual(expected, actual)) {
    return;
  }
  row = t.insertRow(-1);
  dummy = row.insertCell(-1);
  cell4 = row.insertCell(-1);
  cell4.innerHTML = JSON.stringify(actual);
  cell4.style.backgroundColor = '#FF0000';
  row = t.insertRow(-1);
  dummy = row.insertCell(-1);
  cell6 = row.insertCell(-1);
  return cell6.innerHTML = firstDiff(cell2.innerHTML, cell4.innerHTML);
};

firstDiff = function(a, b) { // return index and differing characters
  var i, l, len, ref, res;
  res = '';
  if (a === b) {
    return '';
  }
  ref = range(_.min([a.length, b.length]));
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    res += a[i] === b[i] ? '·' : '^';
  }
  return res;
};

fillTable = function(a, b) {
  var key, keys, l, len, results, value;
  try {
    a = JSON.parse(localStorage[a]);
    b = JSON.parse(localStorage[b]);
    tableClear();
    keys = [];
    for (key in a) {
      value = a[key];
      keys.push(key);
    }
    for (key in b) {
      value = b[key];
      keys.push(key);
    }
    sort(keys);
    keys = _.uniq(keys);
    results = [];
    for (l = 0, len = keys.length; l < len; l++) {
      key = keys[l];
      if (key !== '_name' && key !== '_type') {
        results.push(tableAppend(tabell, "@" + key, unmark(a[key]), unmark(b[key])));
      } else {
        results.push(void 0);
      }
    }
    return results;
  } catch (error) {

  }
};

unmark = function(obj) {
  var item, key, res, value;
  if (_.isArray(obj)) {
    return (function() {
      var l, len, results;
// array
      results = [];
      for (l = 0, len = obj.length; l < len; l++) {
        item = obj[l];
        results.push(unmark(item));
      }
      return results;
    })();
  }
  if (_.isObject(obj)) {
    res = {};
    for (key in obj) {
      value = obj[key];
      res[key] = unmark(value); // if key != '_type'
    }
    return res;
  }
  return obj;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicDVkb2pvLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHA1ZG9qby5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0FBQUEsSUFBQSxFQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxnQkFBQSxFQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLFlBQUEsRUFBQSxNQUFBLEVBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsVUFBQSxFQUFBLFNBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQUFBLFVBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxZQUFBLEVBQUEsR0FBQSxFQUFBLFlBQUEsRUFBQSxPQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsV0FBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLGNBQUEsRUFBQSxnQkFBQSxFQUFBLEVBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUEsV0FBQSxFQUFBLFVBQUEsRUFBQSxNQUFBLEVBQUE7O0FBS0EsWUFBQSxHQUFlOztBQUNmLEdBQUEsR0FBTTs7QUFFTixHQUFBLEdBQU0sQ0FBQTs7QUFDTixPQUFBLEdBQVU7O0FBRVYsR0FBQSxHQUFNOztBQUNOLEtBQUEsR0FBUTs7QUFDUixNQUFBLEdBQVMsQ0FBQyxFQUFELEVBQUksRUFBSixFQUFPLEVBQVA7O0FBRVQsSUFBQSxHQUFPOztBQUVQLE1BQUEsR0FBUyxRQUFBLENBQUMsQ0FBRCxFQUFHLEVBQUgsQ0FBQTtBQUNSLE1BQUEsQ0FBQSxFQUFBO0VBQUEsSUFBRyxDQUFBLEtBQUssRUFBUjtJQUNDLEdBQUcsQ0FBQyxHQUFKLENBQVEsRUFBUjtJQUNBLEdBQUcsQ0FBQyxJ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SUFBRyxHQUFBLEtBQU8sT0FBUCxJQUFvQixHQUFBLEtBQU8sT0FBOUI7cUJBQ0MsV0FBQSxDQUFZLE1BQVosRUFBb0IsR0FBQSxHQUFNLEdBQTFCLEVBQThCLE1BQUEsQ0FBTyxDQUFFLENBQUEsR0FBQSxDQUFULENBQTlCLEVBQTZDLE1BQUEsQ0FBTyxDQUFFLENBQUEsR0FBQSxDQUFULENBQTdDLEdBREQ7T0FBQSxNQUFBOzZCQUFBOztJQURELENBQUE7bUJBVkQ7R0FBQSxhQUFBO0FBQUE7O0FBRFc7O0FBZ0JaLE1BQUEsR0FBUyxRQUFBLENBQUMsR0FBRCxDQUFBO0FBQ1IsTUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTtFQUFBLElBQUcsQ0FBQyxDQUFDLE9BQUYsQ0FBVSxHQUFWLENBQUg7QUFBdUI7OztBQUFvQjtNQUFBLEtBQUEscUNBQUE7O3FCQUFaLE1BQUEsQ0FBTyxJQUFQO01BQVksQ0FBQTs7U0FBM0M7O0VBQ0EsSUFBRyxDQUFDLENBQUMsUUFBRixDQUFXLEdBQVgsQ0FBSDtJQUNDLEdBQUEsR0FBTSxDQUFBO0lBQ04sS0FBQSxVQUFBOztNQUNDLEdBQUksQ0FBQSxHQUFBLENBQUosR0FBVyxNQUFBLENBQU8sS0FBUCxFQURaO0lBQUE7QUFFQSxXQUFPLElBSlI7O1NBS0E7QUFQUSIsInNvdXJjZXNDb250ZW50IjpbIiMgdG9kbzogQ29kZSBNaXJyb3IgaGFudGVyYXIgaW50ZSB0b2dnbGVDb21tZW50IHZpYSBDdHJsKy9cclxuXHJcbiMgaWYgdGhlIHJlbmV3IGJ1dHRvbiBpcyBhdmFpbGFibGUsIGEgbmV3IHZlcnNpb24gb2YgdGhlIGIgY29kZSBpcyBhdmFpbGFibGUuXHJcbiMgQ2xpY2tpbmcgcmVuZXcgcHJpbnRzIHRoZSBjdXJyZW50IGIgY29kZSBvbiB0aGUgY29uc29sZSBhcyBhIGJhY2t1cC5cclxuXHJcbm15Q29kZU1pcnJvciA9IG51bGxcclxubXNnID0gbnVsbFxyXG5cclxua3dsID0ge31cclxua3dsaW5rcyA9IFtdXHJcblxyXG5nYXAgPSAwXHJcbmJsb2NrID0gMFxyXG5idWZmZXIgPSBbW10sW10sW11dXHJcblxyXG5tZW55ID0gbnVsbFxyXG5cclxuc2V0TXNnID0gKGUsbnIpIC0+XHJcblx0aWYgZSA9PSAnJ1xyXG5cdFx0bXNnLnZhbCBcIlwiXHJcblx0XHRtc2cuaGlkZSgpXHJcblx0ZWxzZVxyXG5cdFx0cyA9IGUudG9TdHJpbmcoKVxyXG5cdFx0cCA9IHMuaW5kZXhPZiAnOidcclxuXHRcdHMgPSBzLnN1YnN0ciBwKzEgaWYgcCE9LTFcclxuXHJcblx0XHRzID0gcy5yZXBsYWNlIC9cXHQvZywnICAnXHJcblxyXG5cdFx0bXNnLnZhbCBzICsgJyAoJyArIGUubmFtZSArICcpJyArIGlmIG5yPT0xIHRoZW4gXCIgKGluIEEpXCIgZWxzZSBcIlwiXHJcblx0XHRtc2cuc2hvdygpXHJcblx0bXNnLmNzcyAnYmFja2dyb3VuZC1jb2xvcicsIGlmIGUgPT0gJycgdGhlbiAnI0ZGRkZGRicgZWxzZSAnI0ZGMDAwMCdcclxuXHJcbmdyaWQgPSAtPlxyXG5cdHB1c2goKVxyXG5cdGJnIDAuMjVcclxuXHRzYyAwLjVcclxuXHRmb3IgaSBpbiByYW5nZSAxMVxyXG5cdFx0bGluZSAwLCAyMCAqIGksIDIwMCwgMjAgKiBpXHJcblx0XHRsaW5lIDIwICogaSwgMCwgMjAgKiBpLCAyMDBcclxuXHRwb3AoKVxyXG5cclxubXlwcmludCA9IC0+IHByaW50IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuam9pbihcIiBcIilcclxuXHJcbmNvID0gLT4gZml4Q29sb3IgYXJndW1lbnRzXHJcblxyXG5pcCA9ICh5MSx5Mix4LHgxLHgyKSAtPlxyXG5cdGlmIGFyZ3VtZW50cy5sZW5ndGggPT0gM1xyXG5cdFx0eDE9MFxyXG5cdFx0eDI9OVxyXG5cdG1hcCB4LHgxLHgyLHkxLHkyXHJcblxyXG5maXhDb2xvciA9IChhcmdzKSAtPlxyXG5cdG4gPSBhcmdzLmxlbmd0aFxyXG5cdHI9MFxyXG5cdGc9MFxyXG5cdGI9MFxyXG5cdGE9MVxyXG5cdGlmIG4gPT0gMVxyXG5cdFx0ciA9IGFyZ3NbMF1cclxuXHRcdGcgPSByXHJcblx0XHRiID0gclxyXG5cdGVsc2UgaWYgbiA9PSAzXHJcblx0XHRyID0gYXJnc1swXVxyXG5cdFx0ZyA9IGFyZ3NbMV1cclxuXHRcdGIgPSBhcmdzWzJdXHJcblx0ZWxzZSBpZiBuID09IDRcclxuXHRcdHIgPSBhcmdzWzBdXHJcblx0XHRnID0gYXJnc1sxXVxyXG5cdFx0YiA9IGFyZ3NbMl1cclxuXHRcdGEgPSBhcmdzWzNdXHJcblx0Y29sb3IgMjU1ICogciwgMjU1ICogZywgMjU1ICogYiwgMjU1ICogYVxyXG5cclxuYmcgPSAtPiBiYWNrZ3JvdW5kIGZpeENvbG9yIGFyZ3VtZW50c1xyXG5cclxuZmMgPSAtPlxyXG5cdG4gPSBhcmd1bWVudHMubGVuZ3RoXHJcblx0aWYgbiA9PSAwXHJcblx0XHRub0ZpbGwoKVxyXG5cdGVsc2VcclxuXHRcdGZpbGwgZml4Q29sb3IgYXJndW1lbnRzXHJcblxyXG5zYyA9IC0+XHJcblx0biA9IGFyZ3VtZW50cy5sZW5ndGhcclxuXHRpZiBuID09IDBcclxuXHRcdG5vU3Ryb2tlKClcclxuXHRlbHNlXHJcblx0XHRzdHJva2UgZml4Q29sb3IgYXJndW1lbnRzXHJcblxyXG4jYiBnIGMgPSAoY2MpIC0+IGJnIGNjJTIsIGludChjYy8yKSUyLCBpbnQoY2MvNClcclxuI2YgYyBjID0gKGNjKSAtPiBmYyBjYyUyLCBpbnQoY2MvMiklMiwgaW50KGNjLzQpXHJcbiNzIGMgYyA9IChjYykgLT4gc2MgY2MlMiwgaW50KGNjLzIpJTIsIGludChjYy80KVxyXG4jdCBjIGMgPSAoY2MpIC0+IGYgYyBjIFs3LDcsMCwwLDcsMCwwLDBdW2NjXVxyXG5cclxuY2MgPSAobikgLT4gIyBodHRwczovL2dpdGh1Yi5jb20vam9uYXNqYWNlay9jb2xvcnMgd2l0aCBtb2RpZmljYXRpb25zXHJcblx0aGVscGVyID0gKG4sYmlnKSAtPiBbbiUyKmJpZywgaW50KG4vMiklMipiaWcsIGludChuLzQpKmJpZ11cclxuXHRpZiBuPDggdGhlbiBoZWxwZXIgbiwyNTVcclxuXHRlbHNlIGlmIG49PTggdGhlbiBbMTkyLDE5MiwxOTJdXHJcblx0ZWxzZSBpZiBuPDE2IHRoZW4gaGVscGVyIG4tOCwxMjhcclxuXHRlbHNlIGlmIG49PTE2IHRoZW4gWzY0LDY0LDY0XVxyXG5cdGVsc2UgaWYgbjwyMzJcclxuXHRcdG4tPTE2XHJcblx0XHRyPW4lNjsgbi8vPTZcclxuXHRcdGc9biU2OyBuLy89NlxyXG5cdFx0Yj1uXHJcblx0XHRsc3QgPSBbMCw5NSwxMzUsMTc1LDIxNSwyNTVdXHJcblx0XHRbbHN0W3JdLGxzdFtnXSxsc3RbYl1dXHJcblx0ZWxzZVxyXG5cdFx0bi09MjMyXHJcblx0XHR6ID0gbGVycCA4LDE4LG5cclxuXHRcdFt6LHosel1cclxuXHJcbmNjdCA9IChuKSAtPiAjIG1ha2VzIHRleHQgdmlzaWJsZVxyXG5cdFtyLGcsYl0gPSBjYyBuXHJcblx0aWYgcitnK2IgPj0gMyoxMjggdGhlbiBbMCwwLDBdIGVsc2UgWzI1NSwyNTUsMjU1XVxyXG5cclxuc3cgPSAobikgLT4gc3Ryb2tlV2VpZ2h0IG5cclxuXHJcbmNpcmNsZSA9ICh4LHkscikgLT4gZWxsaXBzZSB4LHksMipyLDIqclxyXG5yZCA9ICh2aW5rZWwpIC0+IHJvdGF0ZSByYWRpYW5zIHZpbmtlbFxyXG5yYW5nZSA9IF8ucmFuZ2VcclxuXHJcbmZpbGxTZWxlY3QgPSAoc2VsLCBkaWN0KSAtPlxyXG5cdHNlbC5lbXB0eSgpXHJcblx0Zm9yIGtleSBvZiBkaWN0XHJcblx0XHRzZWwuYXBwZW5kKCQoXCI8b3B0aW9uPlwiKS5hdHRyKCd2YWx1ZScsIGtleSkudGV4dChrZXkpKVxyXG5cclxuYnVpbGRMaW5rID0gKGtleXdvcmQpIC0+XHJcblx0aWYga2V5d29yZC5pbmRleE9mKCdfLicpPT0wIHRoZW4ga2V5d29yZCA9IGtleXdvcmQucmVwbGFjZSgnXy4nLCcnKVxyXG5cdG5yID0ga3dsW2tleXdvcmRdXHJcblx0aWYgbnIgPT0gdW5kZWZpbmVkIHRoZW4gcmV0dXJuXHJcblx0aWYgbnI9PTAgdGhlbiBrZXl3b3JkID0ga2V5d29yZC50b0xvd2VyQ2FzZSgpXHJcblx0aWYgbnI9PW51bGxcclxuXHRcdG51bGxcclxuXHRlbHNlXHJcblx0XHRrZXl3b3JkID0ga2V5d29yZC5yZXBsYWNlKCdbXScsJ2FycmF5JylcclxuXHRcdGtleXdvcmQgPSBrZXl3b3JkLnJlcGxhY2UoJ1wiXCInLCdzdHJpbmcnKVxyXG5cdFx0a2V5d29yZCA9IGtleXdvcmQucmVwbGFjZSgne30nLCdvYmplY3QnKVxyXG5cdFx0a2V5d29yZCA9IGtleXdvcmQucmVwbGFjZSgnLT4nLCdwaWwnKVxyXG5cdFx0a2V5d29yZCA9IGtleXdvcmQucmVwbGFjZSgnQCcsJ3RoaXMnKVxyXG5cdFx0a2V5d29yZCA9IGtleXdvcmQucmVwbGFjZSgnLi4uJywnZXhjbHVzaXZlcmFuZ2UnKVxyXG5cdFx0a2V5d29yZCA9IGtleXdvcmQucmVwbGFjZSgnLi4nLCdpbmNsdXNpdmVyYW5nZScpXHJcblx0XHRrZXl3b3JkID0ga2V5d29yZC5yZXBsYWNlKCdIU0InLCdjb2xvck1vZGUnKVxyXG5cdFx0a3dsaW5rc1tucl0ucmVwbGFjZSgne30nLGtleXdvcmQpXHJcblxyXG5idWlsZEtleXdvcmRMaW5rID0gLT5cclxuXHRrd2wgPSB7fVxyXG5cdGt3bGlua3MgPSBbXVxyXG5cdGt3bGlua3MucHVzaCAnaHR0cHM6Ly9naXRodWIuY29tL0NocmlzdGVyTmlsc3Nvbi9wNURvam8vYmxvYi9tYXN0ZXIvUkVBRE1FLm1kI3t9J1xyXG5cdGt3bGlua3MucHVzaCAnaHR0cHM6Ly9wNWpzLm9yZy9yZWZlcmVuY2UvIy9wNS97fSdcclxuXHRrd2xpbmtzLnB1c2ggJ2h0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanNyZWYvanNyZWZfe30uYXNwJ1xyXG5cdGt3bGlua3MucHVzaCAnaHR0cHM6Ly9naXRodWIuY29tL0NocmlzdGVyTmlsc3Nvbi9wNURvam8vYmxvYi9tYXN0ZXIvXy5tZCN7fSdcclxuXHRzYXZlID0gKGluZGV4LHdvcmRzKSAtPiBrd2xbd29yZF0gPSBpbmRleCBmb3Igd29yZCBpbiB3b3Jkcy5zcGxpdCAnICdcclxuXHRzYXZlIDAsJ1tdIFwiXCIge30gLi4gLi4uIEAgLT4gY2xhc3MgdGV4dCB0ZXh0U2l6ZSB0ZXh0QWxpZ24gdGV4dEZvbnQgb3BlcmF0b3JzIGNvbXBhcmlzb25zIGxvZ2ljYWwgaWYgYmcgZmMgc2Mgc3cgcmQnXHJcblx0c2F2ZSAwLCdyYW5nZSBjaXJjbGUgZm9yIHdoaWxlIGFuZ2xlTW9kZSByZWFkVGV4dCByZWFkSW50IHJlYWRGbG9hdCdcclxuXHRzYXZlIDAsJ1BJIHNxcnQgYXRhbjIgYWJzIGNvcyBzaW4gbG9nMTAgRGF0ZSBhcmMgcmVjdCBlbGxpcHNlIHBvaW50IGxpbmUgdHJpYW5nbGUgcXVhZCBhcmd1bWVudHMnXHJcblx0c2F2ZSAwLCdwYXJzZUludCBwYXJzZUZsb2F0IGRpc3QgbmYgY29uc3RyYWluIGludCByb3VuZCBtYXAgbGVycCByYWRpYW5zIHJvdGF0ZSByZWR1Y2UnXHJcblx0c2F2ZSAxLCdyZWN0TW9kZSB0cmFuc2xhdGUgc2NhbGUgcHVzaCBwb3AgcmFuZG9tIG1pbGxpcyBjb2xvck1vZGUgSFNCIHN0cm9rZUNhcCBmaWxsJ1xyXG5cdHNhdmUgMiwnYnJlYWsgcmV0dXJuJ1xyXG5cdHNhdmUgMywnY29udGFpbnMgZmlsdGVyIGNvdW50QnkgaXNFcXVhbCBsYXN0IG1heCBtaW4gcGFpcnMgc29ydEJ5IGZpbmRJbmRleCdcclxuXHJcbm1vdXNlUHJlc3NlZCA9IC0+XHJcblx0aWYgbWVueS5jaGFwdGVyPT0nJyBvciBtZW55LmV4ZXJjaXNlPT0nJyB0aGVuIHJldHVyblxyXG5cdHAgPSBudWxsXHJcblx0aWYgMCA8PSBtb3VzZVgtNSA8PSAyMDAgYW5kIDAgPD0gbW91c2VZLTUgPD0gMjAwIHRoZW4gcCA9IFttb3VzZVgtNSxtb3VzZVktNV1cclxuXHRpZiAwIDw9IG1vdXNlWC01IDw9IDIwMCBhbmQgMCA8PSBtb3VzZVktMjEwIDw9IDIwMCB0aGVuIHAgPSBbbW91c2VYLTUsbW91c2VZLTIxMF1cclxuXHRpZiBwXHJcblx0XHRkaWN0ID0gZGF0YVttZW55LmNoYXB0ZXJdW21lbnkuZXhlcmNpc2VdLmNcclxuXHRcdGlmIGRpY3Q/XHJcblx0XHRcdG9iamVrdCA9IF8ua2V5cyhkaWN0KVswXVxyXG5cdFx0XHRjb2RlID0gb2JqZWt0ICsgXCIubW91c2VQcmVzc2VkKCN7cFswXX0sI3twWzFdfSk7IFwiICsgb2JqZWt0ICsgXCIuZHJhdygpOyBcIiArIG9iamVrdCArIFwiLnN0b3JlKClcIlxyXG5cdFx0XHRpZiBydW4xKGNvZGUpID09IHRydWVcclxuXHRcdFx0XHRydW4wKGNvZGUpXHJcblx0XHRcdFx0Y29tcGFyZSgpXHJcblxyXG5kZWNvcmF0ZSA9IChkaWN0KSAtPiAjIHtrbG9ja2E6IFwiZHJhd3xpbmNyX2hvdXJcIn1cclxuXHRpZiBkaWN0PT11bmRlZmluZWQgdGhlbiByZXR1cm4ge31cclxuXHRpZiBkaWN0PT1udWxsIHRoZW4gcmV0dXJuIHt9XHJcblx0cmVzID0ge31cclxuXHRmb3Igb2JqZWt0LCBzIG9mIGRpY3RcclxuXHRcdG1ldGhvZHMgPSBzLnNwbGl0IFwifFwiXHJcblx0XHRyZXNbXCJkcmF3KClcIl0gPSBvYmpla3QgKyBcIi5kcmF3KCk7IFwiICsgb2JqZWt0ICsgXCIuc3RvcmUoKVwiXHJcblx0XHRyZXNbbWV0aG9kXSA9IG9iamVrdCArIFwiLlwiICsgbWV0aG9kICsgXCI7IFwiICsgb2JqZWt0ICsgXCIuZHJhdygpOyBcIiArIG9iamVrdCArIFwiLnN0b3JlKClcIiBmb3IgbWV0aG9kIGluIG1ldGhvZHNcclxuXHRyZXNcclxuXHJcbmNoYW5nZUxheW91dCA9IC0+XHJcblx0dyA9ICQod2luZG93KS53aWR0aCgpXHJcblx0JChcIi5Db2RlTWlycm9yXCIpLndpZHRoIHctNDI1XHJcblx0JChcIiNjYW52YXNcIikuY3NzIHt0b3A6IDAsIGxlZnQ6IDIwNSwgcG9zaXRpb246J2Fic29sdXRlJ31cclxuXHQkKFwiI21zZ1wiKS53aWR0aCB3LTQzMFxyXG5cdCQoXCIjaW5wdXRcIikud2lkdGggdy0yMThcclxuXHJcbnJlc2l6ZVRpbWVyID0gMFxyXG4kKHdpbmRvdykucmVzaXplIC0+XHJcblx0XHRjbGVhclRpbWVvdXQgcmVzaXplVGltZXJcclxuXHRcdHJlc2l6ZVRpbWVyID0gc2V0VGltZW91dCBjaGFuZ2VMYXlvdXQsIDEwXHJcblxyXG51cGRhdGVUYWJsZXMgPSAtPlxyXG5cdG1lbnkucmVuc2EoKVxyXG5cdG1lbnkudHJhdmVyc2UoKVxyXG5cclxuc2V0dXAgPSAtPlxyXG5cclxuXHRtZW55ID0gbmV3IE1lbnUgZGF0YSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgXCJtZW55XCJcclxuXHR1cGRhdGVUYWJsZXMoKVxyXG5cclxuXHR0aW1lc3RhbXAgPSBtaWxsaXMoKVxyXG5cdGMgPSBjcmVhdGVDYW52YXMgNSsyMDErNSwgMyoyMDErMjBcclxuXHJcblx0YnVpbGRLZXl3b3JkTGluaygpXHJcblxyXG5cdGdhcCA9IDUgKiB3aWR0aCAqIDRcclxuXHRibG9jayA9IDIwMSAqIHdpZHRoICogNFxyXG5cclxuXHRwaXhlbERlbnNpdHkgMVxyXG5cdGMucGFyZW50ICdjYW52YXMnXHJcblxyXG5cdG1zZyA9ICQoJyNtc2cnKVxyXG5cclxud2luZG93Lm9uYmVmb3JldW5sb2FkID0gLT5cclxuXHRyZXR1cm4gaWYgZG9jdW1lbnQuVVJMLmluZGV4T2YoXCJyZWNvcmRcIikgPT0gLTFcclxuXHRyZXMgPSBbXVxyXG5cdGZvciBrZXkxLGNoYXB0ZXIgb2YgZGF0YVxyXG5cdFx0Zm9yIGtleTIsZXhlcmNpc2Ugb2YgY2hhcHRlclxyXG5cdFx0XHRpZiBleGVyY2lzZS5kXHJcblx0XHRcdFx0cmVzLnB1c2ggXCIjIyMgI3trZXkxfSAjIyMgI3trZXkyfVxcblwiXHJcblx0XHRcdFx0Zm9yIHMsaSBpbiBleGVyY2lzZS5kXHJcblx0XHRcdFx0XHRyZXMucHVzaCBcIj09PSAje2l9XFxuXCJcclxuXHRcdFx0XHRcdHJlcy5wdXNoIHMrXCJcXG5cIlxyXG5cdGJsb2IgPSBuZXcgQmxvYiByZXMsIHt0eXBlOiBcInRleHQvcGxhaW47Y2hhcnNldD11dGYtOFwifVxyXG5cdHNhdmVBcyBibG9iLCBcInJlY29yZGluZy50eHRcIlxyXG5cdHRydWVcclxuXHJcbndpbmRvdy5vbmxvYWQgPSAtPlxyXG5cclxuXHR0YSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkIFwiY29kZVwiXHJcblxyXG5cdG15Q29kZU1pcnJvciA9IENvZGVNaXJyb3IuZnJvbVRleHRBcmVhIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29kZVwiKSwge1xyXG5cdFx0bGluZU51bWJlcnM6IHRydWUsXHJcblx0XHRtb2RlOiBcImNvZmZlZXNjcmlwdFwiLFxyXG5cdFx0a2V5TWFwOiBcInN1YmxpbWVcIixcclxuXHRcdHRoZW1lOiBcImRyYWN1bGFcIixcclxuXHRcdGF1dG9DbG9zZUJyYWNrZXRzOiB0cnVlLFxyXG5cdFx0bGluZVdpc2VDb3B5Q3V0OiB0cnVlLFxyXG5cdFx0dGFiU2l6ZTogMixcclxuXHRcdGluZGVudFdpdGhUYWJzOiB0cnVlLFxyXG5cdFx0bWF0Y2hCcmFja2V0cyA6IHRydWUsXHJcblx0fVxyXG5cclxuXHQkKFwiLkNvZGVNaXJyb3JcIikuY3NzICdmb250LXNpemUnLFwiMTZwdFwiXHJcblx0bXlDb2RlTWlycm9yLm9uIFwiY2hhbmdlXCIsIGVkaXRvcl9jaGFuZ2VcclxuXHJcblx0bWVueS5jaGFwdGVyID0gXCJcIlxyXG5cdG1lbnkuZXhlcmNpc2UgPSBcIlwiXHJcblxyXG5cdG15Q29kZU1pcnJvci5zZXRWYWx1ZSAnIyBLbGlja2EgZsO2cnN0IHDDpSBMMTpcXG4jIEtsaWNrYSBkw6RyZWZ0ZXIgcMOlIEJhY2tncm91bmQxJ1xyXG5cclxuXHRteUNvZGVNaXJyb3IuZm9jdXMoKVxyXG5cdHdpbmRvdy5yZXNpemVUbyAxMDAwLDc1MFxyXG5cdGNoYW5nZUxheW91dCgpXHJcblx0bWVueS5zZXRTdGF0ZSAwXHJcblxyXG5zYXZlVG9LZXlTdG9yYWdlID0gKGIpIC0+XHJcblx0cyA9IFwiXCJcclxuXHRmb3IgbGluZSBpbiBiLnNwbGl0ICdcXG4nXHJcblx0XHRpZiBsaW5lLmluZGV4T2YoXCIjXCIpICE9IDBcclxuXHRcdFx0cyArPSBsaW5lXHJcblx0cGxhY2UgPSBkYXRhW21lbnkuY2hhcHRlcl1bbWVueS5leGVyKCldXHJcblx0aWYgIXBsYWNlLmRcclxuXHRcdHBsYWNlLmQgPSBbXVxyXG5cdHBsYWNlLmQucHVzaCBzXHJcblxyXG5lZGl0b3JfY2hhbmdlID0gLT5cclxuXHRyZXNldCgpXHJcblx0aWYgbWVueS5leGVyKCk9PScnIHRoZW4gcmV0dXJuXHJcblx0aWYgMCA9PSBfLnNpemUgbWVueS5jYWxsc1xyXG5cdFx0Y29kZSA9IFwiXCJcclxuXHRlbHNlICMgdHJhbnNwaWxlLCBkcmF3XHJcblx0XHRjb2RlID0gbWVueS5jYWxsc1tcImRyYXcoKVwiXVxyXG5cclxuXHRkY2UgPSBkYXRhW21lbnkuY2hhcHRlcl1bbWVueS5leGVyKCldXHJcblx0aWYgZGNlIGFuZCBkY2UuYSBhbmQgXy5zaXplKGRjZS5hLmMpID4gMFxyXG5cdFx0aWYgZmFsc2UgPT0gcnVuMSBjb2RlIHRoZW4gcmV0dXJuICMgYsO2ciBub3JtYWx0IHZhcmEgdHJ1ZVxyXG5cdHJlcyA9IHJ1bjAgY29kZVxyXG5cclxuXHQjaWYgcmVzICMgc3BhcmEga8OkbGxrb2QgRUZURVIgZXhla3ZlcmluZ1xyXG5cdHNhdmVTb3VyY2VDb2RlKClcclxuXHRjb21wYXJlKClcclxuXHJcbnNhdmVTb3VyY2VDb2RlID0gLT5cdGxvY2FsU3RvcmFnZVttZW55LmV4ZXIoKSArIFwiL2RcIl0gPSBteUNvZGVNaXJyb3IuZ2V0VmFsdWUoKVxyXG5cclxucnVuMCA9IChjb2RlKSAtPlxyXG5cdGlmIG1lbnkuZXhlcigpPT1cIlwiIHRoZW4gcmV0dXJuIGZhbHNlXHJcblx0c3JjID0gbXlDb2RlTWlycm9yLmdldFZhbHVlKClcclxuXHRjaGVja0JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2hrQXV0b1J1blwiKVxyXG5cdGlmIGNoZWNrQm94LmNoZWNrZWQgdGhlbiBydW4gMCwgc3JjICsgXCJcXG5cIiArIGNvZGUgZWxzZSBydW4gMCwgXCJcXG5cIiArIGNvZGVcclxuXHJcbnJ1bjEgPSAoY29kZSkgLT5cclxuXHRpZiBtZW55LmV4ZXIoKT09XCJcIiB0aGVuIHJldHVyblxyXG5cdHJ1biAxLCBkYXRhW21lbnkuY2hhcHRlcl1bbWVueS5leGVyKCldLmEgKyBcIlxcblwiICsgY29kZVxyXG5cclxucmVzZXQgPSAtPlxyXG5cdHJlc2V0TWF0cml4KClcclxuXHRjb2xvck1vZGUgUkdCLDI1NVxyXG5cdGFuZ2xlTW9kZSBSQURJQU5TXHJcblx0cmVjdE1vZGUgQ09STkVSXHJcblx0c3Ryb2tlQ2FwIFJPVU5EXHJcblx0dGV4dEFsaWduIExFRlQsQkFTRUxJTkVcclxuXHRzbW9vdGgoKSAjIHBnYSBTdXBlckNpcmNsZVxyXG5cdGJnIDBcclxuXHRmYyAwXHJcblx0c2MgMVxyXG5cdHN3IDFcclxuXHJcbnJ1biA9IChfbiwgY29mZmVlKSAtPlxyXG5cdHJlc2V0KClcclxuXHRwdXNoKClcclxuXHR0cmFuc2xhdGUgNSw1XHJcblx0Z3JpZCgpXHJcblxyXG5cdHNldE1zZyBcIlwiLCBfblxyXG5cclxuXHRpZiBtZW55LmV4ZXJjaXNlID09IFwiXCIgXHJcblx0XHRwb3AoKVxyXG5cdFx0cmV0dXJuIHRydWVcclxuXHJcblx0dHJ5XHJcblx0XHRjb2RlID0gdHJhbnNwaWxlIGNvZmZlZVxyXG5cclxuXHRcdHRyeVxyXG5cdFx0XHRldmFsIGNvZGVcclxuXHRcdFx0YnVmZmVyWzEtX25dID0gc3RvcmUoKVxyXG5cdFx0XHRwb3AoKVxyXG5cdFx0XHRyZXR1cm4gdHJ1ZVxyXG5cdFx0Y2F0Y2ggZVxyXG5cdFx0XHRzZXRNc2cgZSwgX25cclxuXHRcdFx0cG9wKClcclxuXHRcdFx0cmV0dXJuIGZhbHNlXHJcblx0Y2F0Y2ggZVxyXG5cdFx0c2V0TXNnIGUsIF9uXHJcblx0XHRwb3AoKVxyXG5cdFx0cmV0dXJuIGZhbHNlXHJcblxyXG5zdG9yZSA9IC0+XHJcblx0bG9hZFBpeGVscygpXHJcblx0cGl4ZWxzW2dhcC4uLmdhcCArIGJsb2NrXVxyXG5cclxuZmV0Y2ggPSAoYnVmZmVyLHkwKSAtPlxyXG5cdGxvYWRQaXhlbHMoKVxyXG5cdGZvciBpIGluIHJhbmdlIGJsb2NrXHJcblx0XHRwaXhlbHNbZ2FwICsgKGdhcCtibG9jaykqeTAgKyBpXSA9IGJ1ZmZlcltpXVxyXG5cdHVwZGF0ZVBpeGVscygpXHJcblxyXG5maXhfZnJhbWVzID0gLT5cclxuXHRsb2FkUGl4ZWxzKClcclxuXHRmb3IgayBpbiByYW5nZSA0XHJcblx0XHRmb3IgaSBpbiByYW5nZSBnYXBcclxuXHRcdFx0cGl4ZWxzWyhnYXArYmxvY2spKmsraV0gPSAxMjgtNjRcclxuXHRmb3IgaiBpbiByYW5nZSBoZWlnaHQgIyAzKjIwMSsyMFxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgMjBcclxuXHRcdFx0cGl4ZWxzW2oqd2lkdGgqNCtpXSA9IDEyOC02NFxyXG5cdFx0XHRwaXhlbHNbaip3aWR0aCo0KzIwNio0K2ldID0gMTI4LTY0XHJcblx0dXBkYXRlUGl4ZWxzKClcclxuXHJcbmNvbXBhcmUgPSAtPiAgIyBMw6RnZyBlbiB0aW1lciBww6UgZGVubmEuIELDtnIgdsOkbnRhIG7DpWdvbiBzZWt1bmRcclxuXHRhID0gYnVmZmVyWzBdXHJcblx0YiA9IGJ1ZmZlclsxXVxyXG5cdGMgPSBhWy4uXVxyXG5cclxuXHRpZiBtc2cudmFsKCkgPT0gJydcclxuXHRcdGZvciBpIGluIHJhbmdlIGJsb2NrLzRcclxuXHRcdFx0aTQgPSA0KmlcclxuXHRcdFx0Y1tpNCswXSA9IGFicyBjW2k0KzBdIC0gYltpNCswXVxyXG5cdFx0XHRjW2k0KzFdID0gYWJzIGNbaTQrMV0gLSBiW2k0KzFdXHJcblx0XHRcdGNbaTQrMl0gPSBhYnMgY1tpNCsyXSAtIGJbaTQrMl1cclxuXHRcdFx0Y1tpNCszXSA9IDI1NVxyXG5cclxuXHRmZXRjaCBhLCAwXHJcblx0aWYgbXNnLnZhbCgpID09ICcnXHJcblx0XHRmZXRjaCBiLCAxXHJcblx0XHRmZXRjaCBjLCAyXHJcblx0Zml4X2ZyYW1lcygpXHJcblxyXG50YWJsZUNsZWFyID0gLT4gJChcIiN0YWJlbGwgdHJcIikucmVtb3ZlKClcclxuXHJcbnRhYmxlQXBwZW5kID0gKHQsIGNhbGwsIGV4cGVjdGVkLCBhY3R1YWwpIC0+ICMgZXhha3QgdHJlIHJhZGVyXHJcblx0cm93ID0gdC5pbnNlcnRSb3cgLTFcclxuXHRjZWxsMSA9IHJvdy5pbnNlcnRDZWxsIC0xXHJcblx0Y2VsbDIgPSByb3cuaW5zZXJ0Q2VsbCAtMVxyXG5cdGNlbGwxLmlubmVySFRNTCA9IGNhbGxcclxuXHRjZWxsMi5pbm5lckhUTUwgPSBKU09OLnN0cmluZ2lmeShleHBlY3RlZClcclxuXHRjZWxsMi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzAwRkYwMCdcclxuXHJcblx0aWYgXy5pc0VxdWFsKGV4cGVjdGVkLCBhY3R1YWwpIHRoZW4gcmV0dXJuXHJcblxyXG5cdHJvdyA9IHQuaW5zZXJ0Um93IC0xXHJcblx0ZHVtbXkgPSByb3cuaW5zZXJ0Q2VsbCAtMVxyXG5cdGNlbGw0ID0gcm93Lmluc2VydENlbGwgLTFcclxuXHRjZWxsNC5pbm5lckhUTUwgPSBKU09OLnN0cmluZ2lmeShhY3R1YWwpXHJcblx0Y2VsbDQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyNGRjAwMDAnXHJcblxyXG5cdHJvdyA9IHQuaW5zZXJ0Um93IC0xXHJcblx0ZHVtbXkgPSByb3cuaW5zZXJ0Q2VsbCAtMVxyXG5cdGNlbGw2ID0gcm93Lmluc2VydENlbGwgLTFcclxuXHRjZWxsNi5pbm5lckhUTUwgPSBmaXJzdERpZmYgY2VsbDIuaW5uZXJIVE1MLGNlbGw0LmlubmVySFRNTFxyXG5cclxuZmlyc3REaWZmID0gKGEsYikgLT4gIyByZXR1cm4gaW5kZXggYW5kIGRpZmZlcmluZyBjaGFyYWN0ZXJzXHJcblx0cmVzID0gJydcclxuXHRpZiBhPT1iIHRoZW4gcmV0dXJuICcnXHJcblx0Zm9yIGkgaW4gcmFuZ2UgXy5taW4gW2EubGVuZ3RoLGIubGVuZ3RoXVxyXG5cdFx0cmVzICs9IGlmIGFbaV0gPT0gYltpXSB0aGVuICfCtycgZWxzZSAnXidcclxuXHRyZXNcclxuXHJcbmZpbGxUYWJsZSA9IChhLGIpIC0+XHJcblx0dHJ5XHJcblx0XHRhID0gSlNPTi5wYXJzZSBsb2NhbFN0b3JhZ2VbYV1cclxuXHRcdGIgPSBKU09OLnBhcnNlIGxvY2FsU3RvcmFnZVtiXVxyXG5cdFx0dGFibGVDbGVhcigpXHJcblx0XHRrZXlzID0gW11cclxuXHRcdGtleXMucHVzaCBrZXkgZm9yIGtleSx2YWx1ZSBvZiBhXHJcblx0XHRrZXlzLnB1c2gga2V5IGZvciBrZXksdmFsdWUgb2YgYlxyXG5cdFx0c29ydCBrZXlzXHJcblx0XHRrZXlzID0gXy51bmlxIGtleXNcclxuXHJcblx0XHRmb3Iga2V5IGluIGtleXNcclxuXHRcdFx0aWYga2V5ICE9ICdfbmFtZScgYW5kICBrZXkgIT0gJ190eXBlJ1xyXG5cdFx0XHRcdHRhYmxlQXBwZW5kIHRhYmVsbCwgXCJAXCIgKyBrZXksdW5tYXJrKGFba2V5XSksdW5tYXJrKGJba2V5XSlcclxuXHRjYXRjaFxyXG5cclxudW5tYXJrID0gKG9iaikgLT5cclxuXHRpZiBfLmlzQXJyYXkob2JqKSB0aGVuIHJldHVyblx0KHVubWFyayBpdGVtIGZvciBpdGVtIGluIG9iaikgIyBhcnJheVxyXG5cdGlmIF8uaXNPYmplY3Qgb2JqXHJcblx0XHRyZXMgPSB7fVxyXG5cdFx0Zm9yIGtleSx2YWx1ZSBvZiBvYmpcclxuXHRcdFx0cmVzW2tleV0gPSB1bm1hcmsodmFsdWUpICMgaWYga2V5ICE9ICdfdHlwZSdcclxuXHRcdHJldHVybiByZXNcclxuXHRvYmoiXX0=
//# sourceURL=c:\github\p5Dojo\coffee\p5dojo.coffee