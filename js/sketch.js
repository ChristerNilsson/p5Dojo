// Generated by CoffeeScript 1.11.1
var bg, bgc, block, buffer, buildKeywordLink, buildLink, call, calls, changeLayout, chapter, circle, co, compare, decorate, editor_change, exercise, fc, fcc, fetch, fillSelect, fillTable, fixColor, fix_frames, gap, grid, ip, kwl, kwlinks, linkAppend, linksClear, mousePressed, msg, myCodeMirror, myprint, range, rd, renew, reset, resizeTimer, run, run0, run1, saveSourceCode, saveToKeyStorage, sc, scc, sel1, sel1change, sel1click, sel2, sel2change, sel2click, sel3, sel3change, sel3click, sel4, sel4change, sel4click, setLinks, setMsg, setup, store, sw, tableAppend, tableClear, tcc, unmark;

myCodeMirror = null;

msg = null;

sel1 = null;

sel2 = null;

sel3 = null;

sel4 = null;

chapter = "";

exercise = "";

call = '';

calls = {};

renew = null;

kwl = {};

kwlinks = [];

gap = 0;

block = 0;

buffer = [[], [], []];

setMsg = function(e, nr) {
  var p, s;
  if (e === '') {
    msg.val("");
    msg.hide();
  } else {
    s = e.toString();
    p = s.indexOf(':');
    if (p !== -1) {
      s = s.substr(p + 1);
    }
    s = s.replace(/\t/g, '  ');
    msg.val(s + ' (' + e.name + ')' + (nr === 1 ? " (in A)" : ""));
    msg.show();
  }
  return msg.css('background-color', e === '' ? '#FFFFFF' : '#FF0000');
};

grid = function() {
  var i, l, len, ref;
  push();
  bg(0.25);
  sc(0.5);
  ref = range(11);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    line(0, 20 * i, 200, 20 * i);
    line(20 * i, 0, 20 * i, 200);
  }
  return pop();
};

myprint = function() {
  return print(Array.prototype.slice.call(arguments).join(" "));
};

co = function() {
  return fixColor(arguments);
};

ip = function(y1, y2, x, x1, x2) {
  if (arguments.length === 3) {
    x1 = 0;
    x2 = 9;
  }
  return map(x, x1, x2, y1, y2);
};

fixColor = function(args) {
  var a, b, g, n, r;
  n = args.length;
  r = 0;
  g = 0;
  b = 0;
  a = 1;
  if (n === 1) {
    r = args[0];
    g = r;
    b = r;
  } else if (n === 3) {
    r = args[0];
    g = args[1];
    b = args[2];
  } else if (n === 4) {
    r = args[0];
    g = args[1];
    b = args[2];
    a = args[3];
  }
  return color(255 * r, 255 * g, 255 * b, 255 * a);
};

bg = function() {
  return background(fixColor(arguments));
};

fc = function() {
  var n;
  n = arguments.length;
  if (n === 0) {
    return noFill();
  } else {
    return fill(fixColor(arguments));
  }
};

sc = function() {
  var n;
  n = arguments.length;
  if (n === 0) {
    return noStroke();
  } else {
    return stroke(fixColor(arguments));
  }
};

bgc = function(cc) {
  return bg(cc % 2, int(cc / 2) % 2, int(cc / 4));
};

fcc = function(cc) {
  return fc(cc % 2, int(cc / 2) % 2, int(cc / 4));
};

scc = function(cc) {
  return sc(cc % 2, int(cc / 2) % 2, int(cc / 4));
};

tcc = function(cc) {
  return fcc([7, 7, 0, 0, 7, 0, 0, 0][cc]);
};

sw = function(n) {
  return strokeWeight(n);
};

circle = function(x, y, r) {
  return ellipse(x, y, 2 * r, 2 * r);
};

rd = function(vinkel) {
  return rotate(radians(vinkel));
};

range = _.range;

fillSelect = function(sel, dict) {
  var key, results;
  sel.empty();
  if (sel === sel2) {
    sel.append($("<option>").attr('value', 'BACK').text(chapter));
  }
  results = [];
  for (key in dict) {
    results.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results;
};

sel1change = function(sel) {
  chapter = sel.value;
  exercise = "";
  call = "";
  calls = {};
  fillSelect(sel2, data[chapter]);
  return sel2.show();
};

sel2change = function(sel) {
  var calls_without_draw, keyword, keywords, l, len, src;
  if (sel.value === 'BACK') {
    exercise = "";
    myCodeMirror.setValue("");
    tableClear();
    linksClear();
    bg(0.5);
    sel2.hide();
    return;
  }
  exercise = sel.value;
  if (exercise === "") {
    myCodeMirror.setValue("");
    bg(0.5);
    return;
  }
  sel3.empty();
  sel3.append($("<option>").attr('value', 'BACK').text(exercise));
  keywords = data[chapter][exercise]["k"].split(' ');
  keywords.sort();
  for (l = 0, len = keywords.length; l < len; l++) {
    keyword = keywords[l];
    sel3.append($("<option>").attr('value', keyword).text(keyword));
  }
  sel3.show();
  call = "";
  calls = decorate(data[chapter][exercise]["c"]);
  setLinks();
  calls_without_draw = _.omit(calls, 'draw()');
  fillSelect(sel4, calls_without_draw);
  src = localStorage[exercise + "/d"];
  if (src === void 0 || src === null || src === '') {
    src = data[chapter][exercise]["b"];
    localStorage[exercise + "/d"] = src;
    localStorage[exercise + "/v"] = data[chapter][exercise]["v"];
  }
  myCodeMirror.setValue(src);
  if ((localStorage[exercise + "/v"] != null) && localStorage[exercise + "/v"] !== data[chapter][exercise]["v"]) {
    renew.show();
  } else {
    renew.hide();
  }
  tableClear();
  if (calls != null) {
    sel4.val("draw()").change();
    call = calls["draw()"];
  }
  run1();
  run0();
  myCodeMirror.focus();
  return compare('sel2change');
};

sel3click = function(sel) {
  var url, win;
  if (sel.value === 'BACK') {
    sel3.hide();
    return;
  }
  url = buildLink(sel.value);
  if (url != null) {
    win = window.open(url, '_blank');
    return win.focus();
  }
};

sel3change = function(sel) {};

sel4change = function(sel) {};

sel1click = function(sel) {
  return sel2.show();
};

sel2click = function(sel) {
  if (sel.value === 'BACK') {
    return $("#sel2").hide();
  }
};

sel4click = function(sel) {
  if (calls != null) {
    call = calls[sel.value];
  }
  if (run1() === true) {
    run0();
  }
  return compare('sel4click');
};

buildLink = function(keyword) {
  var nr;
  if (keyword.indexOf('_.') === 0) {
    keyword = keyword.replace('_.', '');
  }
  print(keyword);
  nr = kwl[keyword];
  if (nr === 0) {
    keyword = keyword.toLowerCase();
  }
  if (nr === null) {
    print(keyword);
    return null;
  } else {
    keyword = keyword.replace('[]', 'array');
    keyword = keyword.replace('""', 'string');
    keyword = keyword.replace('{}', 'object');
    keyword = keyword.replace('->', 'pil');
    keyword = keyword.replace('@', 'this');
    keyword = keyword.replace('...', 'exclusiverange');
    keyword = keyword.replace('..', 'inclusiverange');
    keyword = keyword.replace('HSB', 'colorMode');
    return kwlinks[nr].replace('{}', keyword);
  }
};

buildKeywordLink = function() {
  var save;
  kwl = {};
  kwlinks = [];
  kwlinks.push('https://github.com/ChristerNilsson/p5Dojo/blob/master/README.md#{}');
  kwlinks.push('https://p5js.org/reference/#/p5/{}');
  kwlinks.push('https://www.w3schools.com/jsref/jsref_{}.asp');
  kwlinks.push('https://github.com/ChristerNilsson/p5Dojo/blob/master/_.md#{}');
  save = function(index, words) {
    var l, len, ref, results, word;
    ref = words.split(' ');
    results = [];
    for (l = 0, len = ref.length; l < len; l++) {
      word = ref[l];
      results.push(kwl[word] = index);
    }
    return results;
  };
  save(0, '[] "" {} .. ... @ -> class text operators comparisons logical if bg fc sc sw range circle for while rd readText readInt readFloat');
  save(0, 'PI sqrt cos sin log10 Date');
  save(0, 'parseInt parseFloat dist nf constrain int round map lerp radians reduce');
  save(1, 'arc rect rectMode ellipse point line triangle quad rotate translate scale push pop');
  save(1, 'random millis colorMode HSB strokeCap');
  save(2, 'break return');
  return save(3, 'contains filter countBy isEqual last max min pairs sortBy');
};

mousePressed = function() {
  var dict, objekt, p, ref, ref1, ref2, ref3;
  p = null;
  if ((0 <= (ref = mouseX - 5) && ref <= 200) && (0 <= (ref1 = mouseY - 5) && ref1 <= 200)) {
    p = [mouseX - 5, mouseY - 5];
  }
  if ((0 <= (ref2 = mouseX - 5) && ref2 <= 200) && (0 <= (ref3 = mouseY - 210) && ref3 <= 200)) {
    p = [mouseX - 5, mouseY - 210];
  }
  if (p) {
    dict = data[chapter][exercise]["c"];
    if (dict != null) {
      objekt = _.keys(dict)[0];
      call = objekt + (".mousePressed(" + p[0] + "," + p[1] + "); ") + objekt + ".draw(); " + objekt + ".store()";
      if (run1() === true) {
        run0();
        return compare('mousePressed');
      }
    }
  }
};

setLinks = function() {
  var link, ref, results, text;
  linksClear();
  linkAppend(links, "https://github.com/ChristerNilsson/p5Dojo/blob/master/README.md", "p5Dojo");
  linkAppend(links, "https://p5js.org/reference", "p5");
  linkAppend(links, "http://coffeescript.org", "Coffeescript");
  linkAppend(links, "https://www.w3schools.com/js", "Javascript");
  linkAppend(links, "https://github.com/ChristerNilsson/Nilsson/blob/master/README.md", "Nilsson");
  linkAppend(links, "https://christernilsson.github.io/p5Color", "p5Color");
  linkAppend(links, "http://underscorejs.org/", "Underscore");
  ref = data[chapter][exercise]["e"];
  results = [];
  for (text in ref) {
    link = ref[text];
    results.push(linkAppend(links, link, text));
  }
  return results;
};

linksClear = function() {
  return $("#links tr").remove();
};

linkAppend = function(t, link, text) {
  var cell1, d, dd, row, s;
  d = function(s) {
    return "'" + s + "'";
  };
  dd = function(s) {
    return '"' + s + '"';
  };
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  s = '<a href=' + d(link);
  s += ' target=' + d('_blank');
  s += ' onmouseover=' + d('this.style.color=' + dd('yellow') + ';');
  s += ' onmouseout=' + d('this.style.color=' + dd('black') + ';');
  s += '>';
  s += text;
  s += '</a>';
  return cell1.innerHTML = s;
};

decorate = function(dict) {
  var l, len, method, methods, objekt, res, s;
  if (dict === void 0) {
    return {};
  }
  if (dict === null) {
    return {};
  }
  res = {};
  for (objekt in dict) {
    s = dict[objekt];
    methods = s.split("|");
    res["draw()"] = objekt + ".draw(); " + objekt + ".store()";
    for (l = 0, len = methods.length; l < len; l++) {
      method = methods[l];
      res[method] = objekt + "." + method + "; " + objekt + ".draw(); " + objekt + ".store()";
    }
  }
  return res;
};

changeLayout = function() {
  var w;
  w = $(window).width();
  $(".CodeMirror").width(w - 425);
  $("#canvas").css({
    top: 0,
    left: 205,
    position: 'absolute'
  });
  $("#msg").width(w - 430);
  return $("#tabell").width(w - 215);
};

resizeTimer = 0;

$(window).resize(function() {
  clearTimeout(resizeTimer);
  return resizeTimer = setTimeout(changeLayout, 10);
});

setup = function() {
  var c, timestamp;
  timestamp = millis();
  c = createCanvas(5 + 201 + 5, 3 * 201 + 20);
  buildKeywordLink();
  gap = 5 * width * 4;
  block = 201 * width * 4;
  pixelDensity(1);
  c.parent('canvas');
  msg = $('#msg');
  sel1 = $('#sel1');
  sel2 = $('#sel2');
  sel3 = $('#sel3');
  sel4 = $('#sel4');
  sel2.hide();
  sel3.hide();
  fillSelect(sel1, data);
  renew = createButton('Renew');
  renew.position(352, 644);
  renew.hide();
  return renew.mousePressed(function() {
    print(myCodeMirror.getValue());
    myCodeMirror.setValue(data[chapter][exercise]["b"]);
    localStorage[exercise + "/" + 'v'] = data[chapter][exercise]["v"];
    localStorage[exercise + "/" + 'd'] = data[chapter][exercise]["b"];
    return renew.hide();
  });
};

window.onbeforeunload = function() {
  var blob, i, key1, key2, l, len, ref, res, s;
  if (document.URL.indexOf("record") === -1) {
    return;
  }
  res = [];
  for (key1 in data) {
    chapter = data[key1];
    for (key2 in chapter) {
      exercise = chapter[key2];
      if (exercise.d) {
        res.push("### " + key1 + " ### " + key2 + "\n");
        ref = exercise.d;
        for (i = l = 0, len = ref.length; l < len; i = ++l) {
          s = ref[i];
          res.push("=== " + i + "\n");
          res.push(s + "\n");
        }
      }
    }
  }
  blob = new Blob(res, {
    type: "text/plain;charset=utf-8"
  });
  saveAs(blob, "recording.txt");
  return true;
};

window.onload = function() {
  var ta;
  ta = document.getElementById("code");
  myCodeMirror = CodeMirror.fromTextArea(document.getElementById("code"), {
    lineNumbers: true,
    mode: "coffeescript",
    keyMap: "sublime",
    theme: "dracula",
    autoCloseBrackets: true,
    lineWiseCopyCut: true,
    tabSize: 2,
    indentWithTabs: true
  });
  $(".CodeMirror").css('font-size', "16pt");
  myCodeMirror.on("change", editor_change);
  chapter = "";
  exercise = "";
  myCodeMirror.focus();
  window.resizeTo(1000, 750);
  return changeLayout();
};

saveToKeyStorage = function(b) {
  var l, len, line, place, ref, s;
  s = "";
  ref = b.split('\n');
  for (l = 0, len = ref.length; l < len; l++) {
    line = ref[l];
    if (line.indexOf("#") !== 0) {
      s += line;
    }
  }
  place = data[chapter][exercise];
  if (!place.d) {
    place.d = [];
  }
  return place.d.push(s);
};

editor_change = function() {
  var dce, res;
  if (_.size(calls) === 0) {
    call = "";
  } else {
    call = calls["draw()"];
  }
  dce = data[chapter][exercise];
  if (dce && dce["a"] && _.size(dce["a"].c) > 0) {
    if (run1() === false) {
      return;
    }
  }
  res = run0();
  if (res) {
    saveSourceCode();
  }
  return compare('editor_change');
};

saveSourceCode = function() {
  return localStorage[exercise + "/d"] = myCodeMirror.getValue();
};

run0 = function() {
  var src;
  if (exercise === "") {
    return false;
  }
  src = myCodeMirror.getValue();
  if (src === "") {
    return true;
  }
  return run(0, src + "\n" + call);
};

run1 = function() {
  if (exercise === "") {
    return;
  }
  return run(1, data[chapter][exercise]["a"] + "\n" + call);
};

reset = function() {
  colorMode(RGB, 255);
  angleMode(RADIANS);
  sw(1);
  strokeCap(ROUND);
  textAlign(LEFT, BASELINE);
  bg(0);
  fc(0);
  sc(1);
  return grid();
};

run = function(_n, coffee) {
  var code, e;
  resetMatrix();
  rectMode(CORNER);
  push();
  translate(5, 5);
  reset();
  setMsg("", _n);
  if (exercise === "") {
    return true;
  }
  try {
    code = transpile(coffee);
    try {
      eval(code);
      buffer[1 - _n] = store();
      pop();
      return true;
    } catch (error) {
      e = error;
      setMsg(e, _n);
      pop();
      return false;
    }
  } catch (error) {
    e = error;
    setMsg(e, _n);
    pop();
    return false;
  }
};

store = function() {
  loadPixels();
  return pixels.slice(gap, gap + block);
};

fetch = function(buffer, y0) {
  var i, l, len, ref;
  loadPixels();
  ref = range(block);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    pixels[gap + (gap + block) * y0 + i] = buffer[i];
  }
  return updatePixels();
};

fix_frames = function() {
  var i, j, k, l, len, len1, len2, len3, m, o, q, ref, ref1, ref2, ref3;
  loadPixels();
  ref = range(4);
  for (l = 0, len = ref.length; l < len; l++) {
    k = ref[l];
    ref1 = range(gap);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      i = ref1[m];
      pixels[(gap + block) * k + i] = 128 - 64;
    }
  }
  ref2 = range(height);
  for (o = 0, len2 = ref2.length; o < len2; o++) {
    j = ref2[o];
    ref3 = range(20);
    for (q = 0, len3 = ref3.length; q < len3; q++) {
      i = ref3[q];
      pixels[j * width * 4 + i] = 128 - 64;
      pixels[j * width * 4 + 206 * 4 + i] = 128 - 64;
    }
  }
  return updatePixels();
};

compare = function(message) {
  var a, b, c, i, i4, l, len, ref;
  a = buffer[0];
  b = buffer[1];
  c = a.slice(0);
  if (msg.val() === '') {
    ref = range(block / 4);
    for (l = 0, len = ref.length; l < len; l++) {
      i = ref[l];
      i4 = 4 * i;
      c[i4 + 0] = abs(c[i4 + 0] - b[i4 + 0]);
      c[i4 + 1] = abs(c[i4 + 1] - b[i4 + 1]);
      c[i4 + 2] = abs(c[i4 + 2] - b[i4 + 2]);
      c[i4 + 3] = 255;
    }
  }
  fetch(a, 0);
  if (msg.val() === '') {
    fetch(b, 1);
    fetch(c, 2);
  }
  return fix_frames();
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(t, call, expected, actual) {
  var cell1, cell2, cell3, row;
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell1.innerHTML = call;
  cell2 = row.insertCell(-1);
  cell2.innerHTML = JSON.stringify(expected);
  cell2.style.backgroundColor = '#00FF00';
  cell3 = row.insertCell(-1);
  cell3.innerHTML = JSON.stringify(actual);
  cell3.style.backgroundColor = _.isEqual(expected, actual) ? '#00FF00' : '#FF0000';
  return cell1.style.backgroundColor = cell3.style.backgroundColor;
};

fillTable = function(a, b) {
  var key, keys, l, len, results, value;
  a = JSON.parse(localStorage[a]);
  b = JSON.parse(localStorage[b]);
  tableClear();
  keys = [];
  for (key in a) {
    value = a[key];
    keys.push(key);
  }
  for (key in b) {
    value = b[key];
    keys.push(key);
  }
  sort(keys);
  keys = _.uniq(keys);
  results = [];
  for (l = 0, len = keys.length; l < len; l++) {
    key = keys[l];
    if (key !== '_name' && key !== '_type') {
      results.push(tableAppend(tabell, "@" + key, unmark(a[key]), unmark(b[key])));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

unmark = function(obj) {
  var item, key, res, value;
  if (_.isArray(obj)) {
    return (function() {
      var l, len, results;
      results = [];
      for (l = 0, len = obj.length; l < len; l++) {
        item = obj[l];
        results.push(unmark(item));
      }
      return results;
    })();
  }
  if (_.isObject(obj)) {
    res = {};
    for (key in obj) {
      value = obj[key];
      res[key] = unmark(value);
    }
    return res;
  }
  return obj;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUtBLElBQUE7O0FBQUEsWUFBQSxHQUFlOztBQUNmLEdBQUEsR0FBTTs7QUFDTixJQUFBLEdBQU87O0FBQ1AsSUFBQSxHQUFPOztBQUNQLElBQUEsR0FBTzs7QUFDUCxJQUFBLEdBQU87O0FBQ1AsT0FBQSxHQUFVOztBQUNWLFFBQUEsR0FBVzs7QUFDWCxJQUFBLEdBQU87O0FBQ1AsS0FBQSxHQUFROztBQUNSLEtBQUEsR0FBUTs7QUFDUixHQUFBLEdBQU07O0FBQ04sT0FBQSxHQUFVOztBQUVWLEdBQUEsR0FBTTs7QUFDTixLQUFBLEdBQVE7O0FBQ1IsTUFBQSxHQUFTLENBQUMsRUFBRCxFQUFJLEVBQUosRUFBTyxFQUFQOztBQUVULE1BQUEsR0FBUyxTQUFDLENBQUQsRUFBRyxFQUFIO0FBQ1IsTUFBQTtFQUFBLElBQUcsQ0FBQSxLQUFLLEVBQVI7SUFDQyxHQUFHLENBQUMsR0FBSixDQUFRLEVBQVI7SUFDQSxHQUFHLENBQUMsSUFBSixDQUFBLEVBRkQ7R0FBQSxNQUFBO0lBSUMsQ0FBQSxHQUFJLENBQUMsQ0FBQyxRQUFGLENBQUE7SUFDSixDQUFBLEdBQUksQ0FBQyxDQUFDLE9BQUYsQ0FBVSxHQUFWO0lBQ0osSUFBb0IsQ0FBQSxLQUFHLENBQUMsQ0FBeEI7TUFBQSxDQUFBLEdBQUksQ0FBQyxDQUFDLE1BQUYsQ0FBUyxDQUFBLEdBQUUsQ0FBWCxFQUFKOztJQUVBLENBQUEsR0FBSSxDQUFDLENBQUMsT0FBRixDQUFVLEtBQVYsRUFBZ0IsSUFBaEI7SUFFSixHQUFHLENBQUMsR0FBSixDQUFRLENBQUEsR0FBSSxJQUFKLEdBQVcsQ0FBQyxDQUFDLElBQWIsR0FBb0IsR0FBcEIsR0FBMEIsQ0FBRyxFQUFBLEtBQUksQ0FBUCxHQUFjLFNBQWQsR0FBNkIsRUFBN0IsQ0FBbEM7SUFDQSxHQUFHLENB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QSxDQUFPLENBQUUsQ0FBQSxHQUFBLENBQVQsQ0FBN0MsR0FERDtLQUFBLE1BQUE7MkJBQUE7O0FBREQ7O0FBVlc7O0FBY1osTUFBQSxHQUFTLFNBQUMsR0FBRDtBQUNSLE1BQUE7RUFBQSxJQUFHLENBQUMsQ0FBQyxPQUFGLENBQVUsR0FBVixDQUFIO0FBQXVCOztBQUFRO1dBQUEscUNBQUE7O3FCQUFBLE1BQUEsQ0FBTyxJQUFQO0FBQUE7O1NBQS9COztFQUNBLElBQUcsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxHQUFYLENBQUg7SUFDQyxHQUFBLEdBQU07QUFDTixTQUFBLFVBQUE7O01BQ0MsR0FBSSxDQUFBLEdBQUEsQ0FBSixHQUFXLE1BQUEsQ0FBTyxLQUFQO0FBRFo7QUFFQSxXQUFPLElBSlI7O1NBS0E7QUFQUSIsInNvdXJjZXNDb250ZW50IjpbIiMgdG9kbzogQ29kZSBNaXJyb3IgaGFudGVyYXIgaW50ZSB0b2dnbGVDb21tZW50IHZpYSBDdHJsKy9cclxuXHJcbiMgaWYgdGhlIHJlbmV3IGJ1dHRvbiBpcyBhdmFpbGFibGUsIGEgbmV3IHZlcnNpb24gb2YgdGhlIGIgY29kZSBpcyBhdmFpbGFibGUuXHJcbiMgQ2xpY2tpbmcgcmVuZXcgcHJpbnRzIHRoZSBjdXJyZW50IGIgY29kZSBvbiB0aGUgY29uc29sZSBhcyBhIGJhY2t1cC5cclxuXHJcbm15Q29kZU1pcnJvciA9IG51bGxcclxubXNnID0gbnVsbFxyXG5zZWwxID0gbnVsbFxyXG5zZWwyID0gbnVsbFxyXG5zZWwzID0gbnVsbFxyXG5zZWw0ID0gbnVsbFxyXG5jaGFwdGVyID0gXCJcIlxyXG5leGVyY2lzZSA9IFwiXCJcclxuY2FsbCA9ICcnXHJcbmNhbGxzID0ge31cclxucmVuZXcgPSBudWxsXHJcbmt3bCA9IHt9XHJcbmt3bGlua3MgPSBbXVxyXG5cclxuZ2FwID0gMFxyXG5ibG9jayA9IDBcclxuYnVmZmVyID0gW1tdLFtdLFtdXVxyXG5cclxuc2V0TXNnID0gKGUsbnIpIC0+XHJcblx0aWYgZSA9PSAnJ1xyXG5cdFx0bXNnLnZhbCBcIlwiXHJcblx0XHRtc2cuaGlkZSgpXHJcblx0ZWxzZVxyXG5cdFx0cyA9IGUudG9TdHJpbmcoKVxyXG5cdFx0cCA9IHMuaW5kZXhPZiAnOidcclxuXHRcdHMgPSBzLnN1YnN0ciBwKzEgaWYgcCE9LTFcclxuXHJcblx0XHRzID0gcy5yZXBsYWNlIC9cXHQvZywnICAnXHJcblxyXG5cdFx0bXNnLnZhbCBzICsgJyAoJyArIGUubmFtZSArICcpJyArIGlmIG5yPT0xIHRoZW4gXCIgKGluIEEpXCIgZWxzZSBcIlwiXHJcblx0XHRtc2cuc2hvdygpXHJcblx0bXNnLmNzcyAnYmFja2dyb3VuZC1jb2xvcicsIGlmIGUgPT0gJycgdGhlbiAnI0ZGRkZGRicgZWxzZSAnI0ZGMDAwMCdcclxuXHJcbmdyaWQgPSAtPlxyXG5cdHB1c2goKVxyXG5cdGJnIDAuMjVcclxuXHRzYyAwLjVcclxuXHRmb3IgaSBpbiByYW5nZSAxMVxyXG5cdFx0bGluZSAwLCAyMCAqIGksIDIwMCwgMjAgKiBpXHJcblx0XHRsaW5lIDIwICogaSwgMCwgMjAgKiBpLCAyMDBcclxuXHRwb3AoKVxyXG5cclxubXlwcmludCA9IC0+IHByaW50IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuam9pbihcIiBcIilcclxuXHJcbmNvID0gLT4gZml4Q29sb3IgYXJndW1lbnRzXHJcblxyXG5pcCA9ICh5MSx5Mix4LHgxLHgyKSAtPlxyXG5cdGlmIGFyZ3VtZW50cy5sZW5ndGggPT0gM1xyXG5cdFx0eDE9MFxyXG5cdFx0eDI9OVxyXG5cdG1hcCB4LHgxLHgyLHkxLHkyXHJcblxyXG5maXhDb2xvciA9IChhcmdzKSAtPlxyXG5cdG4gPSBhcmdzLmxlbmd0aFxyXG5cdHI9MFxyXG5cdGc9MFxyXG5cdGI9MFxyXG5cdGE9MVxyXG5cdGlmIG4gPT0gMVxyXG5cdFx0ciA9IGFyZ3NbMF1cclxuXHRcdGcgPSByXHJcblx0XHRiID0gclxyXG5cdGVsc2UgaWYgbiA9PSAzXHJcblx0XHRyID0gYXJnc1swXVxyXG5cdFx0ZyA9IGFyZ3NbMV1cclxuXHRcdGIgPSBhcmdzWzJdXHJcblx0ZWxzZSBpZiBuID09IDRcclxuXHRcdHIgPSBhcmdzWzBdXHJcblx0XHRnID0gYXJnc1sxXVxyXG5cdFx0YiA9IGFyZ3NbMl1cclxuXHRcdGEgPSBhcmdzWzNdXHJcblx0Y29sb3IgMjU1ICogciwgMjU1ICogZywgMjU1ICogYiwgMjU1ICogYVxyXG5cclxuYmcgPSAtPiBiYWNrZ3JvdW5kIGZpeENvbG9yIGFyZ3VtZW50c1xyXG5cclxuZmMgPSAtPlxyXG5cdG4gPSBhcmd1bWVudHMubGVuZ3RoXHJcblx0aWYgbiA9PSAwXHJcblx0XHRub0ZpbGwoKVxyXG5cdGVsc2VcclxuXHRcdGZpbGwgZml4Q29sb3IgYXJndW1lbnRzXHJcblxyXG5zYyA9IC0+XHJcblx0biA9IGFyZ3VtZW50cy5sZW5ndGhcclxuXHRpZiBuID09IDBcclxuXHRcdG5vU3Ryb2tlKClcclxuXHRlbHNlXHJcblx0XHRzdHJva2UgZml4Q29sb3IgYXJndW1lbnRzXHJcblxyXG5iZ2MgPSAoY2MpIC0+IGJnIGNjJTIsIGludChjYy8yKSUyLCBpbnQoY2MvNClcclxuZmNjID0gKGNjKSAtPiBmYyBjYyUyLCBpbnQoY2MvMiklMiwgaW50KGNjLzQpXHJcbnNjYyA9IChjYykgLT4gc2MgY2MlMiwgaW50KGNjLzIpJTIsIGludChjYy80KVxyXG50Y2MgPSAoY2MpIC0+IGZjYyBbNyw3LDAsMCw3LDAsMCwwXVtjY11cclxuXHJcbnN3ID0gKG4pIC0+IHN0cm9rZVdlaWdodCBuXHJcblxyXG5jaXJjbGUgPSAoeCx5LHIpIC0+IGVsbGlwc2UgeCx5LDIqciwyKnJcclxucmQgPSAodmlua2VsKSAtPiByb3RhdGUgcmFkaWFucyB2aW5rZWxcclxucmFuZ2UgPSBfLnJhbmdlXHJcblxyXG5maWxsU2VsZWN0ID0gKHNlbCwgZGljdCkgLT5cclxuXHRzZWwuZW1wdHkoKVxyXG5cdGlmIHNlbD09c2VsMlxyXG5cdFx0c2VsLmFwcGVuZCgkKFwiPG9wdGlvbj5cIikuYXR0cigndmFsdWUnLCAnQkFDSycpLnRleHQoY2hhcHRlcikpXHJcblx0Zm9yIGtleSBvZiBkaWN0XHJcblx0XHRzZWwuYXBwZW5kKCQoXCI8b3B0aW9uPlwiKS5hdHRyKCd2YWx1ZScsIGtleSkudGV4dChrZXkpKVxyXG5cclxuc2VsMWNoYW5nZSA9IChzZWwpIC0+XHJcblx0Y2hhcHRlciA9IHNlbC52YWx1ZVxyXG5cdGV4ZXJjaXNlID0gXCJcIlxyXG5cdGNhbGwgPSBcIlwiXHJcblx0Y2FsbHMgPSB7fVxyXG5cdGZpbGxTZWxlY3Qgc2VsMixkYXRhW2NoYXB0ZXJdXHJcblx0c2VsMi5zaG93KClcclxuXHJcbnNlbDJjaGFuZ2UgPSAoc2VsKSAtPlxyXG5cdGlmIHNlbC52YWx1ZT09J0JBQ0snXHJcblx0XHRleGVyY2lzZSA9IFwiXCJcclxuXHRcdG15Q29kZU1pcnJvci5zZXRWYWx1ZSBcIlwiXHJcblx0XHR0YWJsZUNsZWFyKClcclxuXHRcdGxpbmtzQ2xlYXIoKVxyXG5cdFx0YmcgMC41XHJcblx0XHRzZWwyLmhpZGUoKVxyXG5cdFx0cmV0dXJuXHJcblx0ZXhlcmNpc2UgPSBzZWwudmFsdWVcclxuXHRpZiBleGVyY2lzZT09XCJcIlxyXG5cdFx0bXlDb2RlTWlycm9yLnNldFZhbHVlIFwiXCJcclxuXHRcdGJnIDAuNVxyXG5cdFx0cmV0dXJuXHJcblxyXG5cdHNlbDMuZW1wdHkoKVxyXG5cdHNlbDMuYXBwZW5kKCQoXCI8b3B0aW9uPlwiKS5hdHRyKCd2YWx1ZScsICdCQUNLJykudGV4dChleGVyY2lzZSkpXHJcblx0a2V5d29yZHMgPSBkYXRhW2NoYXB0ZXJdW2V4ZXJjaXNlXVtcImtcIl0uc3BsaXQgJyAnXHJcblx0a2V5d29yZHMuc29ydCgpXHJcblx0Zm9yIGtleXdvcmQgaW4ga2V5d29yZHNcclxuXHRcdHNlbDMuYXBwZW5kKCQoXCI8b3B0aW9uPlwiKS5hdHRyKCd2YWx1ZScsIGtleXdvcmQpLnRleHQoa2V5d29yZCkpXHJcblx0c2VsMy5zaG93KClcclxuXHJcblx0Y2FsbCA9IFwiXCJcclxuXHRjYWxscyA9IGRlY29yYXRlIGRhdGFbY2hhcHRlcl1bZXhlcmNpc2VdW1wiY1wiXVxyXG5cdHNldExpbmtzKClcclxuXHRjYWxsc193aXRob3V0X2RyYXcgPSBfLm9taXQgY2FsbHMsICdkcmF3KCknXHJcblx0ZmlsbFNlbGVjdCBzZWw0LCBjYWxsc193aXRob3V0X2RyYXdcclxuXHJcblx0c3JjID0gbG9jYWxTdG9yYWdlW2V4ZXJjaXNlICsgXCIvZFwiXVxyXG5cdGlmIHNyYyA9PSB1bmRlZmluZWQgb3Igc3JjPT1udWxsIG9yIHNyYyA9PSAnJ1xyXG5cdFx0c3JjID0gZGF0YVtjaGFwdGVyXVtleGVyY2lzZV1bXCJiXCJdXHJcblx0XHRsb2NhbFN0b3JhZ2VbZXhlcmNpc2UgKyBcIi9kXCJdID0gc3JjXHJcblx0XHRsb2NhbFN0b3JhZ2VbZXhlcmNpc2UgKyBcIi92XCJdID0gZGF0YVtjaGFwdGVyXVtleGVyY2lzZV1bXCJ2XCJdXHJcblx0bXlDb2RlTWlycm9yLnNldFZhbHVlIHNyY1xyXG5cclxuXHRpZiBsb2NhbFN0b3JhZ2VbZXhlcmNpc2UgKyBcIi92XCJdPyBhbmQgbG9jYWxTdG9yYWdlW2V4ZXJjaXNlICsgXCIvdlwiXSAhPSBkYXRhW2NoYXB0ZXJdW2V4ZXJjaXNlXVtcInZcIl1cclxuXHRcdHJlbmV3LnNob3coKVxyXG5cdGVsc2VcclxuXHRcdHJlbmV3LmhpZGUoKVxyXG5cclxuXHR0YWJsZUNsZWFyKClcclxuXHJcblx0aWYgY2FsbHM/XHJcblx0XHRzZWw0LnZhbChcImRyYXcoKVwiKS5jaGFuZ2UoKVxyXG5cdFx0Y2FsbCA9IGNhbGxzW1wiZHJhdygpXCJdXHJcblxyXG5cdHJ1bjEoKVxyXG5cdHJ1bjAoKVxyXG5cdG15Q29kZU1pcnJvci5mb2N1cygpXHJcblx0Y29tcGFyZSgnc2VsMmNoYW5nZScpXHJcblxyXG5zZWwzY2xpY2sgPSAoc2VsKSAtPlxyXG5cdGlmIHNlbC52YWx1ZT09J0JBQ0snXHJcblx0XHQjZXhlcmNpc2UgPSBcIlwiXHJcblx0XHQjbXlDb2RlTWlycm9yLnNldFZhbHVlIFwiXCJcclxuXHRcdCN0YWJsZUNsZWFyKClcclxuXHRcdCNsaW5rc0NsZWFyKClcclxuXHRcdCNiZyAwLjVcclxuXHRcdHNlbDMuaGlkZSgpXHJcblx0XHRyZXR1cm5cclxuXHR1cmwgPSBidWlsZExpbmsgc2VsLnZhbHVlXHJcblx0aWYgdXJsP1xyXG5cdFx0d2luID0gd2luZG93Lm9wZW4gdXJsLCAnX2JsYW5rJ1xyXG5cdFx0d2luLmZvY3VzKClcclxuXHJcbnNlbDNjaGFuZ2UgPSAoc2VsKSAtPlxyXG5zZWw0Y2hhbmdlID0gKHNlbCkgLT5cclxuXHJcbnNlbDFjbGljayA9IChzZWwpIC0+IHNlbDIuc2hvdygpXHJcbnNlbDJjbGljayA9IChzZWwpIC0+IGlmIHNlbC52YWx1ZT09J0JBQ0snIHRoZW4gJChcIiNzZWwyXCIpLmhpZGUoKVxyXG4jc2VsM2NsaWNrID0gKHNlbCkgLT4gI2lmIHNlbC52YWx1ZT09J0JBQ0snIHRoZW4gJChcIiNzZWwzXCIpLmhpZGUoKVxyXG5zZWw0Y2xpY2sgPSAoc2VsKSAtPlxyXG5cdGlmIGNhbGxzPyB0aGVuIGNhbGwgPSBjYWxsc1tzZWwudmFsdWVdXHJcblx0aWYgcnVuMSgpID09IHRydWVcclxuXHRcdHJ1bjAoKVxyXG5cdGNvbXBhcmUoJ3NlbDRjbGljaycpXHJcblxyXG5idWlsZExpbmsgPSAoa2V5d29yZCkgLT5cclxuXHRpZiBrZXl3b3JkLmluZGV4T2YoJ18uJyk9PTAgdGhlbiBrZXl3b3JkID0ga2V5d29yZC5yZXBsYWNlKCdfLicsJycpXHJcblx0cHJpbnQga2V5d29yZFxyXG5cdG5yID0ga3dsW2tleXdvcmRdXHJcblx0aWYgbnI9PTAgdGhlbiBrZXl3b3JkID0ga2V5d29yZC50b0xvd2VyQ2FzZSgpXHJcblx0aWYgbnI9PW51bGxcclxuXHRcdHByaW50IGtleXdvcmRcclxuXHRcdG51bGxcclxuXHRlbHNlXHJcblx0XHRrZXl3b3JkID0ga2V5d29yZC5yZXBsYWNlKCdbXScsJ2FycmF5JylcclxuXHRcdGtleXdvcmQgPSBrZXl3b3JkLnJlcGxhY2UoJ1wiXCInLCdzdHJpbmcnKVxyXG5cdFx0a2V5d29yZCA9IGtleXdvcmQucmVwbGFjZSgne30nLCdvYmplY3QnKVxyXG5cdFx0a2V5d29yZCA9IGtleXdvcmQucmVwbGFjZSgnLT4nLCdwaWwnKVxyXG5cdFx0a2V5d29yZCA9IGtleXdvcmQucmVwbGFjZSgnQCcsJ3RoaXMnKVxyXG5cdFx0a2V5d29yZCA9IGtleXdvcmQucmVwbGFjZSgnLi4uJywnZXhjbHVzaXZlcmFuZ2UnKVxyXG5cdFx0a2V5d29yZCA9IGtleXdvcmQucmVwbGFjZSgnLi4nLCdpbmNsdXNpdmVyYW5nZScpXHJcblx0XHRrZXl3b3JkID0ga2V5d29yZC5yZXBsYWNlKCdIU0InLCdjb2xvck1vZGUnKVxyXG5cdFx0a3dsaW5rc1tucl0ucmVwbGFjZSgne30nLGtleXdvcmQpXHJcblxyXG5idWlsZEtleXdvcmRMaW5rID0gLT5cclxuXHRrd2wgPSB7fVxyXG5cdGt3bGlua3MgPSBbXVxyXG5cclxuXHRrd2xpbmtzLnB1c2ggJ2h0dHBzOi8vZ2l0aHViLmNvbS9DaHJpc3Rlck5pbHNzb24vcDVEb2pvL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCN7fSdcclxuXHRrd2xpbmtzLnB1c2ggJ2h0dHBzOi8vcDVqcy5vcmcvcmVmZXJlbmNlLyMvcDUve30nXHJcblx0a3dsaW5rcy5wdXNoICdodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2pzcmVmL2pzcmVmX3t9LmFzcCdcclxuXHRrd2xpbmtzLnB1c2ggJ2h0dHBzOi8vZ2l0aHViLmNvbS9DaHJpc3Rlck5pbHNzb24vcDVEb2pvL2Jsb2IvbWFzdGVyL18ubWQje30nXHJcblxyXG5cdHNhdmUgPSAoaW5kZXgsd29yZHMpIC0+IGt3bFt3b3JkXSA9IGluZGV4IGZvciB3b3JkIGluIHdvcmRzLnNwbGl0ICcgJ1xyXG5cclxuXHRzYXZlIDAsJ1tdIFwiXCIge30gLi4gLi4uIEAgLT4gY2xhc3MgdGV4dCBvcGVyYXRvcnMgY29tcGFyaXNvbnMgbG9naWNhbCBpZiBiZyBmYyBzYyBzdyByYW5nZSBjaXJjbGUgZm9yIHdoaWxlIHJkIHJlYWRUZXh0IHJlYWRJbnQgcmVhZEZsb2F0J1xyXG5cdHNhdmUgMCwnUEkgc3FydCBjb3Mgc2luIGxvZzEwIERhdGUnXHJcblx0c2F2ZSAwLCdwYXJzZUludCBwYXJzZUZsb2F0IGRpc3QgbmYgY29uc3RyYWluIGludCByb3VuZCBtYXAgbGVycCByYWRpYW5zIHJlZHVjZSdcclxuXHRzYXZlIDEsJ2FyYyByZWN0IHJlY3RNb2RlIGVsbGlwc2UgcG9pbnQgbGluZSB0cmlhbmdsZSBxdWFkIHJvdGF0ZSB0cmFuc2xhdGUgc2NhbGUgcHVzaCBwb3AnXHJcblx0c2F2ZSAxLCdyYW5kb20gbWlsbGlzIGNvbG9yTW9kZSBIU0Igc3Ryb2tlQ2FwJ1xyXG5cdHNhdmUgMiwnYnJlYWsgcmV0dXJuJ1xyXG5cdHNhdmUgMywnY29udGFpbnMgZmlsdGVyIGNvdW50QnkgaXNFcXVhbCBsYXN0IG1heCBtaW4gcGFpcnMgc29ydEJ5J1xyXG5cclxubW91c2VQcmVzc2VkID0gLT5cclxuXHRwID0gbnVsbFxyXG5cdGlmIDAgPD0gbW91c2VYLTUgPD0gMjAwIGFuZCAwIDw9IG1vdXNlWS01IDw9IDIwMCB0aGVuIHAgPSBbbW91c2VYLTUsbW91c2VZLTVdXHJcblx0aWYgMCA8PSBtb3VzZVgtNSA8PSAyMDAgYW5kIDAgPD0gbW91c2VZLTIxMCA8PSAyMDAgdGhlbiBwID0gW21vdXNlWC01LG1vdXNlWS0yMTBdXHJcblx0aWYgcFxyXG5cdFx0ZGljdCA9IGRhdGFbY2hhcHRlcl1bZXhlcmNpc2VdW1wiY1wiXVxyXG5cdFx0aWYgZGljdD9cclxuXHRcdFx0b2JqZWt0ID0gXy5rZXlzKGRpY3QpWzBdXHJcblx0XHRcdGNhbGwgPSBvYmpla3QgKyBcIi5tb3VzZVByZXNzZWQoI3twWzBdfSwje3BbMV19KTsgXCIgKyBvYmpla3QgKyBcIi5kcmF3KCk7IFwiICsgb2JqZWt0ICsgXCIuc3RvcmUoKVwiXHJcblx0XHRcdGlmIHJ1bjEoKSA9PSB0cnVlXHJcblx0XHRcdFx0cnVuMCgpXHJcblx0XHRcdFx0Y29tcGFyZSgnbW91c2VQcmVzc2VkJylcclxuXHJcbnNldExpbmtzID0gLT5cclxuXHRsaW5rc0NsZWFyKClcclxuXHRsaW5rQXBwZW5kIGxpbmtzLCBcImh0dHBzOi8vZ2l0aHViLmNvbS9DaHJpc3Rlck5pbHNzb24vcDVEb2pvL2Jsb2IvbWFzdGVyL1JFQURNRS5tZFwiLCBcInA1RG9qb1wiXHJcblx0bGlua0FwcGVuZCBsaW5rcywgXCJodHRwczovL3A1anMub3JnL3JlZmVyZW5jZVwiLCBcInA1XCJcclxuXHRsaW5rQXBwZW5kIGxpbmtzLCBcImh0dHA6Ly9jb2ZmZWVzY3JpcHQub3JnXCIsIFwiQ29mZmVlc2NyaXB0XCJcclxuXHRsaW5rQXBwZW5kIGxpbmtzLCBcImh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vanNcIiwgXCJKYXZhc2NyaXB0XCJcclxuXHRsaW5rQXBwZW5kIGxpbmtzLCBcImh0dHBzOi8vZ2l0aHViLmNvbS9DaHJpc3Rlck5pbHNzb24vTmlsc3Nvbi9ibG9iL21hc3Rlci9SRUFETUUubWRcIiwgXCJOaWxzc29uXCJcclxuXHRsaW5rQXBwZW5kIGxpbmtzLCBcImh0dHBzOi8vY2hyaXN0ZXJuaWxzc29uLmdpdGh1Yi5pby9wNUNvbG9yXCIsIFwicDVDb2xvclwiXHJcblx0bGlua0FwcGVuZCBsaW5rcywgXCJodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9cIiwgXCJVbmRlcnNjb3JlXCJcclxuXHJcblx0Zm9yIHRleHQsbGluayBvZiBkYXRhW2NoYXB0ZXJdW2V4ZXJjaXNlXVtcImVcIl1cclxuXHRcdGxpbmtBcHBlbmQgbGlua3MsbGluayx0ZXh0XHJcblxyXG5saW5rc0NsZWFyID0gLT4gJChcIiNsaW5rcyB0clwiKS5yZW1vdmUoKVxyXG5cclxubGlua0FwcGVuZCA9ICh0LCBsaW5rLCB0ZXh0KSAtPiAjIGV4YWt0IGVuIGtvbHVtblxyXG5cdGQgPSAocykgLT4gXCInXCIgKyBzICsgXCInXCJcclxuXHRkZCA9IChzKSAtPiAnXCInICsgcyArICdcIidcclxuXHRyb3cgPSB0Lmluc2VydFJvdyAtMVxyXG5cdGNlbGwxID0gcm93Lmluc2VydENlbGwgLTFcclxuXHRzID0gJzxhIGhyZWY9JyArIGQobGluaylcclxuXHRzICs9ICcgdGFyZ2V0PScgKyBkKCdfYmxhbmsnKVxyXG5cdHMgKz0gJyBvbm1vdXNlb3Zlcj0nICsgZCgndGhpcy5zdHlsZS5jb2xvcj0nICsgZGQoJ3llbGxvdycpICsgJzsnKVxyXG5cdHMgKz0gJyBvbm1vdXNlb3V0PScgICsgZCgndGhpcy5zdHlsZS5jb2xvcj0nICsgZGQoJ2JsYWNrJykgKyAnOycpXHJcblx0cyArPSAnPidcclxuXHRzICs9IHRleHRcclxuXHRzICs9ICc8L2E+J1xyXG5cdGNlbGwxLmlubmVySFRNTCA9IHNcclxuXHJcbmRlY29yYXRlID0gKGRpY3QpIC0+ICMge2tsb2NrYTogXCJkcmF3fGluY3JfaG91clwifVxyXG5cdGlmIGRpY3Q9PXVuZGVmaW5lZCB0aGVuIHJldHVybiB7fVxyXG5cdGlmIGRpY3Q9PW51bGwgdGhlbiByZXR1cm4ge31cclxuXHRyZXMgPSB7fVxyXG5cdGZvciBvYmpla3QsIHMgb2YgZGljdFxyXG5cdFx0bWV0aG9kcyA9IHMuc3BsaXQgXCJ8XCJcclxuXHRcdHJlc1tcImRyYXcoKVwiXSA9IG9iamVrdCArIFwiLmRyYXcoKTsgXCIgKyBvYmpla3QgKyBcIi5zdG9yZSgpXCJcclxuXHRcdHJlc1ttZXRob2RdID0gb2JqZWt0ICsgXCIuXCIgKyBtZXRob2QgKyBcIjsgXCIgKyBvYmpla3QgKyBcIi5kcmF3KCk7IFwiICsgb2JqZWt0ICsgXCIuc3RvcmUoKVwiIGZvciBtZXRob2QgaW4gbWV0aG9kc1xyXG5cdHJlc1xyXG5cclxuY2hhbmdlTGF5b3V0ID0gLT5cclxuXHR3ID0gJCh3aW5kb3cpLndpZHRoKClcclxuXHQkKFwiLkNvZGVNaXJyb3JcIikud2lkdGggdy00MjVcclxuXHQkKFwiI2NhbnZhc1wiKS5jc3Mge3RvcDogMCwgbGVmdDogMjA1LCBwb3NpdGlvbjonYWJzb2x1dGUnfVxyXG5cdCQoXCIjbXNnXCIpLndpZHRoIHctNDMwXHJcblx0JChcIiN0YWJlbGxcIikud2lkdGggdy0yMTVcclxuXHJcbnJlc2l6ZVRpbWVyID0gMFxyXG4kKHdpbmRvdykucmVzaXplIC0+XHJcblx0XHRjbGVhclRpbWVvdXQgcmVzaXplVGltZXJcclxuXHRcdHJlc2l6ZVRpbWVyID0gc2V0VGltZW91dCBjaGFuZ2VMYXlvdXQsIDEwXHJcblxyXG5zZXR1cCA9IC0+XHJcblx0dGltZXN0YW1wID0gbWlsbGlzKClcclxuXHRjID0gY3JlYXRlQ2FudmFzIDUrMjAxKzUsIDMqMjAxKzIwXHJcblxyXG5cdGJ1aWxkS2V5d29yZExpbmsoKVxyXG5cclxuXHRnYXAgPSA1ICogd2lkdGggKiA0XHJcblx0YmxvY2sgPSAyMDEgKiB3aWR0aCAqIDRcclxuXHJcblx0cGl4ZWxEZW5zaXR5IDFcclxuXHRjLnBhcmVudCAnY2FudmFzJ1xyXG5cclxuXHRtc2cgPSAkKCcjbXNnJylcclxuXHJcblx0c2VsMSA9ICQoJyNzZWwxJylcclxuXHRzZWwyID0gJCgnI3NlbDInKVxyXG5cdHNlbDMgPSAkKCcjc2VsMycpXHJcblx0c2VsNCA9ICQoJyNzZWw0JylcclxuXHJcblx0c2VsMi5oaWRlKClcclxuXHRzZWwzLmhpZGUoKVxyXG5cclxuXHRmaWxsU2VsZWN0IHNlbDEsIGRhdGFcclxuXHJcblx0cmVuZXcgPSBjcmVhdGVCdXR0b24gJ1JlbmV3J1xyXG5cdHJlbmV3LnBvc2l0aW9uIDM1Miw2NDRcclxuXHRyZW5ldy5oaWRlKClcclxuXHRyZW5ldy5tb3VzZVByZXNzZWQgKCkgLT5cclxuXHRcdHByaW50IG15Q29kZU1pcnJvci5nZXRWYWx1ZSgpXHJcblx0XHRteUNvZGVNaXJyb3Iuc2V0VmFsdWUgZGF0YVtjaGFwdGVyXVtleGVyY2lzZV1bXCJiXCJdXHJcblx0XHRsb2NhbFN0b3JhZ2VbZXhlcmNpc2UgKyBcIi9cIiArICd2J10gPSBkYXRhW2NoYXB0ZXJdW2V4ZXJjaXNlXVtcInZcIl1cclxuXHRcdGxvY2FsU3RvcmFnZVtleGVyY2lzZSArIFwiL1wiICsgJ2QnXSA9IGRhdGFbY2hhcHRlcl1bZXhlcmNpc2VdW1wiYlwiXVxyXG5cdFx0cmVuZXcuaGlkZSgpXHJcblxyXG53aW5kb3cub25iZWZvcmV1bmxvYWQgPSAtPlxyXG5cdHJldHVybiBpZiBkb2N1bWVudC5VUkwuaW5kZXhPZihcInJlY29yZFwiKSA9PSAtMVxyXG5cdHJlcyA9IFtdXHJcblx0Zm9yIGtleTEsY2hhcHRlciBvZiBkYXRhXHJcblx0XHRmb3Iga2V5MixleGVyY2lzZSBvZiBjaGFwdGVyXHJcblx0XHRcdGlmIGV4ZXJjaXNlLmRcclxuXHRcdFx0XHRyZXMucHVzaCBcIiMjIyAje2tleTF9ICMjIyAje2tleTJ9XFxuXCJcclxuXHRcdFx0XHRmb3IgcyxpIGluIGV4ZXJjaXNlLmRcclxuXHRcdFx0XHRcdHJlcy5wdXNoIFwiPT09ICN7aX1cXG5cIlxyXG5cdFx0XHRcdFx0cmVzLnB1c2ggcytcIlxcblwiXHJcblx0YmxvYiA9IG5ldyBCbG9iIHJlcywge3R5cGU6IFwidGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04XCJ9XHJcblx0c2F2ZUFzIGJsb2IsIFwicmVjb3JkaW5nLnR4dFwiXHJcblx0dHJ1ZVxyXG5cclxud2luZG93Lm9ubG9hZCA9IC0+XHJcblxyXG5cdHRhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQgXCJjb2RlXCJcclxuXHJcblx0bXlDb2RlTWlycm9yID0gQ29kZU1pcnJvci5mcm9tVGV4dEFyZWEgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb2RlXCIpLCB7XHJcblx0XHRsaW5lTnVtYmVyczogdHJ1ZSxcclxuXHRcdG1vZGU6IFwiY29mZmVlc2NyaXB0XCIsXHJcblx0XHRrZXlNYXA6IFwic3VibGltZVwiLFxyXG5cdFx0dGhlbWU6IFwiZHJhY3VsYVwiLFxyXG5cdFx0YXV0b0Nsb3NlQnJhY2tldHM6IHRydWUsXHJcblx0XHRsaW5lV2lzZUNvcHlDdXQ6IHRydWUsXHJcblx0XHR0YWJTaXplOiAyLFxyXG5cdFx0aW5kZW50V2l0aFRhYnM6IHRydWUsXHJcblx0fVxyXG5cclxuXHQkKFwiLkNvZGVNaXJyb3JcIikuY3NzICdmb250LXNpemUnLFwiMTZwdFwiXHJcblx0bXlDb2RlTWlycm9yLm9uIFwiY2hhbmdlXCIsIGVkaXRvcl9jaGFuZ2VcclxuXHJcblx0Y2hhcHRlcj1cIlwiXHJcblx0ZXhlcmNpc2U9XCJcIlxyXG5cclxuXHRteUNvZGVNaXJyb3IuZm9jdXMoKVxyXG5cdHdpbmRvdy5yZXNpemVUbyAxMDAwLDc1MFxyXG5cdGNoYW5nZUxheW91dCgpXHJcblxyXG5zYXZlVG9LZXlTdG9yYWdlID0gKGIpIC0+XHJcblx0cyA9IFwiXCJcclxuXHRmb3IgbGluZSBpbiBiLnNwbGl0ICdcXG4nXHJcblx0XHRpZiBsaW5lLmluZGV4T2YoXCIjXCIpICE9IDBcclxuXHRcdFx0cyArPSBsaW5lXHJcblx0cGxhY2UgPSBkYXRhW2NoYXB0ZXJdW2V4ZXJjaXNlXVxyXG5cdGlmICFwbGFjZS5kXHJcblx0XHRwbGFjZS5kID0gW11cclxuXHRwbGFjZS5kLnB1c2ggc1xyXG5cclxuZWRpdG9yX2NoYW5nZSA9IC0+XHJcblx0aWYgXy5zaXplKGNhbGxzKSA9PSAwXHJcblx0XHRjYWxsID0gXCJcIlxyXG5cdGVsc2UgIyB0cmFuc3BpbGUsIGRyYXdcclxuXHRcdGNhbGwgPSBjYWxsc1tcImRyYXcoKVwiXVxyXG5cdGRjZSA9IGRhdGFbY2hhcHRlcl1bZXhlcmNpc2VdXHJcblx0aWYgZGNlIGFuZCBkY2VbXCJhXCJdIGFuZCBfLnNpemUoZGNlW1wiYVwiXS5jKSA+IDBcclxuXHRcdGlmIHJ1bjEoKSA9PSBmYWxzZSAjIGLDtnIgbm9ybWFsdCB2YXJhIHRydWVcclxuXHRcdFx0cmV0dXJuXHJcblx0cmVzID0gcnVuMCgpXHJcblxyXG5cdGlmIHJlcyAjIHNwYXJhIGvDpGxsa29kIEVGVEVSIGV4ZWt2ZXJpbmdcclxuXHRcdHNhdmVTb3VyY2VDb2RlKClcclxuXHRjb21wYXJlICdlZGl0b3JfY2hhbmdlJ1xyXG5cclxuc2F2ZVNvdXJjZUNvZGUgPSAtPiBsb2NhbFN0b3JhZ2VbZXhlcmNpc2UgKyBcIi9kXCJdID0gbXlDb2RlTWlycm9yLmdldFZhbHVlKClcclxuXHJcbnJ1bjAgPSAtPlxyXG5cdGlmIGV4ZXJjaXNlPT1cIlwiIHRoZW4gcmV0dXJuIGZhbHNlXHJcblx0c3JjID0gbXlDb2RlTWlycm9yLmdldFZhbHVlKClcclxuXHRpZiBzcmMgPT0gXCJcIiB0aGVuIHJldHVybiB0cnVlXHJcblx0cnVuIDAsIHNyYyArIFwiXFxuXCIgKyBjYWxsXHJcblxyXG5ydW4xID0gLT5cclxuXHRpZiBleGVyY2lzZT09XCJcIiB0aGVuIHJldHVyblxyXG5cdHJ1biAxLCBkYXRhW2NoYXB0ZXJdW2V4ZXJjaXNlXVtcImFcIl0gKyBcIlxcblwiICsgY2FsbFxyXG5cclxucmVzZXQgPSAtPlxyXG5cdGNvbG9yTW9kZSBSR0IsMjU1XHJcblx0YW5nbGVNb2RlIFJBRElBTlNcclxuXHRzdyAxXHJcblx0c3Ryb2tlQ2FwIFJPVU5EXHJcblx0dGV4dEFsaWduIExFRlQsQkFTRUxJTkVcclxuXHRiZyAwXHJcblx0ZmMgMFxyXG5cdHNjIDFcclxuXHRncmlkKClcclxuXHJcbnJ1biA9IChfbiwgY29mZmVlKSAtPlxyXG5cdHJlc2V0TWF0cml4KClcclxuXHRyZWN0TW9kZSBDT1JORVJcclxuXHRwdXNoKClcclxuXHR0cmFuc2xhdGUgNSw1XHJcblx0cmVzZXQoKVxyXG5cclxuXHRzZXRNc2cgXCJcIiwgX25cclxuXHJcblx0aWYgZXhlcmNpc2U9PVwiXCIgdGhlbiByZXR1cm4gdHJ1ZVxyXG5cclxuXHR0cnlcclxuXHRcdGNvZGUgPSB0cmFuc3BpbGUgY29mZmVlXHJcblxyXG5cdFx0dHJ5XHJcblx0XHRcdGV2YWwgY29kZVxyXG5cdFx0XHRidWZmZXJbMS1fbl0gPSBzdG9yZSgpXHJcblx0XHRcdHBvcCgpXHJcblx0XHRcdHJldHVybiB0cnVlXHJcblx0XHRjYXRjaCBlXHJcblx0XHRcdHNldE1zZyBlLCBfblxyXG5cdFx0XHRwb3AoKVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRjYXRjaCBlXHJcblx0XHRzZXRNc2cgZSwgX25cclxuXHRcdHBvcCgpXHJcblx0XHRyZXR1cm4gZmFsc2VcclxuXHJcbnN0b3JlID0gLT5cclxuXHRsb2FkUGl4ZWxzKClcclxuXHRwaXhlbHNbZ2FwLi4uZ2FwICsgYmxvY2tdXHJcblxyXG5mZXRjaCA9IChidWZmZXIseTApIC0+XHJcblx0bG9hZFBpeGVscygpXHJcblx0Zm9yIGkgaW4gcmFuZ2UgYmxvY2tcclxuXHRcdHBpeGVsc1tnYXAgKyAoZ2FwK2Jsb2NrKSp5MCArIGldID0gYnVmZmVyW2ldXHJcblx0dXBkYXRlUGl4ZWxzKClcclxuXHJcbmZpeF9mcmFtZXMgPSAtPlxyXG5cdGxvYWRQaXhlbHMoKVxyXG5cdGZvciBrIGluIHJhbmdlIDRcclxuXHRcdGZvciBpIGluIHJhbmdlIGdhcFxyXG5cdFx0XHRwaXhlbHNbKGdhcCtibG9jaykqaytpXSA9IDEyOC02NFxyXG5cdGZvciBqIGluIHJhbmdlIGhlaWdodCAjIDMqMjAxKzIwXHJcblx0XHRmb3IgaSBpbiByYW5nZSAyMFxyXG5cdFx0XHRwaXhlbHNbaip3aWR0aCo0K2ldID0gMTI4LTY0XHJcblx0XHRcdHBpeGVsc1tqKndpZHRoKjQrMjA2KjQraV0gPSAxMjgtNjRcclxuXHR1cGRhdGVQaXhlbHMoKVxyXG5cclxuY29tcGFyZSA9IChtZXNzYWdlKSAtPiAgIyBMw6RnZyBlbiB0aW1lciBww6UgZGVubmEuIELDtnIgdsOkbnRhIG7DpWdvbiBzZWt1bmRcclxuXHQjc3RhcnQgPSBtaWxsaXMoKVxyXG5cdGEgPSBidWZmZXJbMF1cclxuXHRiID0gYnVmZmVyWzFdXHJcblx0YyA9IGFbLi5dXHJcblxyXG5cdGlmIG1zZy52YWwoKSA9PSAnJ1xyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgYmxvY2svNFxyXG5cdFx0XHRpNCA9IDQqaVxyXG5cdFx0XHRjW2k0KzBdID0gYWJzIGNbaTQrMF0gLSBiW2k0KzBdXHJcblx0XHRcdGNbaTQrMV0gPSBhYnMgY1tpNCsxXSAtIGJbaTQrMV1cclxuXHRcdFx0Y1tpNCsyXSA9IGFicyBjW2k0KzJdIC0gYltpNCsyXVxyXG5cdFx0XHRjW2k0KzNdID0gMjU1XHJcblxyXG5cdGZldGNoIGEsIDBcclxuXHRpZiBtc2cudmFsKCkgPT0gJydcclxuXHRcdGZldGNoIGIsIDFcclxuXHRcdGZldGNoIGMsIDJcclxuXHRmaXhfZnJhbWVzKClcclxuXHQjcHJpbnQgbWVzc2FnZSxtaWxsaXMoKS1zdGFydFxyXG5cclxuXHJcbnRhYmxlQ2xlYXIgPSAtPiAkKFwiI3RhYmVsbCB0clwiKS5yZW1vdmUoKVxyXG5cclxudGFibGVBcHBlbmQgPSAodCwgY2FsbCwgZXhwZWN0ZWQsIGFjdHVhbCkgLT4gIyBleGFrdCB0cmUga29sdW1uZXJcclxuXHRyb3cgPSB0Lmluc2VydFJvdyAtMVxyXG5cclxuXHRjZWxsMSA9IHJvdy5pbnNlcnRDZWxsIC0xXHJcblx0Y2VsbDEuaW5uZXJIVE1MID0gY2FsbFxyXG5cclxuXHRjZWxsMiA9IHJvdy5pbnNlcnRDZWxsIC0xXHJcblx0Y2VsbDIuaW5uZXJIVE1MID0gSlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWQpXHJcblx0Y2VsbDIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyMwMEZGMDAnXHJcblxyXG5cdGNlbGwzID0gcm93Lmluc2VydENlbGwgLTFcclxuXHRjZWxsMy5pbm5lckhUTUwgPSBKU09OLnN0cmluZ2lmeShhY3R1YWwpXHJcblx0Y2VsbDMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gaWYgXy5pc0VxdWFsKGV4cGVjdGVkLCBhY3R1YWwpIHRoZW4gJyMwMEZGMDAnIGVsc2UgJyNGRjAwMDAnXHJcblx0Y2VsbDEuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY2VsbDMuc3R5bGUuYmFja2dyb3VuZENvbG9yXHJcblxyXG5maWxsVGFibGUgPSAoYSxiKSAtPlxyXG5cdGEgPSBKU09OLnBhcnNlIGxvY2FsU3RvcmFnZVthXVxyXG5cdGIgPSBKU09OLnBhcnNlIGxvY2FsU3RvcmFnZVtiXVxyXG5cdHRhYmxlQ2xlYXIoKVxyXG5cdGtleXMgPSBbXVxyXG5cdGtleXMucHVzaCBrZXkgZm9yIGtleSx2YWx1ZSBvZiBhXHJcblx0a2V5cy5wdXNoIGtleSBmb3Iga2V5LHZhbHVlIG9mIGJcclxuXHRzb3J0IGtleXNcclxuXHRrZXlzID0gXy51bmlxIGtleXNcclxuXHJcblx0Zm9yIGtleSBpbiBrZXlzXHJcblx0XHRpZiBrZXkgIT0gJ19uYW1lJyBhbmQgIGtleSAhPSAnX3R5cGUnXHJcblx0XHRcdHRhYmxlQXBwZW5kIHRhYmVsbCwgXCJAXCIgKyBrZXksdW5tYXJrKGFba2V5XSksdW5tYXJrKGJba2V5XSlcclxuXHJcbnVubWFyayA9IChvYmopIC0+XHJcblx0aWYgXy5pc0FycmF5KG9iaikgdGhlbiByZXR1cm5cdCh1bm1hcmsgaXRlbSBmb3IgaXRlbSBpbiBvYmopICMgYXJyYXlcclxuXHRpZiBfLmlzT2JqZWN0IG9ialxyXG5cdFx0cmVzID0ge31cclxuXHRcdGZvciBrZXksdmFsdWUgb2Ygb2JqXHJcblx0XHRcdHJlc1trZXldID0gdW5tYXJrKHZhbHVlKSAjIGlmIGtleSAhPSAnX3R5cGUnXHJcblx0XHRyZXR1cm4gcmVzXHJcblx0b2JqIl19
//# sourceURL=C:\github\p5Dojo\coffee\sketch.coffee