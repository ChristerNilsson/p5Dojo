'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.0.3
var Menu;

Menu = function () {
  function Menu(items1) {
    var table = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var branch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    _classCallCheck(this, Menu);

    this.items = items1;
    this.table = table;
    this.branch = branch;
    this.state = 0;
    this.chapter = '';
    this.exercise = '';
    this.calls = {};
  }

  _createClass(Menu, [{
    key: 'rensa',
    value: function rensa() {
      return this.table.innerHTML = "";
    }
  }, {
    key: 'clear',
    value: function clear() {
      return this.branch = [];
    }
  }, {
    key: 'traverse',
    value: function traverse() {
      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.items;
      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var br = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

      var children, i, item, j, k, key, keywords, l, len, len1, len2, ref, ref1, results;
      if (false === goDeeper(this.branch, br)) {
        return;
      }
      if (level === 0) {
        // chapter
        ref = _.keys(items);
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          key = ref[i];
          if (i === this.branch[level] || this.branch.length === level) {
            this.addTitle(key, level, i, br.concat(i));
          }
          children = items[key];
          this.traverse(children, level + 1, br.concat(i));
        }
      }
      if (level === 1) {
        // exercise
        ref1 = _.keys(items);
        for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
          key = ref1[i];
          if (i === this.branch[level] || this.branch.length === level) {
            this.addTitle(key, level, i, br.concat(i));
          }
          keywords = items[key].k.split(' ');
          keywords.sort();
          this.traverse(keywords, level + 1, br.concat(i));
        }
      }
      if (level === 2) {

        // keywords
        for (l = 0, len2 = items.length; l < len2; l++) {
          item = items[l];
          this.addTitle(item, level, i, br);
        }
        // commands
        this.calls = decorate(data[this.chapter][this.exercise].c);
        results = [];
        for (key in this.calls) {
          if (key !== 'draw()') {
            results.push(this.addCommand(key, level, i, br));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    }
  }, {
    key: 'handleRow',
    value: function handleRow(b) {
      var tr;
      tr = document.createElement("tr");
      addCell(tr, b, 100);
      return this.table.appendChild(tr);
    }
  }, {
    key: 'addTitle',
    value: function addTitle(title, level, i, br) {
      var _this = this;

      var b;
      if (level === 2) {
        b = makeButton(title, BLACK, YELLOW);
      } else if (this.branch[level] === i) {
        b = makeButton(title, WHITE, BLACK);
      } else {
        b = makeButton(title, BLACK, WHITE);
      }
      b.style.width = '205px';
      b.style.textAlign = 'left';
      b.branch = br;
      b.style.paddingLeft = 10 * level + "px";
      b.onclick = function () {
        if (level === 0) {
          _this.sel1click(b.value);
        }
        if (level === 1) {
          if (b.style.backgroundColor === 'rgb(255, 255, 255)') {
            _this.sel2click("");
          } else {
            _this.sel2click(b.value);
          }
        }
        if (level === 2) {
          _this.sel3click(b.value);
        }
        if (level === 0 || level === 1) {
          _this.branch = calcBranch(_this.branch, b.branch);
        }
        return updateTables();
      };
      this.handleRow(b);
      return b;
    }
  }, {
    key: 'addCommand',
    value: function addCommand(title, level, i, br) {
      var b, code;
      b = makeButton(title, BLUE, YELLOW);
      b.style.width = '205px';
      b.style.textAlign = 'left';
      b.style.paddingLeft = 10 * level + "px";
      code = this.calls[title];
      b.onclick = function () {
        if (run1(code) === true) {
          run0(code);
        }
        return compare();
      };
      this.handleRow(b);
      return b;
    }
  }, {
    key: 'setState',
    value: function setState(st) {
      this.state = st;
      if (st === 2) {
        $('#input').show();
      } else {
        $('#input').hide();
      }
      if (st === 2) {
        msg.show();
      } else {
        msg.hide();
      }
      if (st === 2) {
        $(".CodeMirror").show();
      } else {
        $(".CodeMirror").hide();
      }
      if (st <= 1) {
        tableClear();
        linksClear();
        setLinks();
        bg(0.5);
      }
      if (st === 1) {
        return this.exercise = "";
      }
    }
  }, {
    key: 'sel1click',
    value: function sel1click(chapter) {
      this.chapter = chapter;
      this.exercise = "";
      this.calls = {};
      return this.setState(1);
    }
  }, {
    key: 'sel2click',
    value: function sel2click(exercise) {
      var code, src;
      this.exercise = exercise;
      if (this.exercise === "") {
        myCodeMirror.setValue("");
        bg(0.5);
        return;
      }
      this.setState(2);
      src = localStorage[this.exercise + "/d"];
      if (src === void 0 || src === null || src === '') {
        src = data[this.chapter][this.exercise].b;
        localStorage[this.exercise + "/d"] = src;
        localStorage[this.exercise + "/v"] = data[this.chapter][this.exercise].v;
      }
      myCodeMirror.setValue(src);
      if (localStorage[this.exercise + "/v"] != null && localStorage[this.exercise + "/v"] !== data[this.chapter][this.exercise].v) {
        renew.show();
      } else {
        renew.hide();
      }
      tableClear();
      code = this.calls["draw()"];
      run1(code);
      run0(code);
      myCodeMirror.focus();
      return compare();
    }
  }, {
    key: 'sel3click',
    value: function sel3click(keyword) {
      var url, win;
      url = buildLink(keyword);
      if (url != null) {
        win = window.open(url, '_blank');
        return win.focus();
      }
    }
  }]);

  return Menu;
}();
//# sourceMappingURL=menu.js.map
