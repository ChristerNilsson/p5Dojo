// Generated by CoffeeScript 2.4.1
var LINKS, Menu;

LINKS = {
  "p5Dojo": "https://github.com/ChristerNilsson/p5Dojo/blob/master/README.md#p5dojo",
  "p5Color": "https://christernilsson.github.io/p5Color",
  "Links": "https://christernilsson.github.io/Lab",
  "Svelte": "https://github.com/ChristerNilsson/sveltes/wiki/Svelte"
};

Menu = class Menu {
  constructor(items1, table = null, branch = []) {
    this.items = items1;
    this.table = table;
    this.branch = branch;
    this.state = 0;
    this.chapter = '';
    this.exercise = '';
    this.calls = {};
  }

  rensa() {
    return this.table.innerHTML = "";
  }

  clear() {
    return this.branch = [];
  }

  traverse(items = this.items, level = 0, br = []) {
    var b, children, i, item, j, k, key, keywords, l, len, len1, len2, link, ref, ref1, ref2, results, text;
    if (false === goDeeper(this.branch, br)) {
      return;
    }
    if (level === 0) { // chapter
      ref = _.keys(items);
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        key = ref[i];
        if (i === this.branch[level] || this.branch.length === level) {
          this.addTitle(key, level, i, br.concat(i), [BLACK, WHITE]);
        }
        children = items[key];
        this.traverse(children, level + 1, br.concat(i));
      }
    }
    if (this.branch.length === 0) {
      for (text in LINKS) {
        link = LINKS[text];
        b = this.addCommand(text, 0, [DARKGREEN, WHITE]);
        (function(link) {
          return b.onclick = function() {
            return window.open(link, '_blank').focus();
          };
        })(link);
      }
    }
    if (level === 1) { // exercise
      ref1 = _.keys(items);
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        key = ref1[i];
        if (i === this.branch[level] || this.branch.length === level) {
          this.addTitle(key, level, i, br.concat(i), this.hardness(items[key].h));
        }
        keywords = items[key].k.split(' ');
        keywords.sort();
        this.traverse(keywords, level + 1, br.concat(i));
      }
    }
    if (level === 2) {

// keywords
      for (l = 0, len2 = items.length; l < len2; l++) {
        item = items[l];
        if (item !== '') {
          this.addTitle(item, level, i, br, [BLACK, YELLOW]);
        }
      }
      // commands
      this.calls = decorate(data[this.chapter][this.exer()].c);
      for (key in this.calls) {
        if (key !== 'draw()') {
          this.addCommand(key, level, [BLUE, YELLOW]);
        }
      }
      // renew
      if ((localStorage[this.exercise + "/v"] != null) && localStorage[this.exercise + "/v"] !== data[this.chapter][this.exercise].v) {
        b = this.addCommand("Renew", level, [RED, WHITE]);
        b.onclick = function() {
          var exercise;
          print(myCodeMirror.getValue()); // Låt stå!
          exercise = data[meny.chapter][meny.exercise];
          myCodeMirror.setValue(exercise.b);
          localStorage[meny.exercise + "/" + 'v'] = exercise.v;
          return localStorage[meny.exercise + "/" + 'd'] = exercise.b;
        };
      }
      // links
      if (this.exercise !== '') {
        ref2 = data[this.chapter][this.exercise].e;
        results = [];
        for (text in ref2) {
          link = ref2[text];
          b = this.addCommand(text, level, [GREEN, BLACK]);
          results.push((function(link) {
            return b.onclick = function() {
              return window.open(link, '_blank').focus();
            };
          })(link));
        }
        return results;
      }
    }
  }

  handleRow(b) {
    var tr;
    tr = document.createElement("tr");
    addCell(tr, b, 100);
    return this.table.appendChild(tr);
  }

  lineCount() {
    return data[this.chapter][this.exercise].l;
  }

  hardness(h) {
    if (h === 0) {
      return [WHITE, BLACK];
    }
    if (h === 1) {
      return [GREEN, BLACK];
    }
    if (h === 2) {
      return [YELLOW, BLACK];
    }
    if (h === 3) {
      return [RED, WHITE];
    }
    return [RED, WHITE];
  }

  addTitle(title, level, i, br, colors = [BLACK, RED]) {
    var b;
    if (level === 2) {
      b = makeButton(title, level, colors);
    } else if (this.branch[level] === i) {
      if (level === 1) {
        b = makeButton(' - ' + `${title} [${this.lineCount()}]`, level, colors);
      } else {
        b = makeButton(' - ' + title, level, colors);
      }
    } else {
      b = makeButton(' + ' + title, level, colors);
    }
    b.branch = br;
    b.onclick = () => {
      if (level === 0) {
        this.sel1click(b.value);
        this.branch = calcBranch(this.branch, b.branch);
      } else if (level === 1) {
        this.sel2click(b); //.value
        this.branch = calcBranch(this.branch, b.branch);
      } else if (level === 2) {
        this.sel3click(b.value);
      }
      //if level in [0,1] then @branch = calcBranch @branch, b.branch
      return updateTables();
    };
    this.handleRow(b);
    return b;
  }

  addCommand(title, level, colors) {
    var b, code;
    b = makeButton(title, level, colors);
    code = this.calls[title];
    b.onclick = function() {
      if (run1(code) === true) {
        run0(code);
      }
      return compare();
    };
    this.handleRow(b);
    return b;
  }

  exer() {
    if (this.exercise === '' || this.exercise === null) {
      return '';
    }
    return this.exercise; //.split(' ')[0]	
  }

  setState(st) {
    this.state = st;
    //if st==2 then @calls = data[@chapter][@exercise].c else @calls = {}
    if (st === 2 && _.size(this.calls) > 0) {
      $('#input').show();
    } else {
      $('#input').hide();
    }
    if (st === 2) {
      msg.show();
    } else {
      msg.hide();
    }
    if (st === 2) {
      $(".CodeMirror").show();
    } else {
      $(".CodeMirror").hide();
    }
    if (st <= 2) { // 1
      this.calls = {};
      tableClear();
      bg(0.5);
    }
    if (st === 1) {
      return this.exercise = "";
    }
  }

  sel1click(chapter) {
    var value;
    value = chapter.slice(3);
    this.chapter = value;
    this.exercise = "";
    this.calls = {};
    return this.setState(1);
  }

  sel2click(b) {
    var arr, calls, code, exercise, src, value;
    exercise = b.value;
    value = exercise.slice(3);
    arr = value.split(' ');
    this.exercise = arr[0];
    if (this.exer() === "") {
      myCodeMirror.setValue("");
      bg(0.5);
      return;
    }
    this.calls = data[this.chapter][this.exer()].c;
    if (exercise.indexOf('+') >= 0) {
      this.setState(2);
      src = localStorage[this.exer() + "/d"];
      if (src === void 0 || src === null || src === '') {
        if (data[this.chapter][this.exer()]) {
          src = data[this.chapter][this.exer()].b;
          localStorage[this.exer() + "/d"] = src;
          localStorage[this.exer() + "/v"] = data[this.chapter][this.exer()].v;
        }
      }
      myCodeMirror.setValue(src);
      tableClear();
      calls = data[this.chapter][this.exer()].c;
      if (_.size(calls) > 0) {
        code = this.calls["draw()"];
      }
      if (run1(code) === true) {
        run0(code);
      }
      myCodeMirror.focus();
      return compare();
    } else {
      return this.setState(1);
    }
  }

  sel3click(keyword) {
    var url, win;
    url = buildLink(keyword);
    if (url != null) {
      win = window.open(url, '_blank');
      return win.focus();
    }
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\p5Dojo\coffee\menu.coffee