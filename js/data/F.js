// Generated by CoffeeScript 1.11.1
var ID_Five, ID_ForthHaiku, ID_ForthHaiku3D;

ID_Five = {
  v: '2017-04-29',
  k: 'bg circle fc sc',
  l: 12,
  b: "",
  a: "bg 0.5\nsc()\nfc 1\ncircle 100,100,20\nfc 1,0,0\ncircle 40,40,20\nfc 1,1,0\ncircle 40,160,20\nfc 0,1,0\ncircle 160,160,20\nfc 0,0,1\ncircle 160,40,20"
};

ID_ForthHaiku = {
  v: '2017-04-29',
  k: 'fc range if [] _.last rect for parseFloat class',
  l: 45,
  b: "# Lös först exemplen mha länken nedan!\n\nclass ForthHaiku extends Application\n	reset : ->\n		super\n	resolution : (@n,@size) ->\n	nextExample : ->\n	prevExample : ->\napp = new ForthHaiku",
  a: "class ForthHaiku extends Application\n	draw : ->\n		bg 0.5\n		digit = (bool) -> if bool then 1 else 0\n		stack = []\n		dict = {}\n		dict['x'] = => stack.push x / @n\n		dict['y'] = => stack.push y / @n\n		dict['<'] = -> stack.push(digit stack.pop() > stack.pop())\n		dict['>'] = -> stack.push(digit(stack.pop() < stack.pop()))\n		dict['+'] = -> stack.push stack.pop() + stack.pop()\n		dict['-'] = -> stack.push -stack.pop() + stack.pop()\n		dict['*'] = -> stack.push stack.pop() * stack.pop()\n		dict['sq'] = ->\n			temp = stack.pop()\n			stack.push temp * temp\n		dict['%'] = ->\n			a = stack.pop()\n			b = stack.pop()\n			stack.push b % a\n		dict['floor'] = -> stack.push floor stack.pop()\n		dict['and'] = -> #  pga kortslutning\n			a = stack.pop() != 0\n			b = stack.pop() != 0\n			stack.push digit a and b\n		arr = @example.split ' '\n		sc()\n		for x in range @n\n		  for y in range @n\n		    stack = []\n		    for cmd in arr\n		      if dict[cmd] then dict[cmd]()\n		      else stack.push parseFloat cmd\n		    stack.push 0 for i in range 3-stack.length\n		    fc stack[0], stack[1], stack[2]\n		    rect @size * x, @size * y, @size, @size\n	reset : ->\n		super\n		@resolution()\n		@select 0\n	resolution : (@n=10,@size=20) ->\n	nextExample : -> @select @index+1\n	prevExample : -> @select @index-1\n	select : (n) ->\n		examples = '1|1 1|0 1|0.25 0.25 0.25|1 1 1|x|x y|x y >|x 0.5 >|x 0.5 - sq y 0.5 - sq + 0.25 <|x 8 * floor y 8 * floor + 2 %|x 0.5 < y 0.5 <|x 0.5 < y 0.5 < and'\n		examples = examples.split '|'\n		@index = constrain n,0,examples.length-1\n		@example = examples[@index]\n\napp = new ForthHaiku \"a\"",
  c: {
    app: "reset()|resolution 10,20|resolution 20,10|resolution 50,4|resolution 100,2|resolution 200,1|nextExample()|prevExample()"
  },
  e: {
    "ForthHaiku": "http://forthsalon.appspot.com"
  }
};

ID_ForthHaiku3D = {
  v: '2017-05-23',
  k: 'bg sc fc range for if quad line operators class []',
  l: 104,
  b: "# Kommandon: i j k t < > == <= >= != + - * / // % %% abs and or not dup bit swp\n# false == 0, true == 1\n# Exempel: k t 10 % ==\n\nclass ForthHaiku3D extends Application\n	reset : ->\n		super\n	draw : ->\n	enter : ->\n	tick : ->\n	mousePressed : ->\napp = new ForthHaiku3D",
  a: "class ForthHaiku3D extends Application\n	reset : ->\n		super\n		@SHADE = [0.5,0.75,1]\n		@N=10\n		@DX=10\n		@DY=5\n		@showGrid = true\n		@clear()\n		@t = 0\n	clear : -> @blocks = Array(1000).fill 0\n	add : (i,j,k) -> @blocks[@N*@N*i+@N*j+k] = 1\n	draw : ->\n		bg 0.5\n		if @showGrid then @grid()\n		sc()\n		@drawBlock index for index in range @N*@N*@N\n	drawBlock : (index) ->\n		f = (i,j,k) => [100+(10-i)*@DX-2*(10-j)*@DY, 200-(10-j)*@DY-(10-i)*@DX/2 - k*@DY*2]\n		q = (a,b,c,d) -> quad a[0],a[1], b[0],b[1], c[0],c[1], d[0],d[1]\n		ix=index\n		k = ix % @N; ix //= @N\n		j = ix % @N; ix //= @N\n		i = ix\n		block = @blocks[index]\n		if not block? or block==0 then return\n		[r,g,b] = [i/9,j/9,k/9] # borde vara i,j,k\n		p0 = f i,  j,  k # egentligen osynlig\n		p1 = f i+1,j,  k\n		p2 = f i,  j+1,k\n		p3 = f i+1,j+1,k\n		p4 = f i  ,j,  k+1\n		p5 = f i+1,j,  k+1\n		p6 = f i  ,j+1,k+1\n		p7 = f i+1,j+1,k+1\n		[si,sj,sk] = @SHADE\n		fc r*sj,g*sj,b*sj\n		q p2,p6,p7,p3 # left\n		fc r*si,g*si,b*si\n		q p1,p3,p7,p5 # right\n		fc r*sk,g*sk,b*sk\n		q p4,p5,p7,p6 # roof\n	grid : ->\n		sc 0.75\n		[w2,w3,w4] = [2*200/4,3*200/4,4*200/4]\n		for i in range @N+1\n			line w2+@DX*i, w4-@DY*i,    @DX*i, w3-@DY*i\n			line w2-@DX*i, w4-@DY*i, w4-@DX*i, w3-@DY*i\n	mousePressed : ->\n		@showGrid = not @showGrid\n		@enter()\n	tick : ->\n		@t = @t + 1\n		@enter()\n	enter : ->\n		digit = (bool) -> if bool then 1 else 0\n		@clear()\n		s = @readText().trim()\n		if s=='' then s='k t 10 % =='\n		arr = s.split ' '\n		@words = arr.length\n		@trace = ''\n		@count = 0\n		for i in range @N\n			for j in range @N\n				for k in range @N\n					stack = []\n					for cmd in arr\n						if cmd == 'dup' then stack.push _.last stack\n						else if cmd == 'swp'\n							n = stack.length - 1\n							[stack[n-1],stack[n]] = [stack[n],stack[n-1]]\n						else if cmd == 'i'  then stack.push i\n						else if cmd == 'j'  then stack.push j\n						else if cmd == 'k'  then stack.push k\n						else if cmd == 't'  then stack.push @t\n						else if cmd == '<'  then stack.push digit stack.pop() > stack.pop()\n						else if cmd == '>'  then stack.push digit stack.pop() < stack.pop()\n						else if cmd == '==' then stack.push digit stack.pop() == stack.pop()\n						else if cmd == '<=' then stack.push digit stack.pop() >= stack.pop()\n						else if cmd == '>=' then stack.push digit stack.pop() <= stack.pop()\n						else if cmd == '!=' then stack.push digit stack.pop() != stack.pop()\n						else if cmd == '+'  then stack.push stack.pop() + stack.pop()\n						else if cmd == '-'  then stack.push -stack.pop() + stack.pop()\n						else if cmd == '*'  then stack.push stack.pop() * stack.pop()\n						else if cmd == '/'\n							a = stack.pop()\n							stack.push stack.pop() / a\n						else if cmd == '//'\n							a = stack.pop()\n							stack.push stack.pop() // a\n						else if cmd == '%'\n							a = stack.pop()\n							stack.push stack.pop() % a\n						else if cmd == '%%'\n							a = stack.pop()\n							stack.push stack.pop() %% a\n						else if cmd == 'bit' then stack.push (stack.pop() >> stack.pop()) & 1  # 9 1023 bit => 1\n						else if cmd == 'and' then stack.push stack.pop() * stack.pop()\n						else if cmd == 'or'  then stack.push digit stack.pop() + stack.pop() >= 1\n						else if cmd == 'not' then stack.push 1 - stack.pop()\n						else if cmd == 'abs' then stack.push abs stack.pop()\n						else stack.push parseFloat cmd\n						if i==9 and j==9 and k==9 then @trace += cmd + ' [' + stack.join(',') + '] '\n					if stack.pop() != 0\n						@count++\n						@add i,j,k\n		@trace = @trace.trim()\napp = new ForthHaiku3D \"a\"\n",
  c: {
    app: "reset()|enter()|tick()"
  },
  e: {
    ForthHaiku: "http://forthsalon.appspot.com/haiku-editor",
    Exempel: 'ForthHaiku3D.html'
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRi5qcyIsInNvdXJjZVJvb3QiOiIuLlxcLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcZGF0YVxcRi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUE7O0FBQUEsT0FBQSxHQUNDO0VBQUEsQ0FBQSxFQUFFLFlBQUY7RUFDQSxDQUFBLEVBQUUsaUJBREY7RUFFQSxDQUFBLEVBQUUsRUFGRjtFQUdBLENBQUEsRUFBRyxFQUhIO0VBSUEsQ0FBQSxFQUFHLHVKQUpIOzs7QUFtQkQsYUFBQSxHQUNDO0VBQUEsQ0FBQSxFQUFFLFlBQUY7RUFDQSxDQUFBLEVBQUUsaURBREY7RUFFQSxDQUFBLEVBQUUsRUFGRjtFQUdBLENBQUEsRUFBRSwrTEFIRjtFQWNBLENBQUEsRUFBRSx5bERBZEY7RUFrRUEsQ0FBQSxFQUNDO0lBQUEsR0FBQSxFQUFNLHlIQUFOO0dBbkVEO0VBb0VBLENBQUEsRUFDQztJQUFBLFlBQUEsRUFBZSwrQkFBZjtHQXJFRDs7O0FBdUVELGVBQUEsR0FDQztFQUFBLENBQUEsRUFBRSxZQUFGO0VBQ0EsQ0FBQSxFQUFFLG9EQURGO0VBRUEsQ0FBQSxFQUFFLEdBRkY7RUFHQSxDQUFBLEVBQUUsbVJBSEY7RUFpQkEsQ0FBQSxFQUFFLDZoSEFqQkY7RUFpSUEsQ0FBQSxFQUNDO0lBQUEsR0FBQSxFQUFNLHdCQUFOO0dBbElEO0VBbUlBLENBQUEsRUFDQztJQUFBLFVBQUEsRUFBYSw0Q0FBYjtJQUNBLE9BQUEsRUFBVSxtQkFEVjtHQXBJRCIsInNvdXJjZXNDb250ZW50IjpbIklEX0ZpdmUgPVxuXHR2OicyMDE3LTA0LTI5J1xuXHRrOidiZyBjaXJjbGUgZmMgc2MnXG5cdGw6MTJcblx0YjogXCJcIlxuXHRhOiBcIlwiXCJcbmJnIDAuNVxuc2MoKVxuZmMgMVxuY2lyY2xlIDEwMCwxMDAsMjBcbmZjIDEsMCwwXG5jaXJjbGUgNDAsNDAsMjBcbmZjIDEsMSwwXG5jaXJjbGUgNDAsMTYwLDIwXG5mYyAwLDEsMFxuY2lyY2xlIDE2MCwxNjAsMjBcbmZjIDAsMCwxXG5jaXJjbGUgMTYwLDQwLDIwXG5cIlwiXCJcblxuSURfRm9ydGhIYWlrdSA9XG5cdHY6JzIwMTctMDQtMjknXG5cdGs6J2ZjIHJhbmdlIGlmIFtdIF8ubGFzdCByZWN0IGZvciBwYXJzZUZsb2F0IGNsYXNzJ1xuXHRsOjQ1XG5cdGI6XCJcIlwiXG4jIEzDtnMgZsO2cnN0IGV4ZW1wbGVuIG1oYSBsw6Rua2VuIG5lZGFuIVxuXG5jbGFzcyBGb3J0aEhhaWt1IGV4dGVuZHMgQXBwbGljYXRpb25cblx0cmVzZXQgOiAtPlxuXHRcdHN1cGVyXG5cdHJlc29sdXRpb24gOiAoQG4sQHNpemUpIC0+XG5cdG5leHRFeGFtcGxlIDogLT5cblx0cHJldkV4YW1wbGUgOiAtPlxuYXBwID0gbmV3IEZvcnRoSGFpa3VcblwiXCJcIlxuXHRhOlwiXCJcIlxuY2xhc3MgRm9ydGhIYWlrdSBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdGRyYXcgOiAtPlxuXHRcdGJnIDAuNVxuXHRcdGRpZ2l0ID0gKGJvb2wpIC0+IGlmIGJvb2wgdGhlbiAxIGVsc2UgMFxuXHRcdHN0YWNrID0gW11cblx0XHRkaWN0ID0ge31cblx0XHRkaWN0Wyd4J10gPSA9PiBzdGFjay5wdXNoIHggLyBAblxuXHRcdGRpY3RbJ3knXSA9ID0+IHN0YWNrLnB1c2ggeSAvIEBuXG5cdFx0ZGljdFsnPCddID0gLT4gc3RhY2sucHVzaChkaWdpdCBzdGFjay5wb3AoKSA+IHN0YWNrLnBvcCgpKVxuXHRcdGRpY3RbJz4nXSA9IC0+IHN0YWNrLnB1c2goZGlnaXQoc3RhY2sucG9wKCkgPCBzdGFjay5wb3AoKSkpXG5cdFx0ZGljdFsnKyddID0gLT4gc3RhY2sucHVzaCBzdGFjay5wb3AoKSArIHN0YWNrLnBvcCgpXG5cdFx0ZGljdFsnLSddID0gLT4gc3RhY2sucHVzaCAtc3RhY2sucG9wKCkgKyBzdGFjay5wb3AoKVxuXHRcdGRpY3RbJyonXSA9IC0+IHN0YWNrLnB1c2ggc3RhY2sucG9wKCkgKiBzdGFjay5wb3AoKVxuXHRcdGRpY3RbJ3NxJ10gPSAtPlxuXHRcdFx0dGVtcCA9IHN0YWNrLnBvcCgpXG5cdFx0XHRzdGFjay5wdXNoIHRlbXAgKiB0ZW1wXG5cdFx0ZGljdFsnJSddID0gLT5cblx0XHRcdGEgPSBzdGFjay5wb3AoKVxuXHRcdFx0YiA9IHN0YWNrLnBvcCgpXG5cdFx0XHRzdGFjay5wdXNoIGIgJSBhXG5cdFx0ZGljdFsnZmxvb3InXSA9IC0+IHN0YWNrLnB1c2ggZmxvb3Igc3RhY2sucG9wKClcblx0XHRkaWN0WydhbmQnXSA9IC0+ICMgIHBnYSBrb3J0c2x1dG5pbmdcblx0XHRcdGEgPSBzdGFjay5wb3AoKSAhPSAwXG5cdFx0XHRiID0gc3RhY2sucG9wKCkgIT0gMFxuXHRcdFx0c3RhY2sucHVzaCBkaWdpdCBhIGFuZCBiXG5cdFx0YXJyID0gQGV4YW1wbGUuc3BsaXQgJyAnXG5cdFx0c2MoKVxuXHRcdGZvciB4IGluIHJhbmdlIEBuXG5cdFx0ICBmb3IgeSBpbiByYW5nZSBAblxuXHRcdCAgICBzdGFjayA9IFtdXG5cdFx0ICAgIGZvciBjbWQgaW4gYXJyXG5cdFx0ICAgICAgaWYgZGljdFtjbWRdIHRoZW4gZGljdFtjbWRdKClcblx0XHQgICAgICBlbHNlIHN0YWNrLnB1c2ggcGFyc2VGbG9hdCBjbWRcblx0XHQgICAgc3RhY2sucHVzaCAwIGZvciBpIGluIHJhbmdlIDMtc3RhY2subGVuZ3RoXG5cdFx0ICAgIGZjIHN0YWNrWzBdLCBzdGFja1sxXSwgc3RhY2tbMl1cblx0XHQgICAgcmVjdCBAc2l6ZSAqIHgsIEBzaXplICogeSwgQHNpemUsIEBzaXplXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRcdEByZXNvbHV0aW9uKClcblx0XHRAc2VsZWN0IDBcblx0cmVzb2x1dGlvbiA6IChAbj0xMCxAc2l6ZT0yMCkgLT5cblx0bmV4dEV4YW1wbGUgOiAtPiBAc2VsZWN0IEBpbmRleCsxXG5cdHByZXZFeGFtcGxlIDogLT4gQHNlbGVjdCBAaW5kZXgtMVxuXHRzZWxlY3QgOiAobikgLT5cblx0XHRleGFtcGxlcyA9ICcxfDEgMXwwIDF8MC4yNSAwLjI1IDAuMjV8MSAxIDF8eHx4IHl8eCB5ID58eCAwLjUgPnx4IDAuNSAtIHNxIHkgMC41IC0gc3EgKyAwLjI1IDx8eCA4ICogZmxvb3IgeSA4ICogZmxvb3IgKyAyICV8eCAwLjUgPCB5IDAuNSA8fHggMC41IDwgeSAwLjUgPCBhbmQnXG5cdFx0ZXhhbXBsZXMgPSBleGFtcGxlcy5zcGxpdCAnfCdcblx0XHRAaW5kZXggPSBjb25zdHJhaW4gbiwwLGV4YW1wbGVzLmxlbmd0aC0xXG5cdFx0QGV4YW1wbGUgPSBleGFtcGxlc1tAaW5kZXhdXG5cbmFwcCA9IG5ldyBGb3J0aEhhaWt1IFwiYVwiXG5cIlwiXCJcblx0Yzpcblx0XHRhcHAgOiBcInJlc2V0KCl8cmVzb2x1dGlvbiAxMCwyMHxyZXNvbHV0aW9uIDIwLDEwfHJlc29sdXRpb24gNTAsNHxyZXNvbHV0aW9uIDEwMCwyfHJlc29sdXRpb24gMjAwLDF8bmV4dEV4YW1wbGUoKXxwcmV2RXhhbXBsZSgpXCJcblx0ZTpcblx0XHRcIkZvcnRoSGFpa3VcIiA6IFwiaHR0cDovL2ZvcnRoc2Fsb24uYXBwc3BvdC5jb21cIlxuXG5JRF9Gb3J0aEhhaWt1M0QgPVxuXHR2OicyMDE3LTA1LTIzJ1xuXHRrOidiZyBzYyBmYyByYW5nZSBmb3IgaWYgcXVhZCBsaW5lIG9wZXJhdG9ycyBjbGFzcyBbXSdcblx0bDoxMDRcblx0YjpcIlwiXCJcbiMgS29tbWFuZG9uOiBpIGogayB0IDwgPiA9PSA8PSA+PSAhPSArIC0gKiAvIC8vICUgJSUgYWJzIGFuZCBvciBub3QgZHVwIGJpdCBzd3BcbiMgZmFsc2UgPT0gMCwgdHJ1ZSA9PSAxXG4jIEV4ZW1wZWw6IGsgdCAxMCAlID09XG5cbmNsYXNzIEZvcnRoSGFpa3UzRCBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRkcmF3IDogLT5cblx0ZW50ZXIgOiAtPlxuXHR0aWNrIDogLT5cblx0bW91c2VQcmVzc2VkIDogLT5cbmFwcCA9IG5ldyBGb3J0aEhhaWt1M0RcblwiXCJcIlxuXHRhOlwiXCJcIlxuY2xhc3MgRm9ydGhIYWlrdTNEIGV4dGVuZHMgQXBwbGljYXRpb25cblx0cmVzZXQgOiAtPlxuXHRcdHN1cGVyXG5cdFx0QFNIQURFID0gWzAuNSwwLjc1LDFdXG5cdFx0QE49MTBcblx0XHRARFg9MTBcblx0XHRARFk9NVxuXHRcdEBzaG93R3JpZCA9IHRydWVcblx0XHRAY2xlYXIoKVxuXHRcdEB0ID0gMFxuXHRjbGVhciA6IC0+IEBibG9ja3MgPSBBcnJheSgxMDAwKS5maWxsIDBcblx0YWRkIDogKGksaixrKSAtPiBAYmxvY2tzW0BOKkBOKmkrQE4qaitrXSA9IDFcblx0ZHJhdyA6IC0+XG5cdFx0YmcgMC41XG5cdFx0aWYgQHNob3dHcmlkIHRoZW4gQGdyaWQoKVxuXHRcdHNjKClcblx0XHRAZHJhd0Jsb2NrIGluZGV4IGZvciBpbmRleCBpbiByYW5nZSBATipATipATlxuXHRkcmF3QmxvY2sgOiAoaW5kZXgpIC0+XG5cdFx0ZiA9IChpLGosaykgPT4gWzEwMCsoMTAtaSkqQERYLTIqKDEwLWopKkBEWSwgMjAwLSgxMC1qKSpARFktKDEwLWkpKkBEWC8yIC0gaypARFkqMl1cblx0XHRxID0gKGEsYixjLGQpIC0+IHF1YWQgYVswXSxhWzFdLCBiWzBdLGJbMV0sIGNbMF0sY1sxXSwgZFswXSxkWzFdXG5cdFx0aXg9aW5kZXhcblx0XHRrID0gaXggJSBATjsgaXggLy89IEBOXG5cdFx0aiA9IGl4ICUgQE47IGl4IC8vPSBATlxuXHRcdGkgPSBpeFxuXHRcdGJsb2NrID0gQGJsb2Nrc1tpbmRleF1cblx0XHRpZiBub3QgYmxvY2s/IG9yIGJsb2NrPT0wIHRoZW4gcmV0dXJuXG5cdFx0W3IsZyxiXSA9IFtpLzksai85LGsvOV0gIyBib3JkZSB2YXJhIGksaixrXG5cdFx0cDAgPSBmIGksICBqLCAgayAjIGVnZW50bGlnZW4gb3N5bmxpZ1xuXHRcdHAxID0gZiBpKzEsaiwgIGtcblx0XHRwMiA9IGYgaSwgIGorMSxrXG5cdFx0cDMgPSBmIGkrMSxqKzEsa1xuXHRcdHA0ID0gZiBpICAsaiwgIGsrMVxuXHRcdHA1ID0gZiBpKzEsaiwgIGsrMVxuXHRcdHA2ID0gZiBpICAsaisxLGsrMVxuXHRcdHA3ID0gZiBpKzEsaisxLGsrMVxuXHRcdFtzaSxzaixza10gPSBAU0hBREVcblx0XHRmYyByKnNqLGcqc2osYipzalxuXHRcdHEgcDIscDYscDcscDMgIyBsZWZ0XG5cdFx0ZmMgcipzaSxnKnNpLGIqc2lcblx0XHRxIHAxLHAzLHA3LHA1ICMgcmlnaHRcblx0XHRmYyByKnNrLGcqc2ssYipza1xuXHRcdHEgcDQscDUscDcscDYgIyByb29mXG5cdGdyaWQgOiAtPlxuXHRcdHNjIDAuNzVcblx0XHRbdzIsdzMsdzRdID0gWzIqMjAwLzQsMyoyMDAvNCw0KjIwMC80XVxuXHRcdGZvciBpIGluIHJhbmdlIEBOKzFcblx0XHRcdGxpbmUgdzIrQERYKmksIHc0LUBEWSppLCAgICBARFgqaSwgdzMtQERZKmlcblx0XHRcdGxpbmUgdzItQERYKmksIHc0LUBEWSppLCB3NC1ARFgqaSwgdzMtQERZKmlcblx0bW91c2VQcmVzc2VkIDogLT5cblx0XHRAc2hvd0dyaWQgPSBub3QgQHNob3dHcmlkXG5cdFx0QGVudGVyKClcblx0dGljayA6IC0+XG5cdFx0QHQgPSBAdCArIDFcblx0XHRAZW50ZXIoKVxuXHRlbnRlciA6IC0+XG5cdFx0ZGlnaXQgPSAoYm9vbCkgLT4gaWYgYm9vbCB0aGVuIDEgZWxzZSAwXG5cdFx0QGNsZWFyKClcblx0XHRzID0gQHJlYWRUZXh0KCkudHJpbSgpXG5cdFx0aWYgcz09JycgdGhlbiBzPSdrIHQgMTAgJSA9PSdcblx0XHRhcnIgPSBzLnNwbGl0ICcgJ1xuXHRcdEB3b3JkcyA9IGFyci5sZW5ndGhcblx0XHRAdHJhY2UgPSAnJ1xuXHRcdEBjb3VudCA9IDBcblx0XHRmb3IgaSBpbiByYW5nZSBATlxuXHRcdFx0Zm9yIGogaW4gcmFuZ2UgQE5cblx0XHRcdFx0Zm9yIGsgaW4gcmFuZ2UgQE5cblx0XHRcdFx0XHRzdGFjayA9IFtdXG5cdFx0XHRcdFx0Zm9yIGNtZCBpbiBhcnJcblx0XHRcdFx0XHRcdGlmIGNtZCA9PSAnZHVwJyB0aGVuIHN0YWNrLnB1c2ggXy5sYXN0IHN0YWNrXG5cdFx0XHRcdFx0XHRlbHNlIGlmIGNtZCA9PSAnc3dwJ1xuXHRcdFx0XHRcdFx0XHRuID0gc3RhY2subGVuZ3RoIC0gMVxuXHRcdFx0XHRcdFx0XHRbc3RhY2tbbi0xXSxzdGFja1tuXV0gPSBbc3RhY2tbbl0sc3RhY2tbbi0xXV1cblx0XHRcdFx0XHRcdGVsc2UgaWYgY21kID09ICdpJyAgdGhlbiBzdGFjay5wdXNoIGlcblx0XHRcdFx0XHRcdGVsc2UgaWYgY21kID09ICdqJyAgdGhlbiBzdGFjay5wdXNoIGpcblx0XHRcdFx0XHRcdGVsc2UgaWYgY21kID09ICdrJyAgdGhlbiBzdGFjay5wdXNoIGtcblx0XHRcdFx0XHRcdGVsc2UgaWYgY21kID09ICd0JyAgdGhlbiBzdGFjay5wdXNoIEB0XG5cdFx0XHRcdFx0XHRlbHNlIGlmIGNtZCA9PSAnPCcgIHRoZW4gc3RhY2sucHVzaCBkaWdpdCBzdGFjay5wb3AoKSA+IHN0YWNrLnBvcCgpXG5cdFx0XHRcdFx0XHRlbHNlIGlmIGNtZCA9PSAnPicgIHRoZW4gc3RhY2sucHVzaCBkaWdpdCBzdGFjay5wb3AoKSA8IHN0YWNrLnBvcCgpXG5cdFx0XHRcdFx0XHRlbHNlIGlmIGNtZCA9PSAnPT0nIHRoZW4gc3RhY2sucHVzaCBkaWdpdCBzdGFjay5wb3AoKSA9PSBzdGFjay5wb3AoKVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiBjbWQgPT0gJzw9JyB0aGVuIHN0YWNrLnB1c2ggZGlnaXQgc3RhY2sucG9wKCkgPj0gc3RhY2sucG9wKClcblx0XHRcdFx0XHRcdGVsc2UgaWYgY21kID09ICc+PScgdGhlbiBzdGFjay5wdXNoIGRpZ2l0IHN0YWNrLnBvcCgpIDw9IHN0YWNrLnBvcCgpXG5cdFx0XHRcdFx0XHRlbHNlIGlmIGNtZCA9PSAnIT0nIHRoZW4gc3RhY2sucHVzaCBkaWdpdCBzdGFjay5wb3AoKSAhPSBzdGFjay5wb3AoKVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiBjbWQgPT0gJysnICB0aGVuIHN0YWNrLnB1c2ggc3RhY2sucG9wKCkgKyBzdGFjay5wb3AoKVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiBjbWQgPT0gJy0nICB0aGVuIHN0YWNrLnB1c2ggLXN0YWNrLnBvcCgpICsgc3RhY2sucG9wKClcblx0XHRcdFx0XHRcdGVsc2UgaWYgY21kID09ICcqJyAgdGhlbiBzdGFjay5wdXNoIHN0YWNrLnBvcCgpICogc3RhY2sucG9wKClcblx0XHRcdFx0XHRcdGVsc2UgaWYgY21kID09ICcvJ1xuXHRcdFx0XHRcdFx0XHRhID0gc3RhY2sucG9wKClcblx0XHRcdFx0XHRcdFx0c3RhY2sucHVzaCBzdGFjay5wb3AoKSAvIGFcblx0XHRcdFx0XHRcdGVsc2UgaWYgY21kID09ICcvLydcblx0XHRcdFx0XHRcdFx0YSA9IHN0YWNrLnBvcCgpXG5cdFx0XHRcdFx0XHRcdHN0YWNrLnB1c2ggc3RhY2sucG9wKCkgLy8gYVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiBjbWQgPT0gJyUnXG5cdFx0XHRcdFx0XHRcdGEgPSBzdGFjay5wb3AoKVxuXHRcdFx0XHRcdFx0XHRzdGFjay5wdXNoIHN0YWNrLnBvcCgpICUgYVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiBjbWQgPT0gJyUlJ1xuXHRcdFx0XHRcdFx0XHRhID0gc3RhY2sucG9wKClcblx0XHRcdFx0XHRcdFx0c3RhY2sucHVzaCBzdGFjay5wb3AoKSAlJSBhXG5cdFx0XHRcdFx0XHRlbHNlIGlmIGNtZCA9PSAnYml0JyB0aGVuIHN0YWNrLnB1c2ggKHN0YWNrLnBvcCgpID4+IHN0YWNrLnBvcCgpKSAmIDEgICMgOSAxMDIzIGJpdCA9PiAxXG5cdFx0XHRcdFx0XHRlbHNlIGlmIGNtZCA9PSAnYW5kJyB0aGVuIHN0YWNrLnB1c2ggc3RhY2sucG9wKCkgKiBzdGFjay5wb3AoKVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiBjbWQgPT0gJ29yJyAgdGhlbiBzdGFjay5wdXNoIGRpZ2l0IHN0YWNrLnBvcCgpICsgc3RhY2sucG9wKCkgPj0gMVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiBjbWQgPT0gJ25vdCcgdGhlbiBzdGFjay5wdXNoIDEgLSBzdGFjay5wb3AoKVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiBjbWQgPT0gJ2FicycgdGhlbiBzdGFjay5wdXNoIGFicyBzdGFjay5wb3AoKVxuXHRcdFx0XHRcdFx0ZWxzZSBzdGFjay5wdXNoIHBhcnNlRmxvYXQgY21kXG5cdFx0XHRcdFx0XHRpZiBpPT05IGFuZCBqPT05IGFuZCBrPT05IHRoZW4gQHRyYWNlICs9IGNtZCArICcgWycgKyBzdGFjay5qb2luKCcsJykgKyAnXSAnXG5cdFx0XHRcdFx0aWYgc3RhY2sucG9wKCkgIT0gMFxuXHRcdFx0XHRcdFx0QGNvdW50Kytcblx0XHRcdFx0XHRcdEBhZGQgaSxqLGtcblx0XHRAdHJhY2UgPSBAdHJhY2UudHJpbSgpXG5hcHAgPSBuZXcgRm9ydGhIYWlrdTNEIFwiYVwiXG5cblwiXCJcIlxuXHRjOlxuXHRcdGFwcCA6IFwicmVzZXQoKXxlbnRlcigpfHRpY2soKVwiXG5cdGU6XG5cdFx0Rm9ydGhIYWlrdSA6IFwiaHR0cDovL2ZvcnRoc2Fsb24uYXBwc3BvdC5jb20vaGFpa3UtZWRpdG9yXCJcblx0XHRFeGVtcGVsIDogJ0ZvcnRoSGFpa3UzRC5odG1sJ1xuIl19
//# sourceURL=C:\github\p5Dojo\coffee\data\F.coffee