// Generated by CoffeeScript 1.11.1
var ID_Five, ID_ForthHaiku, ID_ForthHaiku3D;

ID_Five = {
  v: '2017-04-29',
  k: 'bg circle fc sc',
  l: 12,
  b: "",
  a: "bg 0.5\nsc()\nfc 1\ncircle 100,100,20\nfc 1,0,0\ncircle 40,40,20\nfc 1,1,0\ncircle 40,160,20\nfc 0,1,0\ncircle 160,160,20\nfc 0,0,1\ncircle 160,40,20"
};

ID_ForthHaiku = {
  v: '2017-04-29',
  k: 'fc range if [] _.last rect for parseFloat class',
  l: 45,
  b: "# Lös först exemplen mha länken nedan!\n\nclass ForthHaiku extends Application\n	reset : ->\n		super\n	resolution : (@n,@size) ->\n	nextExample : ->\n	prevExample : ->\napp = new ForthHaiku",
  a: "class ForthHaiku extends Application\n	draw : ->\n		bg 0.5\n		digit = (bool) -> if bool then 1 else 0\n		stack = []\n		dict = {}\n		dict['x'] = => stack.push x / @n\n		dict['y'] = => stack.push y / @n\n		dict['<'] = -> stack.push(digit stack.pop() > stack.pop())\n		dict['>'] = -> stack.push(digit(stack.pop() < stack.pop()))\n		dict['+'] = -> stack.push stack.pop() + stack.pop()\n		dict['-'] = -> stack.push -stack.pop() + stack.pop()\n		dict['*'] = -> stack.push stack.pop() * stack.pop()\n		dict['sq'] = ->\n			temp = stack.pop()\n			stack.push temp * temp\n		dict['%'] = ->\n			a = stack.pop()\n			b = stack.pop()\n			stack.push b % a\n		dict['floor'] = -> stack.push floor stack.pop()\n		dict['and'] = -> #  pga kortslutning\n			a = stack.pop() != 0\n			b = stack.pop() != 0\n			stack.push digit a and b\n		arr = @example.split ' '\n		sc()\n		for x in range @n\n		  for y in range @n\n		    stack = []\n		    for cmd in arr\n		      if dict[cmd] then dict[cmd]()\n		      else stack.push parseFloat cmd\n		    stack.push 0 for i in range 3-stack.length\n		    fc stack[0], stack[1], stack[2]\n		    rect @size * x, @size * y, @size, @size\n	reset : ->\n		super\n		@resolution()\n		@select 0\n	resolution : (@n=10,@size=20) ->\n	nextExample : -> @select @index+1\n	prevExample : -> @select @index-1\n	select : (n) ->\n		examples = '1|1 1|0 1|0.25 0.25 0.25|1 1 1|x|x y|x y >|x 0.5 >|x 0.5 - sq y 0.5 - sq + 0.25 <|x 8 * floor y 8 * floor + 2 %|x 0.5 < y 0.5 <|x 0.5 < y 0.5 < and'\n		examples = examples.split '|'\n		@index = constrain n,0,examples.length-1\n		@example = examples[@index]\n\napp = new ForthHaiku \"a\"",
  c: {
    app: "reset()|resolution 10,20|resolution 20,10|resolution 50,4|resolution 100,2|resolution 200,1|nextExample()|prevExample()"
  },
  e: {
    "ForthHaiku": "http://forthsalon.appspot.com"
  }
};

ID_ForthHaiku3D = {
  v: '2017-05-22',
  k: 'bg sc fc range for if quad line operators class []',
  l: 83,
  b: "# Kommandon: i j k < > == <= >= != + - * / % and or not dup\n# false == 0, true == 1\n# i 5 == j 5 == k 5 == or or\n# i 5 != j 5 != k 5 != and and\n# 2 i <= i 7 <= and 2 j <= j 7 <= and 2 k <= k 7 <= and + + 1 <=\n# i 4.5 - dup * j 4.5 - dup * k 4.5 - dup * + + 23 <\n\nclass ForthHaiku3D extends Application\n	reset : ->\n		super\n	draw : ->\n	enter : ->\n	mousePressed : ->\napp = new ForthHaiku3D",
  a: "class ForthHaiku3D extends Application\n	reset : ->\n		super\n		@shade = [0.5,0.75,1]\n		@n=10\n		@dx=10\n		@dy=5\n		@showGrid = true\n		@clear()\n	clear : -> @blocks = Array(1000).fill 0\n	add : (i,j,k) -> @blocks[@n*@n*i+@n*j+k] = 1\n	draw : ->\n		bg 0.5\n		if @showGrid then @grid()\n		sc()\n		@drawBlock index for index in range @n*@n*@n\n	drawBlock : (index) ->\n		f = (i,j,k) => [100+(10-i)*@dx-2*(10-j)*@dy, 200-(10-j)*@dy-(10-i)*@dx/2 - k*@dy*2]\n		q = (a,b,c,d) -> quad a[0],a[1], b[0],b[1], c[0],c[1], d[0],d[1]\n		ix=index\n		k = ix % @n; ix //= @n\n		j = ix % @n; ix //= @n\n		i = ix\n		block = @blocks[index]\n		if not block? or block==0 then return\n		[r,g,b] = [j/9,i/9,k/9] # borde vara i,j,k\n		p0 = f i,  j,  k # egentligen osynlig\n		p1 = f i+1,j,  k\n		p2 = f i,  j+1,k\n		p3 = f i+1,j+1,k\n		p4 = f i  ,j,  k+1\n		p5 = f i+1,j,  k+1\n		p6 = f i  ,j+1,k+1\n		p7 = f i+1,j+1,k+1\n		[si,sj,sk] = @shade\n		fc r*sk,g*sk,b*sk\n		q p4,p5,p7,p6 # roof\n		fc r*sj,g*sj,b*sj\n		q p2,p6,p7,p3 # left\n		fc r*si,g*si,b*si\n		q p1,p3,p7,p5 # right\n	grid : ->\n		sc 0.75\n		[w2,w3,w4] = [2*200/4,3*200/4,4*200/4]\n		for i in range @n+1\n			line w2+@dx*i, w4-@dy*i,    @dx*i, w3-@dy*i\n			line w2-@dx*i, w4-@dy*i, w4-@dx*i, w3-@dy*i\n	mousePressed : ->\n		@showGrid = not @showGrid\n		@enter()\n	enter : ->\n		@clear()\n		s = @readText()\n		if s=='' then s='i 5 == j 5 == k 5 == or or'\n		arr = s.split ' '\n		for i in range 10\n			for j in range 10\n				for k in range 10\n					stack = []\n					for cmd in arr\n						if cmd == 'i' then stack.push i\n						else if cmd == 'j' then stack.push j\n						else if cmd == 'k' then stack.push k\n						else if cmd == '<' then (stack.push if stack.pop() > stack.pop() then 1 else 0)\n						else if cmd == '>' then (stack.push if stack.pop() < stack.pop() then 1 else 0)\n						else if cmd == '==' then (stack.push if stack.pop() == stack.pop() then 1 else 0)\n						else if cmd == '<=' then (stack.push if stack.pop() >= stack.pop() then 1 else 0)\n						else if cmd == '>=' then (stack.push if stack.pop() <= stack.pop() then 1 else 0)\n						else if cmd == '!=' then (stack.push if stack.pop() != stack.pop() then 1 else 0)\n						else if cmd == '+' then stack.push stack.pop() + stack.pop()\n						else if cmd == '-' then stack.push stack.pop() - stack.pop()\n						else if cmd == '*' then stack.push stack.pop() * stack.pop()\n						else if cmd == '/' then stack.push stack.pop() / stack.pop()\n						else if cmd == '%' then stack.push stack.pop() % stack.pop()\n						else if cmd == 'and' then stack.push stack.pop() * stack.pop()\n						else if cmd == 'or'\n							sum = stack.pop() + stack.pop()\n							stack.push if sum >= 1 then 1 else 0\n						else if cmd == 'not' then stack.push 1 - stack.pop()\n						else if cmd == 'dup' then stack.push _.last stack\n						else stack.push parseFloat cmd\n					if stack.pop() == 1 then @add i,j,k\napp = new ForthHaiku3D \"a\"\n",
  c: {
    app: "reset()|enter()"
  },
  e: {
    ForthHaiku: "http://forthsalon.appspot.com/haiku-editor"
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Dojo\coffee\data\F.coffee