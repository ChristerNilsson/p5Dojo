// Generated by CoffeeScript 2.4.1
var ID_FlagKorea, ID_FlagSweden, ID_FlagUnitedKingdom, ID_ForthHaiku, ID_ForthHaiku3D, ID_Function, ID_fc, ID_for, ID_for_1, ID_for_10, ID_for_11, ID_for_2, ID_for_3, ID_for_4, ID_for_5, ID_for_6, ID_for_7, ID_for_8, ID_for_9, ID_for_for;

ID_fc = {
  v: '2018-04-27',
  k: 'fc circle sw sc',
  l: 11,
  h: 0,
  b: "# Välj fyllningsfärg\n\n# Set fill color\n\n# fc r,g,b\n\ncircle 100,20,10 \n\nfc 1,0,0 \ncircle 100,50,10\n\nfc()\ncircle 100,80,10\n\nsw 10\ncircle 100,110,20\n\nsc 0\ncircle 100,140,20\n\nfc 1,1,0\ncircle 100,170,20",
  a: "circle 100,20,10 \n\nfc 1,0,0 \ncircle 100,50,10\n\nfc()\ncircle 100,80,10\n\nsw 10\ncircle 100,110,20\n\nsc 0\ncircle 100,140,20\n\nfc 1,1,0\ncircle 100,170,20"
};

ID_FlagKorea = {
  v: '2018-10-13',
  k: 'bg sc fc rect sw arc circle push pop translate scale rotate angleMode rectMode atan2 for',
  l: 44,
  h: 3,
  b: "",
  a: "angleMode DEGREES\nrectMode CENTER\nvinkel = atan2 2, 3\n\nram = ->\n	fc 1\n	sw 1/60\n	sc 0\n	rect 0,0,3,2\n\nyinyang = ->\n\n	fc 1,0,0\n	arc 0,0,1,1,180,0\n\n	fc 0,0,1\n	arc 0,0,1,1,0,180\n\n	fc 1,0,0\n	circle -1/4,0,1/4\n\n	fc 0,0,1\n	circle 1/4,0,1/4\n\nstreck = (pattern,a,b) ->\n	push()\n	translate a,0\n	h = (1/2-1/24)/2\n	for p in pattern\n		if p == 1\n			rect 0,0,1/12,1/2\n		else \n			rect 0,-h/2-1/48,1/12,h\n			rect 0,+h/2+1/48,1/12,h\n		translate b,0\n	pop()\n\nbg 0.5\ntranslate 100,100\nscale 60\n\nram()\n\nrotate vinkel\n\nsc()\nyinyang()\n\na = 1/2 + 1/4 + 1/24\nb = 1/12 + 1/24\nfc 0\nstreck [1,1,1],-a,-b \nstreck [0,0,0],+a,+b \n\nrotate -2 * vinkel\n\nstreck [1,0,1],-a,-b \nstreck [0,1,0],+a,+b",
  e: {
    "Wikipedia": "https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg"
  }
};

ID_FlagSweden = {
  v: '2018-12-16',
  k: 'bg sc fc rect scale',
  l: 8,
  h: 3,
  b: "",
  a: "bg 0.5\nsc()\nscale 10\nfc 0,0,1\nrect 2,5,16,10\nfc 1,1,0\nrect 7,5,2,10\nrect 2,9,16,2",
  e: {
    "Wikipedia": "https://sv.wikipedia.org/wiki/Sveriges_flagga#/media/File:Sweden_flag_construction_sheet.png"
  }
};

ID_FlagUnitedKingdom = {
  v: '2018-11-18',
  k: 'bg sc fc rect rectMode rotate translate scale',
  l: 21,
  h: 3,
  b: "vinkel = atan2 30,60",
  a: "v = atan2 30,60\ntranslate 100,100\nrectMode CENTER\nsc()\nscale 3\n\nfcrect = (r,g,b,x,y,w,h) ->\n	fc r,g,b\n	rect x,y,w,h\n\nbg 0,0,1\n\nfor vinkel in [v,PI-v-v,v+v,PI-v-v]\n	rotate vinkel\n	fcrect 1,1,1, 40,0,80,6\n	fcrect 1,0,0, 40,-1,80,2\n\nrotate v\n\nfcrect 1,1,1, 0,0,80,10\nrect 0,0,10,80\n\nfcrect 1,0,0, 0,0,70,6\nrect 0,0,6,80\n\nfor x in [30,45,30,45]\n	rotate PI/2\n	fcrect 0.5,0.5,0.5, x,0,30,70",
  e: {
    "Wikipedia": "https://en.wikipedia.org/wiki/Union_Jack#/media/File:United_Kingdom_Flag_Specifications.svg"
  }
};

ID_for = {
  v: '2018-04-27',
  k: 'for range sw point',
  l: 5,
  h: 0,
  b: "# for loop\n\n# for i in range n\n\n# Prova att halvera alla tal, ett i taget!\n# Försök förutse effekterna!\n\n# Try to half the numbers, one at a time!\n# Try to anticipate the effects!\n\nsw 10\nfor i in range 10\n	x = 10 + 20 * i\n	y = 90\n	point x,y ",
  a: "# for loop\n\n# for i in range n\n\n# Prova att halvera alla tal, ett i taget!\n# Försök förutse effekterna!\n\n# Try to half the numbers, one at a time!\n# Try to anticipate the effects!\n\nsw 10\nfor i in range 10\n	x = 10 + 20 * i\n	y = 90\n	point x,y "
};

ID_for_1 = {
  v: '2018-04-23',
  k: 'range rect for lerp',
  l: 3,
  h: 1,
  b: "# Börja med att rita de två första kvadraterna mha rect\n# Därefter kan du börja med for-loopen\n# De parametrar som är OLIKA är lämpliga att lerpas\n\nrect  5,5,10,10\nrect 25,5,10,10\n#     x         lerpa?\n\nfor i in range 10\n	x = lerp 5,25,i # eller x = 5 + 20 * i\n	y = 5\n	w = 10\n	h = 10\n	rect x,y,w,h",
  a: "for i in range 10\n	x = 5+20*i\n	rect x,5, 10,10"
};

ID_for_2 = {
  v: '2018-04-23',
  k: 'range rect for lerp',
  l: 3,
  h: 1,
  b: "# Kopiera föregående exempel så här:\n# 1 Gå till HorizontalSquares\n# 2 Markera allt med ctrl-A\n# 3 Kopiera med ctrl-C\n# 4 Gå till VerticalSquares\n# 5 Klistra in med ctrl-V",
  a: "for i in range 10\n	y = 5+20*i\n	rect 5,y, 10,10"
};

ID_for_3 = {
  v: '2017-04-29',
  k: 'range rect for lerp',
  l: 4,
  h: 1,
  b: "",
  a: "for i in range 10\n	x = 5+20*i\n	y = 5+20*i\n	rect x,y, 10,10"
};

ID_for_4 = {
  v: '2018-04-12',
  k: 'range rect rectMode for lerp',
  l: 7,
  h: 2,
  b: "rectMode CENTER",
  a: "rectMode CENTER\nfor i in range 10\n	x = 10+20*i\n	y = 10\n	w = 2*i\n	h = 2*i\n	rect x,y, w,h"
};

ID_for_5 = {
  v: '2017-04-29',
  k: 'fc range for lerp rect rectMode',
  l: 8,
  h: 2,
  b: "",
  a: "rectMode CENTER\nfor i in range 10\n	fc i/10.0,0,0\n	x = 10+20*i\n	y = 10\n	w = 2*i\n	h = 2*i\n	rect x,y,w,h"
};

ID_for_6 = {
  v: '2017-04-29',
  k: 'range fc circle for lerp',
  l: 6,
  h: 2,
  b: "",
  a: "for i in range 10\n	fc i/10.0,0,0\n	x = 10+20*i\n	y = 10\n	r = i\n	circle x,y,r"
};

ID_for_7 = {
  v: '2017-10-31',
  k: 'range fc circle for lerp',
  l: 5,
  h: 2,
  b: "",
  a: "for i in range 10,0,-1\n	fc i/10.0,0,0\n	r = 10 * i\n	circle 100,100, r"
};

ID_for_8 = {
  v: '2017-04-29',
  k: 'range fc circle for lerp',
  l: 6,
  h: 2,
  b: "",
  a: "for i in range 10,0,-1\n	fc i/10.0,0,0\n	x = 10*i\n	y = 10*i\n	r = 10*i\n	circle x,y,r"
};

ID_for_9 = {
  v: '2018-04-24',
  k: 'bg sc range for lerp line',
  l: 9,
  h: 2,
  b: "sc 1,1,0\n\nline  0,0,200,200\nline 20,0,180,200\n#    x1    x2       lerpa?\n\nline 0,200,200, 0\nline 0,180,200,20\n#       y1     y2   lerpa? \n\nfor i in range 10\n	\n	x1 = lerp 0,20,i\n	y1 = 0\n	x2 = lerp 200,180,i\n	y2 = 200\n	line x1,y1,x2,y2\n\n	x1 = 0\n	y1 = lerp 200,180,i\n	x2 = 200\n	y2 = lerp 0,20,i\n	line x1,y1,x2,y2",
  a: "bg 0\nsc 1,1,0\nfor i in range 10\n	x1 = lerp 0,20,i\n	x2 = lerp 200,180,i\n	line x1,0, x2,200\n	y1 = lerp 20,40,i\n	y2 = lerp 180,160,i\n	line 0,y1, 200,y2"
};

ID_for_10 = {
  v: '2017-04-29',
  k: 'bg range for lerp line',
  l: 5,
  h: 2,
  b: "# (Noel Watson)\n",
  a: "bg 0\nfor i in range 37\n	line 10,10, 190,10+i*5\n	line 10,100, 190,10+i*5\n	line 10,190, 190,10+i*5"
};

ID_for_11 = {
  v: '2017-04-29',
  k: 'sc sw range for line',
  l: 5,
  h: 2,
  b: "",
  a: "sc 1,1,0\nsw 2\nfor i in range 10,200,10\n	line 10,i,190,i\n	line i,190, i,10"
};

ID_for_for = {
  v: '2018-04-27',
  k: 'range rect for lerp',
  l: 7,
  h: 0,
  b: "# dubbel for loop\n\n# double for loop\n\nrect  5, 5,10,10\nrect 25,25,10,10\n#     x  y       lerp\n\nfor i in range 9\n	for j in range 5\n		x = lerp 5,25,i\n		y = lerp 5,25,j\n		w = 10\n		h = 10\n		rect x,y,w,h",
  a: "# dubbel for loop\n\n# double for loop\n\nrect  5, 5,10,10\nrect 25,25,10,10\n#     x  y       lerp\n\nfor i in range 9\n	for j in range 5\n		x = lerp 5,25,i\n		y = lerp 5,25,j\n		w = 10\n		h = 10\n		rect x,y,w,h"
};

ID_ForthHaiku = {
  v: '2017-04-29',
  k: 'fc range if [] _.last rect for parseFloat class',
  l: 45,
  b: "# Lös först exemplen mha länken nedan!\n\nclass ForthHaiku extends Application\n	reset : ->\n		super\n	resolution : (@n,@size) ->\n	nextExample : ->\n	prevExample : ->\napp = new ForthHaiku",
  a: "class ForthHaiku extends Application\n	draw : ->\n		bg 0.5\n		digit = (bool) -> if bool then 1 else 0\n		stack = []\n		dict = {}\n		dict['x'] = => stack.push x / @n\n		dict['y'] = => stack.push y / @n\n		dict['<'] = -> stack.push(digit stack.pop() > stack.pop())\n		dict['>'] = -> stack.push(digit(stack.pop() < stack.pop()))\n		dict['+'] = -> stack.push stack.pop() + stack.pop()\n		dict['-'] = -> stack.push -stack.pop() + stack.pop()\n		dict['*'] = -> stack.push stack.pop() * stack.pop()\n		dict['sq'] = ->\n			temp = stack.pop()\n			stack.push temp * temp\n		dict['%'] = ->\n			a = stack.pop()\n			b = stack.pop()\n			stack.push b % a\n		dict['floor'] = -> stack.push floor stack.pop()\n		dict['and'] = -> #  pga kortslutning\n			a = stack.pop() != 0\n			b = stack.pop() != 0\n			stack.push digit a and b\n		arr = @example.split ' '\n		sc()\n		for x in range @n\n		  for y in range @n\n		    stack = []\n		    for cmd in arr\n		      if dict[cmd] then dict[cmd]()\n		      else stack.push parseFloat cmd\n		    stack.push 0 for i in range 3-stack.length\n		    fc stack[0], stack[1], stack[2]\n		    rect @size * x, @size * y, @size, @size\n	reset : ->\n		super\n		@resolution()\n		@select 0\n	resolution : (@n=10,@size=20) ->\n	nextExample : -> @select @index+1\n	prevExample : -> @select @index-1\n	select : (n) ->\n		examples = '1|1 1|0 1|0.25 0.25 0.25|1 1 1|x|x y|x y >|x 0.5 >|x 0.5 - sq y 0.5 - sq + 0.25 <|x 8 * floor y 8 * floor + 2 %|x 0.5 < y 0.5 <|x 0.5 < y 0.5 < and'\n		examples = examples.split '|'\n		@index = constrain n,0,examples.length-1\n		@example = examples[@index]\n\napp = new ForthHaiku \"a\"",
  c: {
    app: "reset()|resolution 10,20|resolution 20,10|resolution 50,4|resolution 100,2|resolution 200,1|nextExample()|prevExample()"
  },
  e: {
    "ForthHaiku": "http://forthsalon.appspot.com"
  }
};

ID_ForthHaiku3D = {
  v: '2017-05-30',
  k: 'bg sc fc range for if quad line operators class []',
  l: 138,
  b: "# Stack-1 : < > == <= >= != + - * / // % %% and or xor & | ^ bit\n# Stack   : abs not swp rot ~ biti bitj bitk\n# Stack+1 : i j k t dup bitij bitik bitjk\n# Stack+2 : bitijk\n\n# false      <=> 0\n#  true      <=> 1\n# i b bit    <=> b >> i & 1\n# b biti     <=> b >> i & 1\n# b bitij    <=> i b bit j b bit\n# b bitijk   <=> i b bit j b bit k b bit\n# Exempel: t 10 % k ==\n\nclass ForthHaiku3D extends Application\n	reset : (n,dx,dy)->\n		super\n	draw : ->\n	enter : ->\n	tick : ->\n	mousePressed : ->\napp = new ForthHaiku3D",
  a: "class ForthHaiku3D extends Application\n	reset : (n,dx,dy)->\n		super\n		@SHADE = [0.5,0.75,1]\n		@N = n\n		@DX = dx\n		@DY = dy\n		@showGrid = true\n		@clear()\n		@t = 0\n	clear : -> @blocks = Array(@N*@N*@N).fill 0\n	add : (i,j,k) -> @blocks[@N*@N*k+@N*j+i] = 1\n	draw : ->\n		bg 0.5\n		if @showGrid then @grid()\n		sc()\n		@drawBlock index for index in range @N*@N*@N\n	drawBlock : (index) ->\n		f = (i,j,k) => [100+(@N-i)*2*@DY-2*(@N-j)*@DY, 200-(@N-j)*@DY-(@N-i)*@DY - k*2*@DY]\n		q = (a,b,c,d) -> quad a[0],a[1], b[0],b[1], c[0],c[1], d[0],d[1]\n		ix=index\n		i = ix % @N; ix //= @N\n		j = ix % @N; ix //= @N\n		k = ix\n		block = @blocks[index]\n		if not block? or block==0 then return\n		[r,g,b] = [i/(@N-1),j/(@N-1),k/(@N-1)] # borde vara i,j,k\n		p0 = f i,  j,  k # egentligen osynlig\n		p1 = f i+1,j,  k\n		p2 = f i,  j+1,k\n		p3 = f i+1,j+1,k\n		p4 = f i  ,j,  k+1\n		p5 = f i+1,j,  k+1\n		p6 = f i  ,j+1,k+1\n		p7 = f i+1,j+1,k+1\n		[si,sj,sk] = @SHADE\n		fc r*sj,g*sj,b*sj\n		q p2,p6,p7,p3 # left\n		fc r*si,g*si,b*si\n		q p1,p3,p7,p5 # right\n		fc r*sk,g*sk,b*sk\n		q p4,p5,p7,p6 # roof\n	grid : ->\n		sc 0.75\n		[h2,h3,h4] = [200-2*@N*@DY, 200-@N*@DY, 200]\n		[w2,w3,w4] = [100-@N*@DX,   100,        100+@N*@DX]\n		for i in range @N+1\n			line w3+@DX*i, h4-@DY*i, w2+@DX*i, h3-@DY*i\n			line w2+@DX*i, h3+@DY*i, w3+@DX*i, h2+@DY*i\n	mousePressed : ->\n		@showGrid = not @showGrid\n		@enter()\n	tick : ->\n		@t = @t + 1\n		@enter()\n	enter : ->\n		digit = (bool) -> if bool then 1 else 0\n		@clear()\n		s = @readText().trim()\n		if s=='' then s='k t ' + @N + ' % =='\n		arr = s.split ' '\n		@words = arr.length\n		@trace = ''\n		@count = 0\n		for i in range @N\n			for j in range @N\n				for k in range @N\n					stack = []\n					for cmd in arr\n						if cmd == 'dup' then stack.push _.last stack\n						else if cmd == 'swp'\n							n = stack.length - 1\n							[stack[n-1],stack[n]] = [stack[n],stack[n-1]]\n						else if cmd == 'rot' then stack.push stack.shift()\n						else if cmd == 'i'  then stack.push i\n						else if cmd == 'j'  then stack.push j\n						else if cmd == 'k'  then stack.push k\n						else if cmd == 't'  then stack.push @t\n						else if cmd == '<'  then stack.push digit stack.pop() > stack.pop()\n						else if cmd == '>'  then stack.push digit stack.pop() < stack.pop()\n						else if cmd == '==' then stack.push digit stack.pop() == stack.pop()\n						else if cmd == '<=' then stack.push digit stack.pop() >= stack.pop()\n						else if cmd == '>=' then stack.push digit stack.pop() <= stack.pop()\n						else if cmd == '!=' then stack.push digit stack.pop() != stack.pop()\n						else if cmd == '+'  then stack.push stack.pop() + stack.pop()\n						else if cmd == '-'  then stack.push -stack.pop() + stack.pop()\n						else if cmd == '*'  then stack.push stack.pop() * stack.pop()\n						else if cmd == '/'\n							a = stack.pop()\n							stack.push stack.pop() / a\n						else if cmd == '//'\n							a = stack.pop()\n							stack.push stack.pop() // a\n						else if cmd == '%'\n							a = stack.pop()\n							stack.push stack.pop() % a\n						else if cmd == '%%'\n							a = stack.pop()\n							stack.push stack.pop() %% a\n						else if cmd == 'bit' then stack.push stack.pop() >> stack.pop() & 1\n						else if cmd == 'biti' then stack.push stack.pop() >> i & 1\n						else if cmd == 'bitj' then stack.push stack.pop() >> j & 1\n						else if cmd == 'bitk' then stack.push stack.pop() >> k & 1\n						else if cmd == 'bitij'\n							bits = stack.pop()\n							stack = stack.concat [bits >> i & 1, bits >> j & 1]\n						else if cmd == 'bitik'\n							bits = stack.pop()\n							stack = stack.concat [bits >> i & 1, bits >> k & 1]\n						else if cmd == 'bitjk'\n							bits = stack.pop()\n							stack = stack.concat [bits >> j & 1, bits >> k & 1]\n						else if cmd == 'bitijk'\n							bits = stack.pop()\n							stack = stack.concat [bits >> i & 1, bits >> j & 1, bits >> k & 1]\n						else if cmd == '&' then stack.push stack.pop() & stack.pop()\n						else if cmd == '|' then stack.push stack.pop() | stack.pop()\n						else if cmd == '^' then stack.push stack.pop() ^ stack.pop()\n						else if cmd == '~' then stack.push ~stack.pop()\n						else if cmd == 'and'\n							[a,b] = [stack.pop(),stack.pop()]\n							stack.push digit a!=0 and b!=0\n						else if cmd == 'or'\n							[a,b] = [stack.pop(),stack.pop()]\n							stack.push digit a!=0 or b!=0\n						else if cmd == 'xor'\n							a = digit stack.pop() != 0\n							b = digit stack.pop() != 0\n							stack.push digit a+b == 1\n						else if cmd == 'not' then stack.push digit stack.pop() == 0\n						else if cmd == 'abs' then stack.push abs stack.pop()\n						else stack.push parseFloat cmd\n						if i==@N-1 and j==@N-1 and k==@N-1 then @trace += cmd + ' [' + stack.join(',') + '] '\n					if stack.pop() != 0\n						@count++\n						@add i,j,k\n		@trace = @trace.trim()\napp = new ForthHaiku3D \"a\"\n",
  c: {
    app: "reset 2,50,25|reset 10,10,5|reset 17,6,3|enter()|tick()"
  },
  e: {
    ForthHaiku: "http://forthsalon.appspot.com/haiku-editor",
    Exempel: 'ForthHaiku3D.html',
    "Beck & Jung": 'https://www.google.se/search?q=beck+jung&tbm=isch&imgil=fTDB34quIvQVtM%253A%253BujSokE1Q4La-QM%253Bhttp%25253A%25252F%25252Fonline.auktionsverket.se%25252F1111%25252F109534-beck-jung-computer-ink-plot&source=iu&pf=m&fir=fTDB34quIvQVtM%253A%252CujSokE1Q4La-QM%252C_&usg=__eBA4v2Ol5RdVComTBJqPkozH59s%3D&biw=1920&bih=1108&dpr=1&ved=0ahUKEwiH0qmqzInUAhVmDZoKHTcYD7wQyjcIQw&ei=hQsmWcf7EOaa6AS3sLzgCw#imgrc=fTDB34quIvQVtM:'
  }
};

ID_Function = {
  v: '2018-04-24',
  k: '-> text fc sc textSize textAlign',
  l: 17,
  h: 0,
  b: "# Följande tre rader upprepas fem gånger:\n#\n#   textSize size\n#   fc r,g,b\n#   text txt,x,y\n#\n# Dessa kan man lämpligen göra en funktion av.\n# Funktioner används för att:\n#   Göra koden mera lättläst\n#   Spara rader\n#   Underlätta återanvändning\n#   Skapa struktur i programmet\n\ntextAlign CENTER,CENTER\nsc()\n\ntextSize 180\nfc 1,0,0\ntext 'p5',100,100\n\ntextSize 18\nfc 0,0,0\ntext 'Lauren',155,43\n\ntextSize 18\nfc 1,1,1\ntext 'McCarthy',155,180\n\ntextSize 24\nfc 1,1,0\ntext 'Coding',50,20\n\ntextSize 30\nfc 0,1,0\ntext 'Train',50,48",
  a: "textAlign CENTER,CENTER\nsc()\n\ntextSize 180\nfc 1,0,0\ntext 'p5',100,100\n\ntextSize 18\nfc 0\ntext 'Lauren',155,43\n\ntextSize 18\nfc 1\ntext 'McCarthy',155,180\n\ntextSize 24\nfc 1,1,0\ntext 'Coding',50,20\n\ntextSize 30\nfc 0,1,0\ntext 'Train',50,48",
  e: {
    Wikipedia: "https://sv.wikipedia.org/wiki/Funktion_(programmering)"
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\p5Dojo\coffee\data\F.coffee