// Generated by CoffeeScript 2.4.1
var ID_Cards, ID_ChessBoard, ID_ChessGame, ID_ChessMany, ID_ChessOne, ID_ChessRow, ID_ClickDetector, ID_CoffeescriptClock, ID_ColorCross, ID_ColorCube, ID_ColorPair, ID_ColorSide, ID_Complex, ID_ComputerHistory, ID_Connect4, ID_Coordinator, ID_Counter, ID_circle, ID_circle_5, ID_circles;

ID_Cards = {
  v: '2017-09-30',
  k: 'fc sc circle range angleMode rotate rect rectMode for lerp translate',
  l: 10,
  h: 2,
  b: "",
  a: "rectMode CENTER\nangleMode DEGREES\nsc 1\ntranslate 100,100\nfor i in range 18,-1,-1\n	r = 1.0*i/18\n	fc r,0,0\n	w = 70+5*i\n	h = 70+5*i\n	rect 0,0, w,h\n	rotate 5"
};

ID_ChessBoard = {
  v: '2017-04-26',
  k: 'bg fc range for lerp rect if',
  l: 7,
  h: 2,
  b: "",
  a: "bg 0.5\nfor i in range 8\n	for j in range 8\n		fc (i+j)%2\n		x = 20+20*i\n		y = 20+20*j\n		rect x,y, 20,20"
};

ID_ChessGame = {
  v: '2017-04-29',
  k: 'bg fc sc sw range circle rectMode class rect if text for "" _.isEqual operators []',
  l: 53,
  b: "# OBS!   Rockad, en passant samt bondeförvandling hanteras ej.\n#        Flytta pjäserna med musen. Klick utanför brädet innebär undo.\n\nclass Chess extends Application\n	reset : ->\n		super\n	draw  : ->\n	mousePressed : (mx,my) ->\napp = new Chess",
  a: "class Chess extends Application\n	reset : ->\n		super\n		@SIZE = 22\n		@X = 100\n		@Y = 100\n		@board = ['RNBQKBNR','PPPPPPPP','........','........','........','........','pppppppp','rnbqkbnr']\n		@history = []\n		@memory = 0\n	draw : ->\n		bg 0.5\n		textSize 0.9 * @SIZE\n		textAlign CENTER,CENTER\n		rectMode CENTER\n		sc()\n		for i in range 8\n			for j in range 8\n				if (i+j)%2 == 0 then fc 0.6 else fc 0.8\n				x = @X-3.5*@SIZE+@SIZE*i\n				y = @Y-3.5*@SIZE+@SIZE*(7-j)\n				if _.isEqual @memory,[i,j] then fc 0,1,0\n				rect x,y, @SIZE, @SIZE\n				piece = @board[j][i]\n				if piece in \"RNBQKP\" then fc 0.95 else fc 0\n				if piece != '.'\n					if piece in \"pP\" then circle x,y,5 else text piece.toUpperCase(),x,y\n	setCharAt : (i,j,chr) ->\n    @board[j] = @board[j].substr(0,i) + chr + @board[j].substr(i+1)\n	move : (a,b) ->\n		[i1,j1] = a\n		[i2,j2] = b\n		taken = @board[j2][i2]\n		@setCharAt i2,j2, @board[j1][i1]\n		@setCharAt i1,j1,'.'\n		@history.push [a,b,taken]\n	undo : () ->\n		if @history.length == 0 then return\n		[a,b,taken] = @history.pop()\n		[i1,j1] = a\n		[i2,j2] = b\n		@setCharAt i1,j1, @board[j2][i2]\n		@setCharAt i2,j2, taken\n	mousePressed : (mx,my) ->\n		i = int (mx-20)/20\n		j = 7 - int (my-20)/20\n		if 0 <= i <= 7 and 0 <= j <= 7\n			if @memory == 0\n				@memory = [i,j]\n			else\n				if not _.isEqual @memory,[i,j] then @move @memory,[i,j]\n				@memory = 0\n		else\n			@undo()\n\napp = new Chess \"a\"\n",
  c: {
    app: "reset()"
  }
};

ID_ChessOne = {
  v: '2017-10-10',
  k: 'bg fc range for rect circle class if [] {} text',
  l: 52,
  h: 1,
  b: "class ChessOne extends Application\n	reset : ->\n		super\n	draw  : ->\n	mousePressed : (mx,my) ->\napp = new ChessOne\n",
  a: "class ChessOne extends Application\n	reset : ->\n		super\n		@moves =\n			King   : [false,[[-1,0],[1,0],[0,-1],[0,1],[-1,-1],[1,1],[1,-1],[-1,1]]]\n			Queen  : [true,[[-1,0],[1,0],[0,-1],[0,1],[-1,-1],[1,1],[1,-1],[-1,1]]]\n			Rook   : [true,[[-1,0],[1,0],[0,-1],[0,1]]]\n			Bishop : [true,[[-1,-1],[1,1],[1,-1],[-1,1]]]\n			Knight : [false,[[-1,-2],[-1,2],[1,-2],[1,2],[-2,-1],[-2,1],[2,-1],[2,1]]]\n		@currentPiece = 'King'\n		@currentCol = 4\n		@currentRow = 7\n\n	genDir : (multi,sq,dxdy) ->\n		[dx,dy] = dxdy\n		squares = []\n		maximum = if multi then 7 else 1\n		[col,row] = sq\n		for i in range maximum\n			col += dx\n			row += dy\n			if 0<=col<=7 and 0<=row<=7 then squares.push [col,row]\n		squares\n\n	oneGeneration : (piece,sq) ->\n		[multi,drag] = piece\n		squares = []\n		squares = squares.concat @genDir multi,sq,dxdy for dxdy in drag\n		squares\n\n	draw  : ->\n		bg 0.5\n		textAlign RIGHT,CENTER\n		textSize 13\n\n		for i in range 8\n			for j in range 8\n				fc (i+j+1)%2\n				rect 20*i,20*j,20,20\n\n		sc()\n		for piece,i in _.keys @moves\n			if piece == @currentPiece then fc 1,1,0 else fc 0\n			text piece,200,10+20*i\n\n		sq = [@currentCol,@currentRow]\n		[x,y] = sq\n		fc 0,1,0\n		circle 10+20*x,10+20*y,5\n\n		fc 1,0,0\n		for [x,y] in @oneGeneration @moves[@currentPiece],sq\n			circle 10+20*x,10+20*y,5\n\n	mousePressed : (mx,my) ->\n		if mx < 160\n			@currentCol = int mx/20\n			@currentRow = int my/20\n		else\n			@currentPiece = _.keys(@moves)[int my/20]\n\napp = new ChessOne \"a\"",
  c: {
    app: "reset()"
  },
  e: {
    Schack: "https://schackonline.com/skolan/nyborjare/pjaser/pjaser.php"
  }
};

ID_ChessMany = {
  v: '2017-10-10',
  k: 'bg fc range for rect circle class if [] {} text',
  l: 70,
  h: 2,
  b: "class ChessMany extends Application\n	reset : ->\n		super\n	draw  : ->\n	mousePressed : (mx,my) ->\napp = new ChessMany\n",
  a: "class ChessMany extends Application\n	reset : ->\n		super\n		@moves =\n			King   : [false,[[-1,0],[1,0],[0,-1],[0,1],[-1,-1],[1,1],[1,-1],[-1,1]]]\n			Queen  : [true,[[-1,0],[1,0],[0,-1],[0,1],[-1,-1],[1,1],[1,-1],[-1,1]]]\n			Rook   : [true,[[-1,0],[1,0],[0,-1],[0,1]]]\n			Bishop : [true,[[-1,-1],[1,1],[1,-1],[-1,1]]]\n			Knight : [false,[[-1,-2],[-1,2],[1,-2],[1,2],[-2,-1],[-2,1],[2,-1],[2,1]]]\n		@currentPiece = 'King'\n		@currentCol = 4\n		@currentRow = 7\n\n	genDir : (multi,sq,dxdy) ->\n		[dx,dy] = dxdy\n		squares = []\n		maximum = if multi then 7 else 1\n		[col,row] = sq\n		for i in range maximum\n			col += dx\n			row += dy\n			if 0<=col<=7 and 0<=row<=7 then squares.push [col,row]\n		squares\n\n	oneGeneration : (piece,sq) ->\n		[multi,drag] = @moves[piece]\n		squares = []\n		squares = squares.concat @genDir multi,sq,dxdy for dxdy in drag\n		squares\n\n	recurse : (level,piece,front,reached) ->\n		if front.length==0 then return reached\n		candidates = []\n		candidates = candidates.concat @oneGeneration piece,sq for sq in front\n		newFront = []\n		for candidate in candidates\n			key = candidate.toString()\n			if key not in _.keys reached\n				reached[key] = level\n				newFront.push candidate\n		@recurse level+1, piece, newFront, reached\n\n	solve : (piece,sq) ->\n		reached = {}\n		reached[sq.toString()] = 0\n		@recurse 1,piece,[sq],reached\n\n	draw  : ->\n		bg 0.5\n\n		for i in range 8\n			for j in range 8\n				fc (i+j+1)%2\n				rect 20*i,20*j,20,20\n\n		sc()\n		textAlign RIGHT,CENTER\n		textSize 13\n		for piece,i in _.keys @moves\n			if piece == @currentPiece then fc 1,1,0 else fc 0\n			text piece,200,10+20*i\n\n		textAlign CENTER,CENTER\n		textSize 16\n		reached = @solve @currentPiece,[@currentCol,@currentRow]\n		fc 1,0,0\n		for key,level of reached\n			arr = key.split ','\n			col = int arr[0]\n			row = int arr[1]\n			text level, 10+20*col,12+20*row\n\n	mousePressed : (mx,my) ->\n		if my >= 160 then return\n		if mx < 160\n			@currentCol = int mx/20\n			@currentRow = int my/20\n		else if my < 100\n			@currentPiece = _.keys(@moves)[int my/20]\n\napp = new ChessMany \"a\"",
  c: {
    app: "reset()"
  }
};

ID_ChessRow = {
  v: '2018-04-27',
  k: 'bg fc range operators for lerp rect if',
  l: 5,
  h: 0,
  b: "# ChessRow\n\nfc 0\nrect 20,20,20,20\nfc 1\nrect 40,20,20,20\n#     x           lerp \n\nfor i in range 8\n	if i % 2 == 0\n		fc 0\n	else\n		fc 1\n	x = lerp 20,40,i\n	y = 20\n	w = 20\n	h = 20\n	rect x,y,w,h",
  a: "# ChessRow\n\nfc 0\nrect 20,20,20,20\nfc 1\nrect 40,20,20,20\n#     x           lerp \n\nfor i in range 8\n	if i % 2 == 0\n		fc 0\n	else\n		fc 1\n	x = lerp 20,40,i\n	y = 20\n	w = 20\n	h = 20\n	rect x,y,w,h"
};

ID_circle = {
  v: '2018-04-27',
  k: 'circle',
  l: 4,
  h: 0,
  b: "# Rita en cirkel \n# Draw a circle\n\n# circle x,y,r  # r = radie\n\ncircle 100,10,10\ncircle 100,40,20\ncircle 100,90,30\ncircle 100,160,40",
  a: "circle 100,10,10\ncircle 100,40,20\ncircle 100,90,30\ncircle 100,160,40"
};

ID_circles = {
  v: '2018-04-28',
  k: 'circle fc sw',
  l: 12,
  h: 1,
  b: "# fc r,g,b      # fyllnadsfärg\n# circle x,y,r  # cirkel med mittpunkt x,y och radie r",
  a: "# fc r,g,b      # fyllnadsfärg\n# circle x,y,r  # cirkel med mittpunkt x,y och radie r\ncircle 40,40,30\n\nfc()\nsw 2\ncircle 50,140,40\n\nfc 1,0,0\ncircle 130,40,30\nfc 0,1,0\ncircle 150,60,40\n\nfc 1,0,0\ncircle 130,130,30\nfc 0,1,0, 0.5\ncircle 150,150,40"
};

// ID_circle_2 =
// 	v:'2017-10-30'
// 	k:'circle fc sw'
// 	l:3
// 	h:1
// 	b:""
// 	a:"""
// fc()
// sw 2
// circle 70,90,40
// """

// ID_circle_3 =
// 	v:'2017-04-29'
// 	k:'circle fc'
// 	l:4
// 	h:1
// 	b:""
// 	a:"""
// fc 1,0,0
// circle 80,100,40
// fc 0,1,0
// circle 100,120,50
// """

// ID_circle_4 =
// 	v:'2017-04-29'
// 	k:'circle fc'
// 	l:4
// 	h:1
// 	b:""
// 	a:"""
// fc 1,0,0
// circle 80,100,40
// fc 0,1,0, 0.5
// circle 120,100,50
// """
ID_circle_5 = {
  v: '2017-04-29',
  k: 'bg circle fc sc',
  l: 12,
  h: 2,
  b: "",
  a: "bg 0.5\nsc()\nfc 1\ncircle 100,100,20\nfc 1,0,0\ncircle 40,40,20\nfc 1,1,0\ncircle 40,160,20\nfc 0,1,0\ncircle 160,160,20\nfc 0,0,1\ncircle 160,40,20"
};

ID_ClickDetector = {
  v: '2017-04-29',
  k: 'bg sc fc range circle quad rect triangle class dist if operators text rectMode',
  l: 62,
  h: 1,
  b: "class Vector\n	constructor : (@x,@y) ->\n	add : (b) -> new Vector @x+b.x,@y+b.y\n	div : (n) -> new Vector @x/n,@y/n\n\nclass ClickDetector extends Application\n	reset : ->\n		super\n	draw  : ->\n	mousePressed : (mx,my) ->\napp = new ClickDetector",
  a: "class Vector # pga att p5.Vector krockar med min serialisering\n	constructor : (@x,@y) ->\n	add : (b) -> cv @x+b.x,@y+b.y\n	div : (n) -> cv @x/n,@y/n\ncv = (x,y) -> new Vector x,y\n\nclass Figure\n	constructor : (pc) ->\n		@pc = cv(int(pc.x),int(pc.y))\n		@counter = 0\n	draw : -> text @counter,@pc.x,@pc.y\n	detect : (bool) ->\n		if bool then @counter++\n		bool\n\nclass Circle extends Figure\n	constructor : (@p,@radius,@r,@g,@b) -> super @p\n	detect : (mx,my) -> super @radius > dist @p.x,@p.y,mx,my\n	draw : -> super circle @p.x,@p.y, @radius\n\nclass Rect extends Figure\n	constructor : (@p,@w,@h,@r,@g,@b) -> super @p\n	detect : (mx,my) -> super @p.x-@w/2 < mx < @p.x+@w/2 and @p.y-@h/2 < my < @p.y+@h/2\n	draw : -> super rect @p.x,@p.y,@w,@h\n\nclass Triangle extends Figure\n	constructor : (@v1,@v2,@v3,@r=0,@g=0,@b=0) -> super @v1.add(@v2).add(@v3).div(3)\n	detect : (mx,my) ->\n		pt = cv mx,my\n		sign = (p1,p2,p3) -> (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y)\n		b1 = 0 > sign pt, @v1, @v2\n		b2 = 0 > sign pt, @v2, @v3\n		b3 = 0 > sign pt, @v3, @v1\n		super b1 == b2 and b2 == b3\n	draw : -> super triangle @v1.x,@v1.y, @v2.x,@v2.y, @v3.x,@v3.y\n\nclass Quad extends Figure\n	constructor : (@v1,@v2,@v3,@v4, @r,@g,@b) -> super @v1.add(@v2).add(@v3).add(@v4).div(4)\n	detect : (mx,my) ->\n		t1 = new Triangle @v1,@v2,@v3\n		t2 = new Triangle @v1,@v3,@v4\n		super t1.detect(mx,my) or t2.detect(mx,my)\n	draw : -> super quad @v1.x,@v1.y, @v2.x,@v2.y, @v3.x,@v3.y, @v4.x,@v4.y\n\nclass ClickDetector extends Application\n	classes : -> [Vector,Circle,Rect,Triangle,Quad]\n	reset : ->\n		super\n		@figures = []\n		@figures.push new Circle cv(70,70), 50, 1,0,0\n		@figures.push new Rect cv(130,130), 100,100, 1,1,0\n		@figures.push new Triangle cv(100,100), cv(120,0), cv(190,120), 0,1,0\n		@figures.push new Quad cv(0,160), cv(60,100), cv(100,120), cv(60,200), 0.5,0.5,0.5\n	draw : ->\n		rectMode CENTER\n		textAlign CENTER,CENTER\n		textSize 50\n		bg 0.5\n		sc 0\n		sw 2\n		for figure in @figures\n			fc figure.r,figure.g,figure.b,0.5\n			figure.draw()\n	mousePressed : (mx,my) ->\n		rev = @figures[..]\n		rev.reverse()\n		for figure in rev\n			return if figure.detect mx,my\n\napp = new ClickDetector \"a\"",
  c: {
    app: "reset()"
  },
  e: {
    Triangle: "http://stackoverflow.com/questions/2049582/how-to-determine-if-a-point-is-in-a-2d-triangle"
  }
};

ID_CoffeescriptClock = {
  v: '2018-10-08',
  k: 'bg for "" text angleMode translate rotate textSize textAlign',
  l: 8,
  h: 2,
  b: "",
  a: "bg 1\ntextAlign CENTER,CENTER\ntranslate 100,100\ntextSize 20\nangleMode DEGREES\nfor letter in \"Coffeescript\"\n	text letter,0,-90\n	rotate 30"
};

ID_ColorCross = {
  v: '2020-02-09',
  k: 'bg sc range for point',
  l: 11,
  h: 3,
  b: "#  bM   Black\n# bBRM  Red Green Blue\n# CGYW  Magenta Cyan Yellow\n#  CW   White\n#  bM   ",
  a: "bg 0.5\nfor k in range 6\n	x = [3,1,3,5,3,3][k]\n	y = [0,2,2,2,4,6][k]\n	for i in range 50\n		for j in range 50\n			r = [i,0,i,50,i,i][k]\n			g = [0,j,j,j,50,50-j][k]\n			b = [50-j,50-i,0,i,j,50][k]\n			sc r/50,g/50,b/50\n			point 25*x+i,25*y+j",
  e: {
    'Color Cube': 'https://www.google.se/search?q=color+cube&source=lnms&tbm=isch&sa=X&ved=0ahUKEwi7moKIxNDWAhXFC5oKHTn8B1MQ_AUICigB&biw=2133&bih=1187#imgrc=liFgIqI48junAM:'
  }
};

ID_ColorCube = {
  v: '2017-04-29',
  k: 'bg range for class quad [] stroke if operators return',
  l: 33,
  h: 1,
  b: "class ColorCube extends Application\n	reset       : ->\n		super\n	draw        : ->\n	undo 				: ->\n	mousePressed : (mx,my) ->\napp = new ColorCube",
  a: "class ColorCube extends Application\n	reset : ->\n		super\n		@r = 0\n		@g = 0\n		@b = 0\n		@size = 256\n		@history = []\n	draw : ->\n		bg 0\n		@c = @size / 4\n		for b in range 4\n			for r in range 4\n				for g in range 4\n					fill   @r+r*@c+@c/2, @g+g*@c+@c/2, @b+b*@c+@c/2\n					stroke @r+r*@c+@c/2, @g+g*@c+@c/2, @b+b*@c+@c/2\n					x = r*40-g*10\n					y = g*10+b*50 + 5\n					quad x+40,y+0, x+80,y+0, x+70,y+10, x+30,y+10\n	mousePressed : (mx,my) ->\n		if @size == 4 then return\n		for b in range 4\n			for r in range 4\n				for g in range 4\n					x = r*40-g*10\n					y = g*10+b*50 + 5\n					if x+35 <= mx <= x+75 and y <= my <= y+10\n						@history.push [@r,@g,@b,@size]\n						@size /= 4\n						@r += r * @size\n						@g += g * @size\n						@b += b * @size\n						return\n\n	undo : -> if @history.length > 0 then [@r,@g,@b,@size] = @history.pop()\n\napp = new ColorCube \"a\"",
  c: {
    app: "reset()|undo()"
  },
  e: {
    ColorCube: "https://www.google.se/search?q=color+cube&tbm=isch&tbo=u&source=univ&sa=X&ved=0ahUKEwjo3_Cm3Y7TAhUJb5oKHcFhCKQQsAQIJg&biw=1745&bih=963&dpr=1.1"
  }
};

ID_ColorPair = {
  v: '2017-04-29',
  k: 'fc circle [] .. dist _.isEqual colorMode HSB _.max _.pairs _.sortBy for class',
  l: 41,
  h: 1,
  b: "class ColorPair extends Application\n	reset : ->\n		super\n		@seed = 0\n	draw : ->\n	mousePressed : (mx,my) ->\n	enterName : ->\n	randint : (n) -> int n * fraction 10000 * Math.sin @seed++\napp = new ColorPair",
  a: "class ColorPair extends Application\n	reset : ->\n		super\n		@radius = 0\n		@seed = 0\n		@level = 0\n		@changeLevel 1\n		@name = \"\"\n		@highScore = {}\n\n	randint : (n) -> int n * fraction 10000 * Math.sin @seed++\n\n	draw : ->\n		bg 1\n		sw 2\n		sc 1,1,1,0.5\n		colorMode HSB\n		for [x,y,c] in @circles\n			fill color c,100,100,0.5\n			circle x,y,@radius\n\n	mousePressed : (mx,my) ->\n		hitlist = []\n		for [x,y,c],i in @circles\n			if dist(x,y,mx,my) < @radius then hitlist.push i\n		if hitlist.length == 1\n			i = hitlist[0]\n			circle = @circles[i]\n			if @memory == -1\n				@memory = circle[2]\n				@circles.splice i,1\n			else if _.isEqual(@memory, circle[2])\n				@memory = -1\n				@circles.splice i,1\n				if @circles.length == 0\n					@updateHighScore() if @name != \"\"\n					@changeLevel 1\n			else\n				@changeLevel -1\n		else\n			@changeLevel -1\n\n	updateHighScore : ->\n		@highScore[@name] = _.max [@level, @highScore[@name]]\n		@topList = _.pairs @highScore\n		@topList = _.sortBy @topList, ([name,level]) -> -level\n\n	changeLevel : (d) ->\n		@memory = -1\n		@level = constrain @level+d, 1, 20\n		@circles = []\n		@radius = 50\n		for i in range @level\n			@radius *= 0.95\n			c = int i * 360 / @level\n			@circles.push [@randint(200), @randint(200), c]\n			@circles.push [@randint(200), @randint(200), c]\n\n	enterName : -> @name = @readText()\n\napp = new ColorPair \"a\"",
  c: {
    app: "reset()|enterName()"
  },
  e: {
    ColorPair: "https://christernilsson.github.io/ColorPair"
  }
};

ID_ColorSide = {
  v: '2018-04-26',
  k: 'sc lerp range for point',
  l: 9,
  h: 0,
  b: "# ColorSide\n\n# Tag reda på de fyra hörnens färger.\n# Lerpa de färger som ändras.\n# Minska 200 till 50 om datorn känns seg.\n# eller skapa ett syntaxfel.\n\n# BR (Black, Red)      0,0,0    1,0,0\n# GY (Green, Yellow)   0,1,0    1,1,0\n\nfor i in range 200\n	for j in range 200\n		r = lerp 0,0.005,i\n		g = lerp 0,0.005,j\n		b = 0\n		sc r,g,b\n		x = i\n		y = j\n		point x,y",
  a: "# ColorSide\n\n# Tag reda på de fyra hörnens färger.\n# Lerpa de färger som ändras.\n# Minska 200 till 50 om datorn känns seg.\n# eller skapa ett syntaxfel.\n\n# BR (Black, Red)      0,0,0    1,0,0\n# GY (Green, Yellow)   0,1,0    1,1,0\n\nfor i in range 200\n	for j in range 200\n		r = lerp 0,0.005,i\n		g = lerp 0,0.005,j\n		b = 0\n		sc r,g,b\n		x = i\n		y = j\n		point x,y"
};

ID_Complex = {
  v: '2017-04-29',
  k: 'bg fc sc range operators [] line circle text for if return int {} dist _.isEqual constrain class',
  l: 80,
  h: 1,
  b: "class Complex extends Application\n	reset : ->\n		super\n	draw : ->\n	randint : (n) -> int n * fraction 10000 * Math.sin @seed++\n	mousePressed : (mx,my) ->\napp = new Complex",
  a: "class Complex extends Application\n	reset : ->\n		super\n		@RADIUS = 25\n		@buttons = [[30,130,'m'],[70,170,'*i'],[130,170,'*2'],[170,130,'+1'],[30,30,'undo'], [170,30,'new']]\n		@seed = 0\n		@level = 1\n		@createGame()\n	randint : (n) -> int n * fraction 10000 * Math.sin @seed++\n	gr : ->\n		sc 1,1,1,0.5\n		for i in range 21\n			line 0, 10 * i, 200, 10 * i\n			line 10 * i, 0, 10 * i, 200\n		sc 1,1,1\n		line 100,0, 100,200\n		line 0,100, 200,100\n	draw : ->\n		@buttons[4][2] = @level - @history.length\n		bg 0\n		@gr()\n		textAlign CENTER,CENTER\n		textSize 25\n		sc()\n		fc 1,0,0\n		circle 100+10*@b[0], 100-10*@b[1], 5\n		fc 0,1,0\n		circle 100+10*@a[0], 100-10*@a[1], 4\n		for [x,y,txt],i in @buttons\n			fc 1,1,0,0.4\n			circle x,y,@RADIUS\n			fc 1,1,0\n			text txt,x,y\n	newGame : ->\n		if @level >= @history.length and _.isEqual(@a,@b) then d=1 else d=-1\n		@level = constrain @level+d,1,16\n		@createGame()\n	createGame : ->\n		@history = []\n		@a = [-10 + @randint(20), -10 + @randint(20)]\n		q1 = [@a]\n		q2 = []\n		visited = {}\n		visited[@a] = true\n		expand = (n) ->\n			if visited[n] then return\n			if n[0]*n[0] + n[1]*n[1] > 1000 then return\n			visited[n] = true\n			q2.push n\n		for level in range @level\n			for [x,y] in q1\n				expand [y,x]\n				expand [-y,x]\n				expand [2*x,2*y]\n				expand [x+1,y]\n			q1 = q2\n			q2 = []\n		@b = @selectTarget q1\n	selectTarget : (lst) -> # within 21x21 window, if possible\n		bs = ([x,y] for [x,y] in lst when -10 <= x <= 10 and -10 <= y <= 10)\n		return bs[@randint(bs.length)] if bs.length > 0\n		_.min lst, ([x,y]) -> dist 0,0,x,y\n	undo : ->\n		if @history.length == 0 then return\n		@a = @history.pop()\n	mousePressed : (mx,my) ->\n		index = -1\n		for [x,y,txt],i in @buttons\n			if dist(mx,my,x,y) < @RADIUS then index = i\n		[x,y] = @a\n		a = []\n		if index == 0 then a = [y,x]\n		if index == 1 then a = [-y,x]\n		if index == 2 then a = [2*x,2*y]\n		if index == 3 then a = [x+1,y]\n		if index == 4 then @undo()\n		if index == 5 then @newGame()\n		if a.length != 0\n			@history.push @a\n			@a = a\n\napp = new Complex \"a\"\n",
  c: {
    app: "reset()"
  },
  e: {
    "Komplexa tal": "http://www.matteboken.se/lektioner/matte-4/komplexa-tal/rakna-med-komplexa-tal"
  }
};

ID_ComputerHistory = {
  v: '2018-11-17',
  k: '',
  l: 33,
  h: 1,
  b: "class ComputerHistory extends Application\n	reset : ->\n		super\n				\n	draw  : ->\n	mousePressed : (mx,my) ->\n\napp = new ComputerHistory",
  a: "\nclass ComputerHistory extends Application\n	reset : ->\n		super\n		@screens = []\n		@index = 0\n		Hz = 1\n		kHz = 1000*Hz\n		MHz = 1000*kHz\n		# year name ROM RAM Clockspeed\n		@save 2016,'p5Dojo',0,3*40000,''\n		@save 1843,'Difference Engine',0,8*12.5,'1 Hz'\n		@save 1943,'Colossus',0,0,'5 kHz'\n		@save 1945,'ENIAC',0,2500,'5 kHz'\n		@save 1949,'Whirlwind',0,2*2048,'20 kHz'\n		@save 1953,'BESK',2*5*4096,5*1024,'20 kHz'\n		@save 1954,'IBM 704',0,18432,'4 kHz'\n		@save 1959,'PDP-1',0,9216,'187 kHz'\n		@save 1964,'IBM 360',0,8*1024,'34.5 kHz'\n		@save 1966,'Apollo Moon Calculator',2*36864,2*2048,'2 MHz'\n		@save 1971,'Busicom 141-PF',4*256,2*40,'750 kHz'\n		@save 1972,'HP-35 Kalkylator',3*320,7*7,'200 kHz'\n		@save 1978,'ABC-80',16384,16384,'3 MHz'\n		@save 1981,'IBM PC',8192,16384,'4.77 MHz'\n		@save 2003,'Arduino',32*1024,2*1024,'20 MHz'\n		#@save 2015,'micro:bit',256*1024,16*1024,'16 MHz'\n				\n	draw  : ->\n		textAlign CENTER,CENTER\n		[year,title,rom,ram,speed] = @screens[@index]\n		bg 0.5\n\n		sc 1,1,0\n		for i in range rom/3\n			x = i%%200\n			y = i // 200\n			point x,y\n\n		sc 1,0,0\n		for i in range ram/3\n			x = i%%200\n			y = 200 - i // 200\n			point x,y\n\n		fc 0,0,0\n		sc()\n		textSize 64\n		text year,100,40\n		textSize 18\n		text title,100,90\n		textSize 20\n		text rom.toString() + \" bytes ROM\",100,120\n		text ram.toString() + \" bytes RAM\",100,150\n		text speed,100,180\n			\n	save : (year,title,rom,ram,speed) ->\n		@screens.push [year,title,rom,ram,speed]\n\n	mousePressed : (mx,my) ->\n		if mx > 100 then @index++ else @index--\n		@index = constrain @index,0,@screens.length-1\n\napp = new ComputerHistory 'a'",
  c: {
    app: "reset()"
  },
  e: {
    "Difference Engine": "https://en.wikipedia.org/wiki/Difference_engine",
    "Colossus": "https://en.wikipedia.org/wiki/Colossus_computer",
    "Whirlwind": "https://en.wikipedia.org/wiki/Whirlwind_I",
    "BESK": "https://en.wikipedia.org/wiki/BESK",
    "IBM 704": "https://en.wikipedia.org/wiki/IBM_704",
    "ENIAC": "https://en.wikipedia.org/wiki/ENIAC",
    "PDP-1": "https://en.wikipedia.org/wiki/PDP-1",
    "IBM 360": "https://en.wikipedia.org/wiki/IBM_System/360",
    "Apollo Moon Calculator": "https://en.wikipedia.org/wiki/Apollo_Guidance_Computer",
    "Busicom 141-PF": "http://www.vintagecalculators.com/html/busicom_141-pf.html",
    "HP-35 Kalkylator": "https://en.wikipedia.org/wiki/HP-35",
    "ABC-80": "https://en.wikipedia.org/wiki/ABC_80",
    "IBM PC": "https://en.wikipedia.org/wiki/IBM_Personal_Computer",
    "Arduino": "https://en.wikipedia.org/wiki/Arduino",
    "8-bit music iftkryo": "https://www.youtube.com/watch?v=sWblpsLZ-O8"
  }
};

ID_Connect4 = {
  v: '2017-04-29',
  k: 'operators bg fc sc sw circle range text for class',
  l: 33,
  h: 1,
  b: "class Connect4 extends Application\n	reset : ->\n		super\n	draw  : ->\n	undo  : ->\n	mousePressed : (mx,my) ->\napp = new Connect4",
  a: "class Connect4 extends Application\n	reset : ->\n		super\n		@SIZE = 27\n		@list = ([] for i in range 7)\n		@moves = []\n	draw : ->\n		bg 0\n		textAlign CENTER,CENTER\n		textSize @SIZE/2\n		fc()\n		sc 0.1,0.3,1\n		sw 0.2 * @SIZE\n		for i in range 7\n			for j in range 6\n				circle 100-@SIZE*3+@SIZE*i, 180-@SIZE*j, @SIZE/2\n		for column,i in @list\n			for nr,j in column\n				fc 1,nr%2,0\n				sw 1\n				circle 100-@SIZE*3+@SIZE*i, 180-@SIZE*j, @SIZE*0.4\n				fc 0\n				sc()\n				text nr, 100-@SIZE*3+@SIZE*i, 180-@SIZE*j\n		sc()\n		fc 1,(@moves.length+1)%2,0\n		circle 100,15,10\n	mousePressed : (mx,my) ->\n		nr = int (mx-(200-7*@SIZE)/2)/@SIZE\n		if 0 <= nr <= 6\n			@moves.push nr\n			@list[nr].push @moves.length\n	undo : -> if @moves.length > 0 then @list[@moves.pop()].pop()\n\napp = new Connect4 \"a\"",
  c: {
    app: "reset()|undo()"
  },
  e: {
    Wikipedia: "https://en.wikipedia.org/wiki/Connect_Four"
  }
};

ID_Coordinator = {
  v: '2018-04-23',
  k: 'sc fc circle class dist if operators text',
  l: 30,
  h: 3,
  b: "class Coordinator extends Application\n	reset : ->\n		super\n		@seed = 0\n	draw : ->\n	mousePressed : (mx,my) ->\n	randint : (n) -> int n * fraction 10000 * Math.sin @seed++\napp = new Coordinator",
  a: "\nclass Coordinator extends Application\n	reset : ->\n		super\n		@seed = 0\n		@level = 1\n		@errors = 0\n		@newGame 0\n	newGame : (d) ->\n		if d==-1 then @errors++\n		@level = constrain @level+d, 1, 100\n		@radius = int 100/@level\n		@x = @randint 200\n		@y = @randint 200\n	draw : ->\n		fc 1,1,0\n		sc()\n		textAlign CENTER,CENTER\n		textSize 50\n		text @x + \",\" + @y,100,50\n		fc 0,1,0\n		text @level,67,150\n		fc 1,0,0\n		text @errors,133,150\n		fc()\n		sc 1,1,0\n		circle 100,100,@radius\n	mousePressed : (mx,my) ->\n		# @seed += mx % 10\n		@newGame if @radius >= dist mx,my,@x,@y then 1 else -1\n	randint : (n) -> int n * fraction 10000 * Math.sin @seed++\n\napp = new Coordinator \"a\"",
  c: {
    app: "reset()"
  }
};

ID_Counter = {
  v: '2018-04-23',
  k: 'bg fc sc text operators class',
  l: 12,
  h: 0,
  b: "# Klicka på reset() för att komma igång!\n# De blåa knapparna anropar metoder i de båda objekten\n\n#### markerar de rader du utgår ifrån. Dessa bör ej ändras.\n\nclass Counter extends Application ####\n	\n	reset : ->                      ####\n		super                         ####\n		@counter = 0               \n		\n	draw  : ->                      ####\n		bg 0.5                     \n		fc 1,1,0                   \n		sc()                       \n		textSize 100               \n		textAlign CENTER,CENTER    \n		text @counter,100,100      \n		\n	up    : ->                      ####\n		@counter++        \n		\n	down  : ->                      ####\n		@counter--        \n		\n	mousePressed : (mx,my) ->       ####\n		if my < 100                \n			@up()                    \n		else                       \n			@down()                  \n			\napp = new Counter                 ####",
  a: "class Counter extends Application\n	reset : ->\n		super\n		@counter = 0\n	up : -> @counter += 1\n	down : -> @counter -= 1\n	draw : ->\n		bg 0.5\n		fc 1,1,0\n		sc()\n		textAlign CENTER,CENTER\n		textSize 100\n		text @counter,100,100\n	mousePressed : (mx,my) -> @counter += if my < 100 then 1 else -1\n\napp = new Counter \"a\"",
  c: {
    app: "reset()|up()|down()"
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQy5qcyIsInNvdXJjZVJvb3QiOiIuLlxcLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcZGF0YVxcQy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsUUFBQSxFQUFBLGFBQUEsRUFBQSxZQUFBLEVBQUEsWUFBQSxFQUFBLFdBQUEsRUFBQSxXQUFBLEVBQUEsZ0JBQUEsRUFBQSxvQkFBQSxFQUFBLGFBQUEsRUFBQSxZQUFBLEVBQUEsWUFBQSxFQUFBLFlBQUEsRUFBQSxVQUFBLEVBQUEsa0JBQUEsRUFBQSxXQUFBLEVBQUEsY0FBQSxFQUFBLFVBQUEsRUFBQSxTQUFBLEVBQUEsV0FBQSxFQUFBOztBQUFBLFFBQUEsR0FDQztFQUFBLENBQUEsRUFBRSxZQUFGO0VBQ0EsQ0FBQSxFQUFFLHNFQURGO0VBRUEsQ0FBQSxFQUFFLEVBRkY7RUFHQSxDQUFBLEVBQUUsQ0FIRjtFQUlBLENBQUEsRUFBRSxFQUpGO0VBS0EsQ0FBQSxFQUFFO0FBTEY7O0FBbUJELGFBQUEsR0FDQztFQUFBLENBQUEsRUFBRSxZQUFGO0VBQ0EsQ0FBQSxFQUFFLDhCQURGO0VBRUEsQ0FBQSxFQUFFLENBRkY7RUFHQSxDQUFBLEVBQUUsQ0FIRjtFQUlBLENBQUEsRUFBRSxFQUpGO0VBS0EsQ0FBQSxFQUFFO0FBTEY7O0FBZUQsWUFBQSxHQUNDO0VBQUEsQ0FBQSxFQUFFLFlBQUY7RUFDQSxDQUFBLEVBQUUsb0ZBREY7RUFFQSxDQUFBLEVBQUUsRUFGRjtFQUdBLENBQUEsRUFBRSwyUEFIRjtFQWNBLENBQUEsRUFBRSx5NkNBZEY7RUF3RUEsQ0FBQSxFQUNDO0lBQUEsR0FBQSxFQUFNO0VBQU47QUF6RUQ7O0FBMkVELFdBQUEsR0FDQztFQUFBLENBQUEsRUFBRSxZQUFGO0VBQ0EsQ0FBQSxFQUFFLGlEQURGO0VBRUEsQ0FBQSxFQUFFLEVBRkY7RUFHQSxDQUFBLEVBQUUsQ0FIRjtFQUlBLENBQUEsRUFBRSx5SEFKRjtFQWFBLENBQUEsRUFBRSxvK0NBYkY7RUE2RUEsQ0FB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LHFEQVpYO0lBYUEsU0FBQSxFQUFZLHVDQWJaO0lBY0EscUJBQUEsRUFBd0I7RUFkeEI7QUFsRkQ7O0FBbUdELFdBQUEsR0FDQztFQUFBLENBQUEsRUFBRSxZQUFGO0VBQ0EsQ0FBQSxFQUFFLG1EQURGO0VBRUEsQ0FBQSxFQUFFLEVBRkY7RUFHQSxDQUFBLEVBQUUsQ0FIRjtFQUlBLENBQUEsRUFBRSxvSUFKRjtFQWFBLENBQUEsRUFBRSwweUJBYkY7RUFrREEsQ0FBQSxFQUNDO0lBQUEsR0FBQSxFQUFNO0VBQU4sQ0FuREQ7RUFvREEsQ0FBQSxFQUNDO0lBQUEsU0FBQSxFQUFZO0VBQVo7QUFyREQ7O0FBdURELGNBQUEsR0FDQztFQUFBLENBQUEsRUFBRSxZQUFGO0VBQ0EsQ0FBQSxFQUFFLDJDQURGO0VBRUEsQ0FBQSxFQUFFLEVBRkY7RUFHQSxDQUFBLEVBQUUsQ0FIRjtFQUlBLENBQUEsRUFBRSxzTUFKRjtFQWNBLENBQUEsRUFBRSx1ckJBZEY7RUFpREEsQ0FBQSxFQUNDO0lBQUEsR0FBQSxFQUFNO0VBQU47QUFsREQ7O0FBcURELFVBQUEsR0FDQztFQUFBLENBQUEsRUFBRSxZQUFGO0VBQ0EsQ0FBQSxFQUFFLCtCQURGO0VBRUEsQ0FBQSxFQUFFLEVBRkY7RUFHQSxDQUFBLEVBQUUsQ0FIRjtFQUlBLENBQUEsRUFBRSxtM0JBSkY7RUFzQ0EsQ0FBQSxFQUFFLHVVQXRDRjtFQXdEQSxDQUFBLEVBQ0M7SUFBQSxHQUFBLEVBQU07RUFBTjtBQXpERCIsInNvdXJjZXNDb250ZW50IjpbIklEX0NhcmRzID1cblx0djonMjAxNy0wOS0zMCdcblx0azonZmMgc2MgY2lyY2xlIHJhbmdlIGFuZ2xlTW9kZSByb3RhdGUgcmVjdCByZWN0TW9kZSBmb3IgbGVycCB0cmFuc2xhdGUnXG5cdGw6MTBcblx0aDoyXG5cdGI6XCJcIlxuXHRhOlwiXCJcIlxucmVjdE1vZGUgQ0VOVEVSXG5hbmdsZU1vZGUgREVHUkVFU1xuc2MgMVxudHJhbnNsYXRlIDEwMCwxMDBcbmZvciBpIGluIHJhbmdlIDE4LC0xLC0xXG5cdHIgPSAxLjAqaS8xOFxuXHRmYyByLDAsMFxuXHR3ID0gNzArNSppXG5cdGggPSA3MCs1Kmlcblx0cmVjdCAwLDAsIHcsaFxuXHRyb3RhdGUgNVxuXCJcIlwiXG5cbklEX0NoZXNzQm9hcmQgPVxuXHR2OicyMDE3LTA0LTI2J1xuXHRrOidiZyBmYyByYW5nZSBmb3IgbGVycCByZWN0IGlmJ1xuXHRsOjdcblx0aDoyXG5cdGI6XCJcIlxuXHRhOlwiXCJcIlxuYmcgMC41XG5mb3IgaSBpbiByYW5nZSA4XG5cdGZvciBqIGluIHJhbmdlIDhcblx0XHRmYyAoaStqKSUyXG5cdFx0eCA9IDIwKzIwKmlcblx0XHR5ID0gMjArMjAqalxuXHRcdHJlY3QgeCx5LCAyMCwyMFxuXCJcIlwiXG5cbklEX0NoZXNzR2FtZSA9XG5cdHY6JzIwMTctMDQtMjknXG5cdGs6J2JnIGZjIHNjIHN3IHJhbmdlIGNpcmNsZSByZWN0TW9kZSBjbGFzcyByZWN0IGlmIHRleHQgZm9yIFwiXCIgXy5pc0VxdWFsIG9wZXJhdG9ycyBbXSdcblx0bDo1M1xuXHRiOlwiXCJcIlxuIyBPQlMhICAgUm9ja2FkLCBlbiBwYXNzYW50IHNhbXQgYm9uZGVmw7ZydmFuZGxpbmcgaGFudGVyYXMgZWouXG4jICAgICAgICBGbHl0dGEgcGrDpHNlcm5hIG1lZCBtdXNlbi4gS2xpY2sgdXRhbmbDtnIgYnLDpGRldCBpbm5lYsOkciB1bmRvLlxuXG5jbGFzcyBDaGVzcyBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRkcmF3ICA6IC0+XG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cbmFwcCA9IG5ldyBDaGVzc1xuXCJcIlwiXG5cdGE6XCJcIlwiXG5jbGFzcyBDaGVzcyBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRcdEBTSVpFID0gMjJcblx0XHRAWCA9IDEwMFxuXHRcdEBZID0gMTAwXG5cdFx0QGJvYXJkID0gWydSTkJRS0JOUicsJ1BQUFBQUFBQJywnLi4uLi4uLi4nLCcuLi4uLi4uLicsJy4uLi4uLi4uJywnLi4uLi4uLi4nLCdwcHBwcHBwcCcsJ3JuYnFrYm5yJ11cblx0XHRAaGlzdG9yeSA9IFtdXG5cdFx0QG1lbW9yeSA9IDBcblx0ZHJhdyA6IC0+XG5cdFx0YmcgMC41XG5cdFx0dGV4dFNpemUgMC45ICogQFNJWkVcblx0XHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxuXHRcdHJlY3RNb2RlIENFTlRFUlxuXHRcdHNjKClcblx0XHRmb3IgaSBpbiByYW5nZSA4XG5cdFx0XHRmb3IgaiBpbiByYW5nZSA4XG5cdFx0XHRcdGlmIChpK2opJTIgPT0gMCB0aGVuIGZjIDAuNiBlbHNlIGZjIDAuOFxuXHRcdFx0XHR4ID0gQFgtMy41KkBTSVpFK0BTSVpFKmlcblx0XHRcdFx0eSA9IEBZLTMuNSpAU0laRStAU0laRSooNy1qKVxuXHRcdFx0XHRpZiBfLmlzRXF1YWwgQG1lbW9yeSxbaSxqXSB0aGVuIGZjIDAsMSwwXG5cdFx0XHRcdHJlY3QgeCx5LCBAU0laRSwgQFNJWkVcblx0XHRcdFx0cGllY2UgPSBAYm9hcmRbal1baV1cblx0XHRcdFx0aWYgcGllY2UgaW4gXCJSTkJRS1BcIiB0aGVuIGZjIDAuOTUgZWxzZSBmYyAwXG5cdFx0XHRcdGlmIHBpZWNlICE9ICcuJ1xuXHRcdFx0XHRcdGlmIHBpZWNlIGluIFwicFBcIiB0aGVuIGNpcmNsZSB4LHksNSBlbHNlIHRleHQgcGllY2UudG9VcHBlckNhc2UoKSx4LHlcblx0c2V0Q2hhckF0IDogKGksaixjaHIpIC0+XG4gICAgQGJvYXJkW2pdID0gQGJvYXJkW2pdLnN1YnN0cigwLGkpICsgY2hyICsgQGJvYXJkW2pdLnN1YnN0cihpKzEpXG5cdG1vdmUgOiAoYSxiKSAtPlxuXHRcdFtpMSxqMV0gPSBhXG5cdFx0W2kyLGoyXSA9IGJcblx0XHR0YWtlbiA9IEBib2FyZFtqMl1baTJdXG5cdFx0QHNldENoYXJBdCBpMixqMiwgQGJvYXJkW2oxXVtpMV1cblx0XHRAc2V0Q2hhckF0IGkxLGoxLCcuJ1xuXHRcdEBoaXN0b3J5LnB1c2ggW2EsYix0YWtlbl1cblx0dW5kbyA6ICgpIC0+XG5cdFx0aWYgQGhpc3RvcnkubGVuZ3RoID09IDAgdGhlbiByZXR1cm5cblx0XHRbYSxiLHRha2VuXSA9IEBoaXN0b3J5LnBvcCgpXG5cdFx0W2kxLGoxXSA9IGFcblx0XHRbaTIsajJdID0gYlxuXHRcdEBzZXRDaGFyQXQgaTEsajEsIEBib2FyZFtqMl1baTJdXG5cdFx0QHNldENoYXJBdCBpMixqMiwgdGFrZW5cblx0bW91c2VQcmVzc2VkIDogKG14LG15KSAtPlxuXHRcdGkgPSBpbnQgKG14LTIwKS8yMFxuXHRcdGogPSA3IC0gaW50IChteS0yMCkvMjBcblx0XHRpZiAwIDw9IGkgPD0gNyBhbmQgMCA8PSBqIDw9IDdcblx0XHRcdGlmIEBtZW1vcnkgPT0gMFxuXHRcdFx0XHRAbWVtb3J5ID0gW2ksal1cblx0XHRcdGVsc2Vcblx0XHRcdFx0aWYgbm90IF8uaXNFcXVhbCBAbWVtb3J5LFtpLGpdIHRoZW4gQG1vdmUgQG1lbW9yeSxbaSxqXVxuXHRcdFx0XHRAbWVtb3J5ID0gMFxuXHRcdGVsc2Vcblx0XHRcdEB1bmRvKClcblxuYXBwID0gbmV3IENoZXNzIFwiYVwiXG5cblwiXCJcIlxuXHRjOlxuXHRcdGFwcCA6IFwicmVzZXQoKVwiXG5cbklEX0NoZXNzT25lID1cblx0djonMjAxNy0xMC0xMCdcblx0azonYmcgZmMgcmFuZ2UgZm9yIHJlY3QgY2lyY2xlIGNsYXNzIGlmIFtdIHt9IHRleHQnXG5cdGw6NTJcblx0aDoxXG5cdGI6XCJcIlwiXG5jbGFzcyBDaGVzc09uZSBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRkcmF3ICA6IC0+XG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cbmFwcCA9IG5ldyBDaGVzc09uZVxuXG5cIlwiXCJcblx0YTpcIlwiXCJcbmNsYXNzIENoZXNzT25lIGV4dGVuZHMgQXBwbGljYXRpb25cblx0cmVzZXQgOiAtPlxuXHRcdHN1cGVyXG5cdFx0QG1vdmVzID1cblx0XHRcdEtpbmcgICA6IFtmYWxzZSxbWy0xLDBdLFsxLDBdLFswLC0xXSxbMCwxXSxbLTEsLTFdLFsxLDFdLFsxLC0xXSxbLTEsMV1dXVxuXHRcdFx0UXVlZW4gIDogW3RydWUsW1stMSwwXSxbMSwwXSxbMCwtMV0sWzAsMV0sWy0xLC0xXSxbMSwxXSxbMSwtMV0sWy0xLDFdXV1cblx0XHRcdFJvb2sgICA6IFt0cnVlLFtbLTEsMF0sWzEsMF0sWzAsLTFdLFswLDFdXV1cblx0XHRcdEJpc2hvcCA6IFt0cnVlLFtbLTEsLTFdLFsxLDFdLFsxLC0xXSxbLTEsMV1dXVxuXHRcdFx0S25pZ2h0IDogW2ZhbHNlLFtbLTEsLTJdLFstMSwyXSxbMSwtMl0sWzEsMl0sWy0yLC0xXSxbLTIsMV0sWzIsLTFdLFsyLDFdXV1cblx0XHRAY3VycmVudFBpZWNlID0gJ0tpbmcnXG5cdFx0QGN1cnJlbnRDb2wgPSA0XG5cdFx0QGN1cnJlbnRSb3cgPSA3XG5cblx0Z2VuRGlyIDogKG11bHRpLHNxLGR4ZHkpIC0+XG5cdFx0W2R4LGR5XSA9IGR4ZHlcblx0XHRzcXVhcmVzID0gW11cblx0XHRtYXhpbXVtID0gaWYgbXVsdGkgdGhlbiA3IGVsc2UgMVxuXHRcdFtjb2wscm93XSA9IHNxXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgbWF4aW11bVxuXHRcdFx0Y29sICs9IGR4XG5cdFx0XHRyb3cgKz0gZHlcblx0XHRcdGlmIDA8PWNvbDw9NyBhbmQgMDw9cm93PD03IHRoZW4gc3F1YXJlcy5wdXNoIFtjb2wscm93XVxuXHRcdHNxdWFyZXNcblxuXHRvbmVHZW5lcmF0aW9uIDogKHBpZWNlLHNxKSAtPlxuXHRcdFttdWx0aSxkcmFnXSA9IHBpZWNlXG5cdFx0c3F1YXJlcyA9IFtdXG5cdFx0c3F1YXJlcyA9IHNxdWFyZXMuY29uY2F0IEBnZW5EaXIgbXVsdGksc3EsZHhkeSBmb3IgZHhkeSBpbiBkcmFnXG5cdFx0c3F1YXJlc1xuXG5cdGRyYXcgIDogLT5cblx0XHRiZyAwLjVcblx0XHR0ZXh0QWxpZ24gUklHSFQsQ0VOVEVSXG5cdFx0dGV4dFNpemUgMTNcblxuXHRcdGZvciBpIGluIHJhbmdlIDhcblx0XHRcdGZvciBqIGluIHJhbmdlIDhcblx0XHRcdFx0ZmMgKGkraisxKSUyXG5cdFx0XHRcdHJlY3QgMjAqaSwyMCpqLDIwLDIwXG5cblx0XHRzYygpXG5cdFx0Zm9yIHBpZWNlLGkgaW4gXy5rZXlzIEBtb3Zlc1xuXHRcdFx0aWYgcGllY2UgPT0gQGN1cnJlbnRQaWVjZSB0aGVuIGZjIDEsMSwwIGVsc2UgZmMgMFxuXHRcdFx0dGV4dCBwaWVjZSwyMDAsMTArMjAqaVxuXG5cdFx0c3EgPSBbQGN1cnJlbnRDb2wsQGN1cnJlbnRSb3ddXG5cdFx0W3gseV0gPSBzcVxuXHRcdGZjIDAsMSwwXG5cdFx0Y2lyY2xlIDEwKzIwKngsMTArMjAqeSw1XG5cblx0XHRmYyAxLDAsMFxuXHRcdGZvciBbeCx5XSBpbiBAb25lR2VuZXJhdGlvbiBAbW92ZXNbQGN1cnJlbnRQaWVjZV0sc3Fcblx0XHRcdGNpcmNsZSAxMCsyMCp4LDEwKzIwKnksNVxuXG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cblx0XHRpZiBteCA8IDE2MFxuXHRcdFx0QGN1cnJlbnRDb2wgPSBpbnQgbXgvMjBcblx0XHRcdEBjdXJyZW50Um93ID0gaW50IG15LzIwXG5cdFx0ZWxzZVxuXHRcdFx0QGN1cnJlbnRQaWVjZSA9IF8ua2V5cyhAbW92ZXMpW2ludCBteS8yMF1cblxuYXBwID0gbmV3IENoZXNzT25lIFwiYVwiXG5cIlwiXCJcblx0Yzpcblx0XHRhcHAgOiBcInJlc2V0KClcIlxuXHRlOlxuXHRcdFNjaGFjayA6IFwiaHR0cHM6Ly9zY2hhY2tvbmxpbmUuY29tL3Nrb2xhbi9ueWJvcmphcmUvcGphc2VyL3BqYXNlci5waHBcIlxuXG5JRF9DaGVzc01hbnkgPVxuXHR2OicyMDE3LTEwLTEwJ1xuXHRrOidiZyBmYyByYW5nZSBmb3IgcmVjdCBjaXJjbGUgY2xhc3MgaWYgW10ge30gdGV4dCdcblx0bDo3MFxuXHRoOjJcblx0YjpcIlwiXCJcbmNsYXNzIENoZXNzTWFueSBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRkcmF3ICA6IC0+XG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cbmFwcCA9IG5ldyBDaGVzc01hbnlcblxuXCJcIlwiXG5cdGE6XCJcIlwiXG5jbGFzcyBDaGVzc01hbnkgZXh0ZW5kcyBBcHBsaWNhdGlvblxuXHRyZXNldCA6IC0+XG5cdFx0c3VwZXJcblx0XHRAbW92ZXMgPVxuXHRcdFx0S2luZyAgIDogW2ZhbHNlLFtbLTEsMF0sWzEsMF0sWzAsLTFdLFswLDFdLFstMSwtMV0sWzEsMV0sWzEsLTFdLFstMSwxXV1dXG5cdFx0XHRRdWVlbiAgOiBbdHJ1ZSxbWy0xLDBdLFsxLDBdLFswLC0xXSxbMCwxXSxbLTEsLTFdLFsxLDFdLFsxLC0xXSxbLTEsMV1dXVxuXHRcdFx0Um9vayAgIDogW3RydWUsW1stMSwwXSxbMSwwXSxbMCwtMV0sWzAsMV1dXVxuXHRcdFx0QmlzaG9wIDogW3RydWUsW1stMSwtMV0sWzEsMV0sWzEsLTFdLFstMSwxXV1dXG5cdFx0XHRLbmlnaHQgOiBbZmFsc2UsW1stMSwtMl0sWy0xLDJdLFsxLC0yXSxbMSwyXSxbLTIsLTFdLFstMiwxXSxbMiwtMV0sWzIsMV1dXVxuXHRcdEBjdXJyZW50UGllY2UgPSAnS2luZydcblx0XHRAY3VycmVudENvbCA9IDRcblx0XHRAY3VycmVudFJvdyA9IDdcblxuXHRnZW5EaXIgOiAobXVsdGksc3EsZHhkeSkgLT5cblx0XHRbZHgsZHldID0gZHhkeVxuXHRcdHNxdWFyZXMgPSBbXVxuXHRcdG1heGltdW0gPSBpZiBtdWx0aSB0aGVuIDcgZWxzZSAxXG5cdFx0W2NvbCxyb3ddID0gc3Fcblx0XHRmb3IgaSBpbiByYW5nZSBtYXhpbXVtXG5cdFx0XHRjb2wgKz0gZHhcblx0XHRcdHJvdyArPSBkeVxuXHRcdFx0aWYgMDw9Y29sPD03IGFuZCAwPD1yb3c8PTcgdGhlbiBzcXVhcmVzLnB1c2ggW2NvbCxyb3ddXG5cdFx0c3F1YXJlc1xuXG5cdG9uZUdlbmVyYXRpb24gOiAocGllY2Usc3EpIC0+XG5cdFx0W211bHRpLGRyYWddID0gQG1vdmVzW3BpZWNlXVxuXHRcdHNxdWFyZXMgPSBbXVxuXHRcdHNxdWFyZXMgPSBzcXVhcmVzLmNvbmNhdCBAZ2VuRGlyIG11bHRpLHNxLGR4ZHkgZm9yIGR4ZHkgaW4gZHJhZ1xuXHRcdHNxdWFyZXNcblxuXHRyZWN1cnNlIDogKGxldmVsLHBpZWNlLGZyb250LHJlYWNoZWQpIC0+XG5cdFx0aWYgZnJvbnQubGVuZ3RoPT0wIHRoZW4gcmV0dXJuIHJlYWNoZWRcblx0XHRjYW5kaWRhdGVzID0gW11cblx0XHRjYW5kaWRhdGVzID0gY2FuZGlkYXRlcy5jb25jYXQgQG9uZUdlbmVyYXRpb24gcGllY2Usc3EgZm9yIHNxIGluIGZyb250XG5cdFx0bmV3RnJvbnQgPSBbXVxuXHRcdGZvciBjYW5kaWRhdGUgaW4gY2FuZGlkYXRlc1xuXHRcdFx0a2V5ID0gY2FuZGlkYXRlLnRvU3RyaW5nKClcblx0XHRcdGlmIGtleSBub3QgaW4gXy5rZXlzIHJlYWNoZWRcblx0XHRcdFx0cmVhY2hlZFtrZXldID0gbGV2ZWxcblx0XHRcdFx0bmV3RnJvbnQucHVzaCBjYW5kaWRhdGVcblx0XHRAcmVjdXJzZSBsZXZlbCsxLCBwaWVjZSwgbmV3RnJvbnQsIHJlYWNoZWRcblxuXHRzb2x2ZSA6IChwaWVjZSxzcSkgLT5cblx0XHRyZWFjaGVkID0ge31cblx0XHRyZWFjaGVkW3NxLnRvU3RyaW5nKCldID0gMFxuXHRcdEByZWN1cnNlIDEscGllY2UsW3NxXSxyZWFjaGVkXG5cblx0ZHJhdyAgOiAtPlxuXHRcdGJnIDAuNVxuXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgOFxuXHRcdFx0Zm9yIGogaW4gcmFuZ2UgOFxuXHRcdFx0XHRmYyAoaStqKzEpJTJcblx0XHRcdFx0cmVjdCAyMCppLDIwKmosMjAsMjBcblxuXHRcdHNjKClcblx0XHR0ZXh0QWxpZ24gUklHSFQsQ0VOVEVSXG5cdFx0dGV4dFNpemUgMTNcblx0XHRmb3IgcGllY2UsaSBpbiBfLmtleXMgQG1vdmVzXG5cdFx0XHRpZiBwaWVjZSA9PSBAY3VycmVudFBpZWNlIHRoZW4gZmMgMSwxLDAgZWxzZSBmYyAwXG5cdFx0XHR0ZXh0IHBpZWNlLDIwMCwxMCsyMCppXG5cblx0XHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxuXHRcdHRleHRTaXplIDE2XG5cdFx0cmVhY2hlZCA9IEBzb2x2ZSBAY3VycmVudFBpZWNlLFtAY3VycmVudENvbCxAY3VycmVudFJvd11cblx0XHRmYyAxLDAsMFxuXHRcdGZvciBrZXksbGV2ZWwgb2YgcmVhY2hlZFxuXHRcdFx0YXJyID0ga2V5LnNwbGl0ICcsJ1xuXHRcdFx0Y29sID0gaW50IGFyclswXVxuXHRcdFx0cm93ID0gaW50IGFyclsxXVxuXHRcdFx0dGV4dCBsZXZlbCwgMTArMjAqY29sLDEyKzIwKnJvd1xuXG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cblx0XHRpZiBteSA+PSAxNjAgdGhlbiByZXR1cm5cblx0XHRpZiBteCA8IDE2MFxuXHRcdFx0QGN1cnJlbnRDb2wgPSBpbnQgbXgvMjBcblx0XHRcdEBjdXJyZW50Um93ID0gaW50IG15LzIwXG5cdFx0ZWxzZSBpZiBteSA8IDEwMFxuXHRcdFx0QGN1cnJlbnRQaWVjZSA9IF8ua2V5cyhAbW92ZXMpW2ludCBteS8yMF1cblxuYXBwID0gbmV3IENoZXNzTWFueSBcImFcIlxuXCJcIlwiXG5cdGM6XG5cdFx0YXBwIDogXCJyZXNldCgpXCJcblxuSURfQ2hlc3NSb3cgPVxuXHR2OicyMDE4LTA0LTI3J1xuXHRrOidiZyBmYyByYW5nZSBvcGVyYXRvcnMgZm9yIGxlcnAgcmVjdCBpZidcblx0bDo1XG5cdGg6MFxuXHRiOlwiXCJcIlxuIyBDaGVzc1Jvd1xuXG5mYyAwXG5yZWN0IDIwLDIwLDIwLDIwXG5mYyAxXG5yZWN0IDQwLDIwLDIwLDIwXG4jICAgICB4ICAgICAgICAgICBsZXJwIFxuXG5mb3IgaSBpbiByYW5nZSA4XG5cdGlmIGkgJSAyID09IDBcblx0XHRmYyAwXG5cdGVsc2Vcblx0XHRmYyAxXG5cdHggPSBsZXJwIDIwLDQwLGlcblx0eSA9IDIwXG5cdHcgPSAyMFxuXHRoID0gMjBcblx0cmVjdCB4LHksdyxoXG5cIlwiXCJcblx0YTpcIlwiXCJcbiMgQ2hlc3NSb3dcblxuZmMgMFxucmVjdCAyMCwyMCwyMCwyMFxuZmMgMVxucmVjdCA0MCwyMCwyMCwyMFxuIyAgICAgeCAgICAgICAgICAgbGVycCBcblxuZm9yIGkgaW4gcmFuZ2UgOFxuXHRpZiBpICUgMiA9PSAwXG5cdFx0ZmMgMFxuXHRlbHNlXG5cdFx0ZmMgMVxuXHR4ID0gbGVycCAyMCw0MCxpXG5cdHkgPSAyMFxuXHR3ID0gMjBcblx0aCA9IDIwXG5cdHJlY3QgeCx5LHcsaFxuXCJcIlwiXG5cbklEX2NpcmNsZSA9XG5cdHY6JzIwMTgtMDQtMjcnXG5cdGs6J2NpcmNsZSdcblx0bDo0XG5cdGg6MFxuXHRiOiBcIlwiXCJcbiMgUml0YSBlbiBjaXJrZWwgXG4jIERyYXcgYSBjaXJjbGVcblxuIyBjaXJjbGUgeCx5LHIgICMgciA9IHJhZGllXG5cbmNpcmNsZSAxMDAsMTAsMTBcbmNpcmNsZSAxMDAsNDAsMjBcbmNpcmNsZSAxMDAsOTAsMzBcbmNpcmNsZSAxMDAsMTYwLDQwXG5cIlwiXCJcblx0YTogXCJcIlwiXG5jaXJjbGUgMTAwLDEwLDEwXG5jaXJjbGUgMTAwLDQwLDIwXG5jaXJjbGUgMTAwLDkwLDMwXG5jaXJjbGUgMTAwLDE2MCw0MFxuXCJcIlwiXG5cbklEX2NpcmNsZXMgPVxuXHR2OicyMDE4LTA0LTI4J1xuXHRrOidjaXJjbGUgZmMgc3cnXG5cdGw6MTJcblx0aDoxXG5cdGI6XCJcIlwiXG4jIGZjIHIsZyxiICAgICAgIyBmeWxsbmFkc2bDpHJnXG4jIGNpcmNsZSB4LHksciAgIyBjaXJrZWwgbWVkIG1pdHRwdW5rdCB4LHkgb2NoIHJhZGllIHJcblwiXCJcIlx0XG5cdGE6XCJcIlwiXG4jIGZjIHIsZyxiICAgICAgIyBmeWxsbmFkc2bDpHJnXG4jIGNpcmNsZSB4LHksciAgIyBjaXJrZWwgbWVkIG1pdHRwdW5rdCB4LHkgb2NoIHJhZGllIHJcbmNpcmNsZSA0MCw0MCwzMFxuXG5mYygpXG5zdyAyXG5jaXJjbGUgNTAsMTQwLDQwXG5cbmZjIDEsMCwwXG5jaXJjbGUgMTMwLDQwLDMwXG5mYyAwLDEsMFxuY2lyY2xlIDE1MCw2MCw0MFxuXG5mYyAxLDAsMFxuY2lyY2xlIDEzMCwxMzAsMzBcbmZjIDAsMSwwLCAwLjVcbmNpcmNsZSAxNTAsMTUwLDQwXG5cIlwiXCJcblxuIyBJRF9jaXJjbGVfMiA9XG4jIFx0djonMjAxNy0xMC0zMCdcbiMgXHRrOidjaXJjbGUgZmMgc3cnXG4jIFx0bDozXG4jIFx0aDoxXG4jIFx0YjpcIlwiXG4jIFx0YTpcIlwiXCJcbiMgZmMoKVxuIyBzdyAyXG4jIGNpcmNsZSA3MCw5MCw0MFxuIyBcIlwiXCJcblxuIyBJRF9jaXJjbGVfMyA9XG4jIFx0djonMjAxNy0wNC0yOSdcbiMgXHRrOidjaXJjbGUgZmMnXG4jIFx0bDo0XG4jIFx0aDoxXG4jIFx0YjpcIlwiXG4jIFx0YTpcIlwiXCJcbiMgZmMgMSwwLDBcbiMgY2lyY2xlIDgwLDEwMCw0MFxuIyBmYyAwLDEsMFxuIyBjaXJjbGUgMTAwLDEyMCw1MFxuIyBcIlwiXCJcblxuIyBJRF9jaXJjbGVfNCA9XG4jIFx0djonMjAxNy0wNC0yOSdcbiMgXHRrOidjaXJjbGUgZmMnXG4jIFx0bDo0XG4jIFx0aDoxXG4jIFx0YjpcIlwiXG4jIFx0YTpcIlwiXCJcbiMgZmMgMSwwLDBcbiMgY2lyY2xlIDgwLDEwMCw0MFxuIyBmYyAwLDEsMCwgMC41XG4jIGNpcmNsZSAxMjAsMTAwLDUwXG4jIFwiXCJcIlxuXG5JRF9jaXJjbGVfNSA9XG5cdHY6JzIwMTctMDQtMjknXG5cdGs6J2JnIGNpcmNsZSBmYyBzYydcblx0bDoxMlxuXHRoOjJcblx0YjogXCJcIlxuXHRhOiBcIlwiXCJcbmJnIDAuNVxuc2MoKVxuZmMgMVxuY2lyY2xlIDEwMCwxMDAsMjBcbmZjIDEsMCwwXG5jaXJjbGUgNDAsNDAsMjBcbmZjIDEsMSwwXG5jaXJjbGUgNDAsMTYwLDIwXG5mYyAwLDEsMFxuY2lyY2xlIDE2MCwxNjAsMjBcbmZjIDAsMCwxXG5jaXJjbGUgMTYwLDQwLDIwXG5cIlwiXCJcblxuSURfQ2xpY2tEZXRlY3RvciA9XG5cdHY6JzIwMTctMDQtMjknXG5cdGs6J2JnIHNjIGZjIHJhbmdlIGNpcmNsZSBxdWFkIHJlY3QgdHJpYW5nbGUgY2xhc3MgZGlzdCBpZiBvcGVyYXRvcnMgdGV4dCByZWN0TW9kZSdcblx0bDo2MlxuXHRoOjFcblx0YjpcIlwiXCJcbmNsYXNzIFZlY3RvclxuXHRjb25zdHJ1Y3RvciA6IChAeCxAeSkgLT5cblx0YWRkIDogKGIpIC0+IG5ldyBWZWN0b3IgQHgrYi54LEB5K2IueVxuXHRkaXYgOiAobikgLT4gbmV3IFZlY3RvciBAeC9uLEB5L25cblxuY2xhc3MgQ2xpY2tEZXRlY3RvciBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRkcmF3ICA6IC0+XG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cbmFwcCA9IG5ldyBDbGlja0RldGVjdG9yXG5cIlwiXCJcblx0YTpcIlwiXCJcbmNsYXNzIFZlY3RvciAjIHBnYSBhdHQgcDUuVmVjdG9yIGtyb2NrYXIgbWVkIG1pbiBzZXJpYWxpc2VyaW5nXG5cdGNvbnN0cnVjdG9yIDogKEB4LEB5KSAtPlxuXHRhZGQgOiAoYikgLT4gY3YgQHgrYi54LEB5K2IueVxuXHRkaXYgOiAobikgLT4gY3YgQHgvbixAeS9uXG5jdiA9ICh4LHkpIC0+IG5ldyBWZWN0b3IgeCx5XG5cbmNsYXNzIEZpZ3VyZVxuXHRjb25zdHJ1Y3RvciA6IChwYykgLT5cblx0XHRAcGMgPSBjdihpbnQocGMueCksaW50KHBjLnkpKVxuXHRcdEBjb3VudGVyID0gMFxuXHRkcmF3IDogLT4gdGV4dCBAY291bnRlcixAcGMueCxAcGMueVxuXHRkZXRlY3QgOiAoYm9vbCkgLT5cblx0XHRpZiBib29sIHRoZW4gQGNvdW50ZXIrK1xuXHRcdGJvb2xcblxuY2xhc3MgQ2lyY2xlIGV4dGVuZHMgRmlndXJlXG5cdGNvbnN0cnVjdG9yIDogKEBwLEByYWRpdXMsQHIsQGcsQGIpIC0+IHN1cGVyIEBwXG5cdGRldGVjdCA6IChteCxteSkgLT4gc3VwZXIgQHJhZGl1cyA+IGRpc3QgQHAueCxAcC55LG14LG15XG5cdGRyYXcgOiAtPiBzdXBlciBjaXJjbGUgQHAueCxAcC55LCBAcmFkaXVzXG5cbmNsYXNzIFJlY3QgZXh0ZW5kcyBGaWd1cmVcblx0Y29uc3RydWN0b3IgOiAoQHAsQHcsQGgsQHIsQGcsQGIpIC0+IHN1cGVyIEBwXG5cdGRldGVjdCA6IChteCxteSkgLT4gc3VwZXIgQHAueC1Ady8yIDwgbXggPCBAcC54K0B3LzIgYW5kIEBwLnktQGgvMiA8IG15IDwgQHAueStAaC8yXG5cdGRyYXcgOiAtPiBzdXBlciByZWN0IEBwLngsQHAueSxAdyxAaFxuXG5jbGFzcyBUcmlhbmdsZSBleHRlbmRzIEZpZ3VyZVxuXHRjb25zdHJ1Y3RvciA6IChAdjEsQHYyLEB2MyxAcj0wLEBnPTAsQGI9MCkgLT4gc3VwZXIgQHYxLmFkZChAdjIpLmFkZChAdjMpLmRpdigzKVxuXHRkZXRlY3QgOiAobXgsbXkpIC0+XG5cdFx0cHQgPSBjdiBteCxteVxuXHRcdHNpZ24gPSAocDEscDIscDMpIC0+IChwMS54IC0gcDMueCkgKiAocDIueSAtIHAzLnkpIC0gKHAyLnggLSBwMy54KSAqIChwMS55IC0gcDMueSlcblx0XHRiMSA9IDAgPiBzaWduIHB0LCBAdjEsIEB2MlxuXHRcdGIyID0gMCA+IHNpZ24gcHQsIEB2MiwgQHYzXG5cdFx0YjMgPSAwID4gc2lnbiBwdCwgQHYzLCBAdjFcblx0XHRzdXBlciBiMSA9PSBiMiBhbmQgYjIgPT0gYjNcblx0ZHJhdyA6IC0+IHN1cGVyIHRyaWFuZ2xlIEB2MS54LEB2MS55LCBAdjIueCxAdjIueSwgQHYzLngsQHYzLnlcblxuY2xhc3MgUXVhZCBleHRlbmRzIEZpZ3VyZVxuXHRjb25zdHJ1Y3RvciA6IChAdjEsQHYyLEB2MyxAdjQsIEByLEBnLEBiKSAtPiBzdXBlciBAdjEuYWRkKEB2MikuYWRkKEB2MykuYWRkKEB2NCkuZGl2KDQpXG5cdGRldGVjdCA6IChteCxteSkgLT5cblx0XHR0MSA9IG5ldyBUcmlhbmdsZSBAdjEsQHYyLEB2M1xuXHRcdHQyID0gbmV3IFRyaWFuZ2xlIEB2MSxAdjMsQHY0XG5cdFx0c3VwZXIgdDEuZGV0ZWN0KG14LG15KSBvciB0Mi5kZXRlY3QobXgsbXkpXG5cdGRyYXcgOiAtPiBzdXBlciBxdWFkIEB2MS54LEB2MS55LCBAdjIueCxAdjIueSwgQHYzLngsQHYzLnksIEB2NC54LEB2NC55XG5cbmNsYXNzIENsaWNrRGV0ZWN0b3IgZXh0ZW5kcyBBcHBsaWNhdGlvblxuXHRjbGFzc2VzIDogLT4gW1ZlY3RvcixDaXJjbGUsUmVjdCxUcmlhbmdsZSxRdWFkXVxuXHRyZXNldCA6IC0+XG5cdFx0c3VwZXJcblx0XHRAZmlndXJlcyA9IFtdXG5cdFx0QGZpZ3VyZXMucHVzaCBuZXcgQ2lyY2xlIGN2KDcwLDcwKSwgNTAsIDEsMCwwXG5cdFx0QGZpZ3VyZXMucHVzaCBuZXcgUmVjdCBjdigxMzAsMTMwKSwgMTAwLDEwMCwgMSwxLDBcblx0XHRAZmlndXJlcy5wdXNoIG5ldyBUcmlhbmdsZSBjdigxMDAsMTAwKSwgY3YoMTIwLDApLCBjdigxOTAsMTIwKSwgMCwxLDBcblx0XHRAZmlndXJlcy5wdXNoIG5ldyBRdWFkIGN2KDAsMTYwKSwgY3YoNjAsMTAwKSwgY3YoMTAwLDEyMCksIGN2KDYwLDIwMCksIDAuNSwwLjUsMC41XG5cdGRyYXcgOiAtPlxuXHRcdHJlY3RNb2RlIENFTlRFUlxuXHRcdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXG5cdFx0dGV4dFNpemUgNTBcblx0XHRiZyAwLjVcblx0XHRzYyAwXG5cdFx0c3cgMlxuXHRcdGZvciBmaWd1cmUgaW4gQGZpZ3VyZXNcblx0XHRcdGZjIGZpZ3VyZS5yLGZpZ3VyZS5nLGZpZ3VyZS5iLDAuNVxuXHRcdFx0ZmlndXJlLmRyYXcoKVxuXHRtb3VzZVByZXNzZWQgOiAobXgsbXkpIC0+XG5cdFx0cmV2ID0gQGZpZ3VyZXNbLi5dXG5cdFx0cmV2LnJldmVyc2UoKVxuXHRcdGZvciBmaWd1cmUgaW4gcmV2XG5cdFx0XHRyZXR1cm4gaWYgZmlndXJlLmRldGVjdCBteCxteVxuXG5hcHAgPSBuZXcgQ2xpY2tEZXRlY3RvciBcImFcIlxuXCJcIlwiXG5cdGM6XG5cdFx0YXBwIDogXCJyZXNldCgpXCJcblx0ZTpcblx0XHRUcmlhbmdsZSA6IFwiaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMDQ5NTgyL2hvdy10by1kZXRlcm1pbmUtaWYtYS1wb2ludC1pcy1pbi1hLTJkLXRyaWFuZ2xlXCJcblxuSURfQ29mZmVlc2NyaXB0Q2xvY2sgPVxuXHR2OicyMDE4LTEwLTA4J1xuXHRrOidiZyBmb3IgXCJcIiB0ZXh0IGFuZ2xlTW9kZSB0cmFuc2xhdGUgcm90YXRlIHRleHRTaXplIHRleHRBbGlnbidcblx0bDo4XG5cdGg6MlxuXHRiOlwiXCJcblx0YTpcIlwiXCJcbmJnIDFcbnRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXG50cmFuc2xhdGUgMTAwLDEwMFxudGV4dFNpemUgMjBcbmFuZ2xlTW9kZSBERUdSRUVTXG5mb3IgbGV0dGVyIGluIFwiQ29mZmVlc2NyaXB0XCJcblx0dGV4dCBsZXR0ZXIsMCwtOTBcblx0cm90YXRlIDMwXG5cIlwiXCJcblxuSURfQ29sb3JDcm9zcyA9XG5cdHY6JzIwMjAtMDItMDknXG5cdGs6J2JnIHNjIHJhbmdlIGZvciBwb2ludCdcblx0bDoxMVxuXHRoOjNcblx0YjpcIlwiXCJcbiMgIGJNICAgQmxhY2tcbiMgYkJSTSAgUmVkIEdyZWVuIEJsdWVcbiMgQ0dZVyAgTWFnZW50YSBDeWFuIFllbGxvd1xuIyAgQ1cgICBXaGl0ZVxuIyAgYk0gICBcblwiXCJcIlxuXHRhOlwiXCJcIlxuYmcgMC41XG5mb3IgayBpbiByYW5nZSA2XG5cdHggPSBbMywxLDMsNSwzLDNdW2tdXG5cdHkgPSBbMCwyLDIsMiw0LDZdW2tdXG5cdGZvciBpIGluIHJhbmdlIDUwXG5cdFx0Zm9yIGogaW4gcmFuZ2UgNTBcblx0XHRcdHIgPSBbaSwwLGksNTAsaSxpXVtrXVxuXHRcdFx0ZyA9IFswLGosaixqLDUwLDUwLWpdW2tdXG5cdFx0XHRiID0gWzUwLWosNTAtaSwwLGksaiw1MF1ba11cblx0XHRcdHNjIHIvNTAsZy81MCxiLzUwXG5cdFx0XHRwb2ludCAyNSp4K2ksMjUqeStqXG5cIlwiXCJcblx0ZTpcblx0XHQnQ29sb3IgQ3ViZSc6J2h0dHBzOi8vd3d3Lmdvb2dsZS5zZS9zZWFyY2g/cT1jb2xvcitjdWJlJnNvdXJjZT1sbm1zJnRibT1pc2NoJnNhPVgmdmVkPTBhaFVLRXdpN21vS0l4TkRXQWhYRkM1b0tIVG44QjFNUV9BVUlDaWdCJmJpdz0yMTMzJmJpaD0xMTg3I2ltZ3JjPWxpRmdJcUk0OGp1bkFNOidcblxuSURfQ29sb3JDdWJlID1cblx0djonMjAxNy0wNC0yOSdcblx0azonYmcgcmFuZ2UgZm9yIGNsYXNzIHF1YWQgW10gc3Ryb2tlIGlmIG9wZXJhdG9ycyByZXR1cm4nXG5cdGw6MzNcblx0aDoxXG5cdGI6IFwiXCJcIlxuY2xhc3MgQ29sb3JDdWJlIGV4dGVuZHMgQXBwbGljYXRpb25cblx0cmVzZXQgICAgICAgOiAtPlxuXHRcdHN1cGVyXG5cdGRyYXcgICAgICAgIDogLT5cblx0dW5kbyBcdFx0XHRcdDogLT5cblx0bW91c2VQcmVzc2VkIDogKG14LG15KSAtPlxuYXBwID0gbmV3IENvbG9yQ3ViZVxuXCJcIlwiXG5cdGE6IFwiXCJcIlxuY2xhc3MgQ29sb3JDdWJlIGV4dGVuZHMgQXBwbGljYXRpb25cblx0cmVzZXQgOiAtPlxuXHRcdHN1cGVyXG5cdFx0QHIgPSAwXG5cdFx0QGcgPSAwXG5cdFx0QGIgPSAwXG5cdFx0QHNpemUgPSAyNTZcblx0XHRAaGlzdG9yeSA9IFtdXG5cdGRyYXcgOiAtPlxuXHRcdGJnIDBcblx0XHRAYyA9IEBzaXplIC8gNFxuXHRcdGZvciBiIGluIHJhbmdlIDRcblx0XHRcdGZvciByIGluIHJhbmdlIDRcblx0XHRcdFx0Zm9yIGcgaW4gcmFuZ2UgNFxuXHRcdFx0XHRcdGZpbGwgICBAcityKkBjK0BjLzIsIEBnK2cqQGMrQGMvMiwgQGIrYipAYytAYy8yXG5cdFx0XHRcdFx0c3Ryb2tlIEByK3IqQGMrQGMvMiwgQGcrZypAYytAYy8yLCBAYitiKkBjK0BjLzJcblx0XHRcdFx0XHR4ID0gcio0MC1nKjEwXG5cdFx0XHRcdFx0eSA9IGcqMTArYio1MCArIDVcblx0XHRcdFx0XHRxdWFkIHgrNDAseSswLCB4KzgwLHkrMCwgeCs3MCx5KzEwLCB4KzMwLHkrMTBcblx0bW91c2VQcmVzc2VkIDogKG14LG15KSAtPlxuXHRcdGlmIEBzaXplID09IDQgdGhlbiByZXR1cm5cblx0XHRmb3IgYiBpbiByYW5nZSA0XG5cdFx0XHRmb3IgciBpbiByYW5nZSA0XG5cdFx0XHRcdGZvciBnIGluIHJhbmdlIDRcblx0XHRcdFx0XHR4ID0gcio0MC1nKjEwXG5cdFx0XHRcdFx0eSA9IGcqMTArYio1MCArIDVcblx0XHRcdFx0XHRpZiB4KzM1IDw9IG14IDw9IHgrNzUgYW5kIHkgPD0gbXkgPD0geSsxMFxuXHRcdFx0XHRcdFx0QGhpc3RvcnkucHVzaCBbQHIsQGcsQGIsQHNpemVdXG5cdFx0XHRcdFx0XHRAc2l6ZSAvPSA0XG5cdFx0XHRcdFx0XHRAciArPSByICogQHNpemVcblx0XHRcdFx0XHRcdEBnICs9IGcgKiBAc2l6ZVxuXHRcdFx0XHRcdFx0QGIgKz0gYiAqIEBzaXplXG5cdFx0XHRcdFx0XHRyZXR1cm5cblxuXHR1bmRvIDogLT4gaWYgQGhpc3RvcnkubGVuZ3RoID4gMCB0aGVuIFtAcixAZyxAYixAc2l6ZV0gPSBAaGlzdG9yeS5wb3AoKVxuXG5hcHAgPSBuZXcgQ29sb3JDdWJlIFwiYVwiXG5cIlwiXCJcblx0Yzpcblx0XHRhcHAgOiBcInJlc2V0KCl8dW5kbygpXCJcblx0ZTpcblx0XHRDb2xvckN1YmUgOiBcImh0dHBzOi8vd3d3Lmdvb2dsZS5zZS9zZWFyY2g/cT1jb2xvcitjdWJlJnRibT1pc2NoJnRibz11JnNvdXJjZT11bml2JnNhPVgmdmVkPTBhaFVLRXdqbzNfQ20zWTdUQWhVSmI1b0tIY0ZoQ0tRUXNBUUlKZyZiaXc9MTc0NSZiaWg9OTYzJmRwcj0xLjFcIlxuXG5JRF9Db2xvclBhaXIgPVxuXHR2OicyMDE3LTA0LTI5J1xuXHRrOidmYyBjaXJjbGUgW10gLi4gZGlzdCBfLmlzRXF1YWwgY29sb3JNb2RlIEhTQiBfLm1heCBfLnBhaXJzIF8uc29ydEJ5IGZvciBjbGFzcydcblx0bDo0MVxuXHRoOjFcblx0YjogXCJcIlwiXG5jbGFzcyBDb2xvclBhaXIgZXh0ZW5kcyBBcHBsaWNhdGlvblxuXHRyZXNldCA6IC0+XG5cdFx0c3VwZXJcblx0XHRAc2VlZCA9IDBcblx0ZHJhdyA6IC0+XG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cblx0ZW50ZXJOYW1lIDogLT5cblx0cmFuZGludCA6IChuKSAtPiBpbnQgbiAqIGZyYWN0aW9uIDEwMDAwICogTWF0aC5zaW4gQHNlZWQrK1xuYXBwID0gbmV3IENvbG9yUGFpclxuXCJcIlwiXG5cdGE6XCJcIlwiXG5jbGFzcyBDb2xvclBhaXIgZXh0ZW5kcyBBcHBsaWNhdGlvblxuXHRyZXNldCA6IC0+XG5cdFx0c3VwZXJcblx0XHRAcmFkaXVzID0gMFxuXHRcdEBzZWVkID0gMFxuXHRcdEBsZXZlbCA9IDBcblx0XHRAY2hhbmdlTGV2ZWwgMVxuXHRcdEBuYW1lID0gXCJcIlxuXHRcdEBoaWdoU2NvcmUgPSB7fVxuXG5cdHJhbmRpbnQgOiAobikgLT4gaW50IG4gKiBmcmFjdGlvbiAxMDAwMCAqIE1hdGguc2luIEBzZWVkKytcblxuXHRkcmF3IDogLT5cblx0XHRiZyAxXG5cdFx0c3cgMlxuXHRcdHNjIDEsMSwxLDAuNVxuXHRcdGNvbG9yTW9kZSBIU0Jcblx0XHRmb3IgW3gseSxjXSBpbiBAY2lyY2xlc1xuXHRcdFx0ZmlsbCBjb2xvciBjLDEwMCwxMDAsMC41XG5cdFx0XHRjaXJjbGUgeCx5LEByYWRpdXNcblxuXHRtb3VzZVByZXNzZWQgOiAobXgsbXkpIC0+XG5cdFx0aGl0bGlzdCA9IFtdXG5cdFx0Zm9yIFt4LHksY10saSBpbiBAY2lyY2xlc1xuXHRcdFx0aWYgZGlzdCh4LHksbXgsbXkpIDwgQHJhZGl1cyB0aGVuIGhpdGxpc3QucHVzaCBpXG5cdFx0aWYgaGl0bGlzdC5sZW5ndGggPT0gMVxuXHRcdFx0aSA9IGhpdGxpc3RbMF1cblx0XHRcdGNpcmNsZSA9IEBjaXJjbGVzW2ldXG5cdFx0XHRpZiBAbWVtb3J5ID09IC0xXG5cdFx0XHRcdEBtZW1vcnkgPSBjaXJjbGVbMl1cblx0XHRcdFx0QGNpcmNsZXMuc3BsaWNlIGksMVxuXHRcdFx0ZWxzZSBpZiBfLmlzRXF1YWwoQG1lbW9yeSwgY2lyY2xlWzJdKVxuXHRcdFx0XHRAbWVtb3J5ID0gLTFcblx0XHRcdFx0QGNpcmNsZXMuc3BsaWNlIGksMVxuXHRcdFx0XHRpZiBAY2lyY2xlcy5sZW5ndGggPT0gMFxuXHRcdFx0XHRcdEB1cGRhdGVIaWdoU2NvcmUoKSBpZiBAbmFtZSAhPSBcIlwiXG5cdFx0XHRcdFx0QGNoYW5nZUxldmVsIDFcblx0XHRcdGVsc2Vcblx0XHRcdFx0QGNoYW5nZUxldmVsIC0xXG5cdFx0ZWxzZVxuXHRcdFx0QGNoYW5nZUxldmVsIC0xXG5cblx0dXBkYXRlSGlnaFNjb3JlIDogLT5cblx0XHRAaGlnaFNjb3JlW0BuYW1lXSA9IF8ubWF4IFtAbGV2ZWwsIEBoaWdoU2NvcmVbQG5hbWVdXVxuXHRcdEB0b3BMaXN0ID0gXy5wYWlycyBAaGlnaFNjb3JlXG5cdFx0QHRvcExpc3QgPSBfLnNvcnRCeSBAdG9wTGlzdCwgKFtuYW1lLGxldmVsXSkgLT4gLWxldmVsXG5cblx0Y2hhbmdlTGV2ZWwgOiAoZCkgLT5cblx0XHRAbWVtb3J5ID0gLTFcblx0XHRAbGV2ZWwgPSBjb25zdHJhaW4gQGxldmVsK2QsIDEsIDIwXG5cdFx0QGNpcmNsZXMgPSBbXVxuXHRcdEByYWRpdXMgPSA1MFxuXHRcdGZvciBpIGluIHJhbmdlIEBsZXZlbFxuXHRcdFx0QHJhZGl1cyAqPSAwLjk1XG5cdFx0XHRjID0gaW50IGkgKiAzNjAgLyBAbGV2ZWxcblx0XHRcdEBjaXJjbGVzLnB1c2ggW0ByYW5kaW50KDIwMCksIEByYW5kaW50KDIwMCksIGNdXG5cdFx0XHRAY2lyY2xlcy5wdXNoIFtAcmFuZGludCgyMDApLCBAcmFuZGludCgyMDApLCBjXVxuXG5cdGVudGVyTmFtZSA6IC0+IEBuYW1lID0gQHJlYWRUZXh0KClcblxuYXBwID0gbmV3IENvbG9yUGFpciBcImFcIlxuXCJcIlwiXG5cdGM6XG5cdFx0YXBwIDogXCJyZXNldCgpfGVudGVyTmFtZSgpXCJcblx0ZTpcblx0XHRDb2xvclBhaXIgOiBcImh0dHBzOi8vY2hyaXN0ZXJuaWxzc29uLmdpdGh1Yi5pby9Db2xvclBhaXJcIlxuXG5JRF9Db2xvclNpZGUgPVxuXHR2OicyMDE4LTA0LTI2J1xuXHRrOidzYyBsZXJwIHJhbmdlIGZvciBwb2ludCdcblx0bDo5XG5cdGg6MFxuXHRiOlwiXCJcIlxuIyBDb2xvclNpZGVcblxuIyBUYWcgcmVkYSBww6UgZGUgZnlyYSBow7ZybmVucyBmw6RyZ2VyLlxuIyBMZXJwYSBkZSBmw6RyZ2VyIHNvbSDDpG5kcmFzLlxuIyBNaW5za2EgMjAwIHRpbGwgNTAgb20gZGF0b3JuIGvDpG5ucyBzZWcuXG4jIGVsbGVyIHNrYXBhIGV0dCBzeW50YXhmZWwuXG5cbiMgQlIgKEJsYWNrLCBSZWQpICAgICAgMCwwLDAgICAgMSwwLDBcbiMgR1kgKEdyZWVuLCBZZWxsb3cpICAgMCwxLDAgICAgMSwxLDBcblxuZm9yIGkgaW4gcmFuZ2UgMjAwXG5cdGZvciBqIGluIHJhbmdlIDIwMFxuXHRcdHIgPSBsZXJwIDAsMC4wMDUsaVxuXHRcdGcgPSBsZXJwIDAsMC4wMDUsalxuXHRcdGIgPSAwXG5cdFx0c2MgcixnLGJcblx0XHR4ID0gaVxuXHRcdHkgPSBqXG5cdFx0cG9pbnQgeCx5XG5cIlwiXCJcblx0YTpcIlwiXCJcbiMgQ29sb3JTaWRlXG5cbiMgVGFnIHJlZGEgcMOlIGRlIGZ5cmEgaMO2cm5lbnMgZsOkcmdlci5cbiMgTGVycGEgZGUgZsOkcmdlciBzb20gw6RuZHJhcy5cbiMgTWluc2thIDIwMCB0aWxsIDUwIG9tIGRhdG9ybiBrw6RubnMgc2VnLlxuIyBlbGxlciBza2FwYSBldHQgc3ludGF4ZmVsLlxuXG4jIEJSIChCbGFjaywgUmVkKSAgICAgIDAsMCwwICAgIDEsMCwwXG4jIEdZIChHcmVlbiwgWWVsbG93KSAgIDAsMSwwICAgIDEsMSwwXG5cbmZvciBpIGluIHJhbmdlIDIwMFxuXHRmb3IgaiBpbiByYW5nZSAyMDBcblx0XHRyID0gbGVycCAwLDAuMDA1LGlcblx0XHRnID0gbGVycCAwLDAuMDA1LGpcblx0XHRiID0gMFxuXHRcdHNjIHIsZyxiXG5cdFx0eCA9IGlcblx0XHR5ID0galxuXHRcdHBvaW50IHgseVxuXCJcIlwiXG5cbklEX0NvbXBsZXggPVxuXHR2OicyMDE3LTA0LTI5J1xuXHRrOidiZyBmYyBzYyByYW5nZSBvcGVyYXRvcnMgW10gbGluZSBjaXJjbGUgdGV4dCBmb3IgaWYgcmV0dXJuIGludCB7fSBkaXN0IF8uaXNFcXVhbCBjb25zdHJhaW4gY2xhc3MnXG5cdGw6ODBcblx0aDoxXG5cdGI6XCJcIlwiXG5jbGFzcyBDb21wbGV4IGV4dGVuZHMgQXBwbGljYXRpb25cblx0cmVzZXQgOiAtPlxuXHRcdHN1cGVyXG5cdGRyYXcgOiAtPlxuXHRyYW5kaW50IDogKG4pIC0+IGludCBuICogZnJhY3Rpb24gMTAwMDAgKiBNYXRoLnNpbiBAc2VlZCsrXG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cbmFwcCA9IG5ldyBDb21wbGV4XG5cIlwiXCJcblx0YTpcIlwiXCJcbmNsYXNzIENvbXBsZXggZXh0ZW5kcyBBcHBsaWNhdGlvblxuXHRyZXNldCA6IC0+XG5cdFx0c3VwZXJcblx0XHRAUkFESVVTID0gMjVcblx0XHRAYnV0dG9ucyA9IFtbMzAsMTMwLCdtJ10sWzcwLDE3MCwnKmknXSxbMTMwLDE3MCwnKjInXSxbMTcwLDEzMCwnKzEnXSxbMzAsMzAsJ3VuZG8nXSwgWzE3MCwzMCwnbmV3J11dXG5cdFx0QHNlZWQgPSAwXG5cdFx0QGxldmVsID0gMVxuXHRcdEBjcmVhdGVHYW1lKClcblx0cmFuZGludCA6IChuKSAtPiBpbnQgbiAqIGZyYWN0aW9uIDEwMDAwICogTWF0aC5zaW4gQHNlZWQrK1xuXHRnciA6IC0+XG5cdFx0c2MgMSwxLDEsMC41XG5cdFx0Zm9yIGkgaW4gcmFuZ2UgMjFcblx0XHRcdGxpbmUgMCwgMTAgKiBpLCAyMDAsIDEwICogaVxuXHRcdFx0bGluZSAxMCAqIGksIDAsIDEwICogaSwgMjAwXG5cdFx0c2MgMSwxLDFcblx0XHRsaW5lIDEwMCwwLCAxMDAsMjAwXG5cdFx0bGluZSAwLDEwMCwgMjAwLDEwMFxuXHRkcmF3IDogLT5cblx0XHRAYnV0dG9uc1s0XVsyXSA9IEBsZXZlbCAtIEBoaXN0b3J5Lmxlbmd0aFxuXHRcdGJnIDBcblx0XHRAZ3IoKVxuXHRcdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXG5cdFx0dGV4dFNpemUgMjVcblx0XHRzYygpXG5cdFx0ZmMgMSwwLDBcblx0XHRjaXJjbGUgMTAwKzEwKkBiWzBdLCAxMDAtMTAqQGJbMV0sIDVcblx0XHRmYyAwLDEsMFxuXHRcdGNpcmNsZSAxMDArMTAqQGFbMF0sIDEwMC0xMCpAYVsxXSwgNFxuXHRcdGZvciBbeCx5LHR4dF0saSBpbiBAYnV0dG9uc1xuXHRcdFx0ZmMgMSwxLDAsMC40XG5cdFx0XHRjaXJjbGUgeCx5LEBSQURJVVNcblx0XHRcdGZjIDEsMSwwXG5cdFx0XHR0ZXh0IHR4dCx4LHlcblx0bmV3R2FtZSA6IC0+XG5cdFx0aWYgQGxldmVsID49IEBoaXN0b3J5Lmxlbmd0aCBhbmQgXy5pc0VxdWFsKEBhLEBiKSB0aGVuIGQ9MSBlbHNlIGQ9LTFcblx0XHRAbGV2ZWwgPSBjb25zdHJhaW4gQGxldmVsK2QsMSwxNlxuXHRcdEBjcmVhdGVHYW1lKClcblx0Y3JlYXRlR2FtZSA6IC0+XG5cdFx0QGhpc3RvcnkgPSBbXVxuXHRcdEBhID0gWy0xMCArIEByYW5kaW50KDIwKSwgLTEwICsgQHJhbmRpbnQoMjApXVxuXHRcdHExID0gW0BhXVxuXHRcdHEyID0gW11cblx0XHR2aXNpdGVkID0ge31cblx0XHR2aXNpdGVkW0BhXSA9IHRydWVcblx0XHRleHBhbmQgPSAobikgLT5cblx0XHRcdGlmIHZpc2l0ZWRbbl0gdGhlbiByZXR1cm5cblx0XHRcdGlmIG5bMF0qblswXSArIG5bMV0qblsxXSA+IDEwMDAgdGhlbiByZXR1cm5cblx0XHRcdHZpc2l0ZWRbbl0gPSB0cnVlXG5cdFx0XHRxMi5wdXNoIG5cblx0XHRmb3IgbGV2ZWwgaW4gcmFuZ2UgQGxldmVsXG5cdFx0XHRmb3IgW3gseV0gaW4gcTFcblx0XHRcdFx0ZXhwYW5kIFt5LHhdXG5cdFx0XHRcdGV4cGFuZCBbLXkseF1cblx0XHRcdFx0ZXhwYW5kIFsyKngsMip5XVxuXHRcdFx0XHRleHBhbmQgW3grMSx5XVxuXHRcdFx0cTEgPSBxMlxuXHRcdFx0cTIgPSBbXVxuXHRcdEBiID0gQHNlbGVjdFRhcmdldCBxMVxuXHRzZWxlY3RUYXJnZXQgOiAobHN0KSAtPiAjIHdpdGhpbiAyMXgyMSB3aW5kb3csIGlmIHBvc3NpYmxlXG5cdFx0YnMgPSAoW3gseV0gZm9yIFt4LHldIGluIGxzdCB3aGVuIC0xMCA8PSB4IDw9IDEwIGFuZCAtMTAgPD0geSA8PSAxMClcblx0XHRyZXR1cm4gYnNbQHJhbmRpbnQoYnMubGVuZ3RoKV0gaWYgYnMubGVuZ3RoID4gMFxuXHRcdF8ubWluIGxzdCwgKFt4LHldKSAtPiBkaXN0IDAsMCx4LHlcblx0dW5kbyA6IC0+XG5cdFx0aWYgQGhpc3RvcnkubGVuZ3RoID09IDAgdGhlbiByZXR1cm5cblx0XHRAYSA9IEBoaXN0b3J5LnBvcCgpXG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cblx0XHRpbmRleCA9IC0xXG5cdFx0Zm9yIFt4LHksdHh0XSxpIGluIEBidXR0b25zXG5cdFx0XHRpZiBkaXN0KG14LG15LHgseSkgPCBAUkFESVVTIHRoZW4gaW5kZXggPSBpXG5cdFx0W3gseV0gPSBAYVxuXHRcdGEgPSBbXVxuXHRcdGlmIGluZGV4ID09IDAgdGhlbiBhID0gW3kseF1cblx0XHRpZiBpbmRleCA9PSAxIHRoZW4gYSA9IFsteSx4XVxuXHRcdGlmIGluZGV4ID09IDIgdGhlbiBhID0gWzIqeCwyKnldXG5cdFx0aWYgaW5kZXggPT0gMyB0aGVuIGEgPSBbeCsxLHldXG5cdFx0aWYgaW5kZXggPT0gNCB0aGVuIEB1bmRvKClcblx0XHRpZiBpbmRleCA9PSA1IHRoZW4gQG5ld0dhbWUoKVxuXHRcdGlmIGEubGVuZ3RoICE9IDBcblx0XHRcdEBoaXN0b3J5LnB1c2ggQGFcblx0XHRcdEBhID0gYVxuXG5hcHAgPSBuZXcgQ29tcGxleCBcImFcIlxuXG5cIlwiXCJcblx0Yzpcblx0XHRhcHAgOiBcInJlc2V0KClcIlxuXHRlOlxuXHRcdFwiS29tcGxleGEgdGFsXCIgOiBcImh0dHA6Ly93d3cubWF0dGVib2tlbi5zZS9sZWt0aW9uZXIvbWF0dGUtNC9rb21wbGV4YS10YWwvcmFrbmEtbWVkLWtvbXBsZXhhLXRhbFwiXG5cblxuSURfQ29tcHV0ZXJIaXN0b3J5ID1cblx0djonMjAxOC0xMS0xNydcblx0azonJ1xuXHRsOjMzXG5cdGg6MVxuXHRiOlwiXCJcIlxuY2xhc3MgQ29tcHV0ZXJIaXN0b3J5IGV4dGVuZHMgQXBwbGljYXRpb25cblx0cmVzZXQgOiAtPlxuXHRcdHN1cGVyXG5cdFx0XHRcdFxuXHRkcmF3ICA6IC0+XG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cblxuYXBwID0gbmV3IENvbXB1dGVySGlzdG9yeVxuXCJcIlwiXG5cdGE6XCJcIlwiXG5cbmNsYXNzIENvbXB1dGVySGlzdG9yeSBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRcdEBzY3JlZW5zID0gW11cblx0XHRAaW5kZXggPSAwXG5cdFx0SHogPSAxXG5cdFx0a0h6ID0gMTAwMCpIelxuXHRcdE1IeiA9IDEwMDAqa0h6XG5cdFx0IyB5ZWFyIG5hbWUgUk9NIFJBTSBDbG9ja3NwZWVkXG5cdFx0QHNhdmUgMjAxNiwncDVEb2pvJywwLDMqNDAwMDAsJydcblx0XHRAc2F2ZSAxODQzLCdEaWZmZXJlbmNlIEVuZ2luZScsMCw4KjEyLjUsJzEgSHonXG5cdFx0QHNhdmUgMTk0MywnQ29sb3NzdXMnLDAsMCwnNSBrSHonXG5cdFx0QHNhdmUgMTk0NSwnRU5JQUMnLDAsMjUwMCwnNSBrSHonXG5cdFx0QHNhdmUgMTk0OSwnV2hpcmx3aW5kJywwLDIqMjA0OCwnMjAga0h6J1xuXHRcdEBzYXZlIDE5NTMsJ0JFU0snLDIqNSo0MDk2LDUqMTAyNCwnMjAga0h6J1xuXHRcdEBzYXZlIDE5NTQsJ0lCTSA3MDQnLDAsMTg0MzIsJzQga0h6J1xuXHRcdEBzYXZlIDE5NTksJ1BEUC0xJywwLDkyMTYsJzE4NyBrSHonXG5cdFx0QHNhdmUgMTk2NCwnSUJNIDM2MCcsMCw4KjEwMjQsJzM0LjUga0h6J1xuXHRcdEBzYXZlIDE5NjYsJ0Fwb2xsbyBNb29uIENhbGN1bGF0b3InLDIqMzY4NjQsMioyMDQ4LCcyIE1Ieidcblx0XHRAc2F2ZSAxOTcxLCdCdXNpY29tIDE0MS1QRicsNCoyNTYsMio0MCwnNzUwIGtIeidcblx0XHRAc2F2ZSAxOTcyLCdIUC0zNSBLYWxreWxhdG9yJywzKjMyMCw3KjcsJzIwMCBrSHonXG5cdFx0QHNhdmUgMTk3OCwnQUJDLTgwJywxNjM4NCwxNjM4NCwnMyBNSHonXG5cdFx0QHNhdmUgMTk4MSwnSUJNIFBDJyw4MTkyLDE2Mzg0LCc0Ljc3IE1Ieidcblx0XHRAc2F2ZSAyMDAzLCdBcmR1aW5vJywzMioxMDI0LDIqMTAyNCwnMjAgTUh6J1xuXHRcdCNAc2F2ZSAyMDE1LCdtaWNybzpiaXQnLDI1NioxMDI0LDE2KjEwMjQsJzE2IE1Ieidcblx0XHRcdFx0XG5cdGRyYXcgIDogLT5cblx0XHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxuXHRcdFt5ZWFyLHRpdGxlLHJvbSxyYW0sc3BlZWRdID0gQHNjcmVlbnNbQGluZGV4XVxuXHRcdGJnIDAuNVxuXG5cdFx0c2MgMSwxLDBcblx0XHRmb3IgaSBpbiByYW5nZSByb20vM1xuXHRcdFx0eCA9IGklJTIwMFxuXHRcdFx0eSA9IGkgLy8gMjAwXG5cdFx0XHRwb2ludCB4LHlcblxuXHRcdHNjIDEsMCwwXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgcmFtLzNcblx0XHRcdHggPSBpJSUyMDBcblx0XHRcdHkgPSAyMDAgLSBpIC8vIDIwMFxuXHRcdFx0cG9pbnQgeCx5XG5cblx0XHRmYyAwLDAsMFxuXHRcdHNjKClcblx0XHR0ZXh0U2l6ZSA2NFxuXHRcdHRleHQgeWVhciwxMDAsNDBcblx0XHR0ZXh0U2l6ZSAxOFxuXHRcdHRleHQgdGl0bGUsMTAwLDkwXG5cdFx0dGV4dFNpemUgMjBcblx0XHR0ZXh0IHJvbS50b1N0cmluZygpICsgXCIgYnl0ZXMgUk9NXCIsMTAwLDEyMFxuXHRcdHRleHQgcmFtLnRvU3RyaW5nKCkgKyBcIiBieXRlcyBSQU1cIiwxMDAsMTUwXG5cdFx0dGV4dCBzcGVlZCwxMDAsMTgwXG5cdFx0XHRcblx0c2F2ZSA6ICh5ZWFyLHRpdGxlLHJvbSxyYW0sc3BlZWQpIC0+XG5cdFx0QHNjcmVlbnMucHVzaCBbeWVhcix0aXRsZSxyb20scmFtLHNwZWVkXVxuXG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cblx0XHRpZiBteCA+IDEwMCB0aGVuIEBpbmRleCsrIGVsc2UgQGluZGV4LS1cblx0XHRAaW5kZXggPSBjb25zdHJhaW4gQGluZGV4LDAsQHNjcmVlbnMubGVuZ3RoLTFcblxuYXBwID0gbmV3IENvbXB1dGVySGlzdG9yeSAnYSdcblwiXCJcIlxuXHRjOlxuXHRcdGFwcCA6IFwicmVzZXQoKVwiXG5cdGU6XG5cdFx0XCJEaWZmZXJlbmNlIEVuZ2luZVwiIDogXCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EaWZmZXJlbmNlX2VuZ2luZVwiXG5cdFx0XCJDb2xvc3N1c1wiIDogXCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db2xvc3N1c19jb21wdXRlclwiXG5cdFx0XCJXaGlybHdpbmRcIiA6IFwiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2hpcmx3aW5kX0lcIlxuXHRcdFwiQkVTS1wiIDogXCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CRVNLXCJcblx0XHRcIklCTSA3MDRcIiA6IFwiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSUJNXzcwNFwiXG5cdFx0XCJFTklBQ1wiIDogXCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FTklBQ1wiXG5cdFx0XCJQRFAtMVwiIDogXCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QRFAtMVwiXG5cdFx0XCJJQk0gMzYwXCIgOiBcImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lCTV9TeXN0ZW0vMzYwXCJcblx0XHRcIkFwb2xsbyBNb29uIENhbGN1bGF0b3JcIiA6IFwiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQXBvbGxvX0d1aWRhbmNlX0NvbXB1dGVyXCJcblx0XHRcIkJ1c2ljb20gMTQxLVBGXCIgOiBcImh0dHA6Ly93d3cudmludGFnZWNhbGN1bGF0b3JzLmNvbS9odG1sL2J1c2ljb21fMTQxLXBmLmh0bWxcIlxuXHRcdFwiSFAtMzUgS2Fsa3lsYXRvclwiIDogXCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IUC0zNVwiXG5cdFx0XCJBQkMtODBcIiA6IFwiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQUJDXzgwXCJcblx0XHRcIklCTSBQQ1wiIDogXCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JQk1fUGVyc29uYWxfQ29tcHV0ZXJcIlxuXHRcdFwiQXJkdWlub1wiIDogXCJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BcmR1aW5vXCJcblx0XHRcIjgtYml0IG11c2ljIGlmdGtyeW9cIiA6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1zV2JscHNMWi1POFwiXG5cblxuSURfQ29ubmVjdDQgPVxuXHR2OicyMDE3LTA0LTI5J1xuXHRrOidvcGVyYXRvcnMgYmcgZmMgc2Mgc3cgY2lyY2xlIHJhbmdlIHRleHQgZm9yIGNsYXNzJ1xuXHRsOjMzXG5cdGg6MVxuXHRiOlwiXCJcIlxuY2xhc3MgQ29ubmVjdDQgZXh0ZW5kcyBBcHBsaWNhdGlvblxuXHRyZXNldCA6IC0+XG5cdFx0c3VwZXJcblx0ZHJhdyAgOiAtPlxuXHR1bmRvICA6IC0+XG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cbmFwcCA9IG5ldyBDb25uZWN0NFxuXHRcdFx0XCJcIlwiXG5cdGE6XCJcIlwiXG5jbGFzcyBDb25uZWN0NCBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRcdEBTSVpFID0gMjdcblx0XHRAbGlzdCA9IChbXSBmb3IgaSBpbiByYW5nZSA3KVxuXHRcdEBtb3ZlcyA9IFtdXG5cdGRyYXcgOiAtPlxuXHRcdGJnIDBcblx0XHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxuXHRcdHRleHRTaXplIEBTSVpFLzJcblx0XHRmYygpXG5cdFx0c2MgMC4xLDAuMywxXG5cdFx0c3cgMC4yICogQFNJWkVcblx0XHRmb3IgaSBpbiByYW5nZSA3XG5cdFx0XHRmb3IgaiBpbiByYW5nZSA2XG5cdFx0XHRcdGNpcmNsZSAxMDAtQFNJWkUqMytAU0laRSppLCAxODAtQFNJWkUqaiwgQFNJWkUvMlxuXHRcdGZvciBjb2x1bW4saSBpbiBAbGlzdFxuXHRcdFx0Zm9yIG5yLGogaW4gY29sdW1uXG5cdFx0XHRcdGZjIDEsbnIlMiwwXG5cdFx0XHRcdHN3IDFcblx0XHRcdFx0Y2lyY2xlIDEwMC1AU0laRSozK0BTSVpFKmksIDE4MC1AU0laRSpqLCBAU0laRSowLjRcblx0XHRcdFx0ZmMgMFxuXHRcdFx0XHRzYygpXG5cdFx0XHRcdHRleHQgbnIsIDEwMC1AU0laRSozK0BTSVpFKmksIDE4MC1AU0laRSpqXG5cdFx0c2MoKVxuXHRcdGZjIDEsKEBtb3Zlcy5sZW5ndGgrMSklMiwwXG5cdFx0Y2lyY2xlIDEwMCwxNSwxMFxuXHRtb3VzZVByZXNzZWQgOiAobXgsbXkpIC0+XG5cdFx0bnIgPSBpbnQgKG14LSgyMDAtNypAU0laRSkvMikvQFNJWkVcblx0XHRpZiAwIDw9IG5yIDw9IDZcblx0XHRcdEBtb3Zlcy5wdXNoIG5yXG5cdFx0XHRAbGlzdFtucl0ucHVzaCBAbW92ZXMubGVuZ3RoXG5cdHVuZG8gOiAtPiBpZiBAbW92ZXMubGVuZ3RoID4gMCB0aGVuIEBsaXN0W0Btb3Zlcy5wb3AoKV0ucG9wKClcblxuYXBwID0gbmV3IENvbm5lY3Q0IFwiYVwiXG5cIlwiXCJcblx0Yzpcblx0XHRhcHAgOiBcInJlc2V0KCl8dW5kbygpXCJcblx0ZTpcblx0XHRXaWtpcGVkaWEgOiBcImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nvbm5lY3RfRm91clwiXG5cbklEX0Nvb3JkaW5hdG9yID1cblx0djonMjAxOC0wNC0yMydcblx0azonc2MgZmMgY2lyY2xlIGNsYXNzIGRpc3QgaWYgb3BlcmF0b3JzIHRleHQnXG5cdGw6MzBcblx0aDozXG5cdGI6XCJcIlwiXG5jbGFzcyBDb29yZGluYXRvciBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRcdEBzZWVkID0gMFxuXHRkcmF3IDogLT5cblx0bW91c2VQcmVzc2VkIDogKG14LG15KSAtPlxuXHRyYW5kaW50IDogKG4pIC0+IGludCBuICogZnJhY3Rpb24gMTAwMDAgKiBNYXRoLnNpbiBAc2VlZCsrXG5hcHAgPSBuZXcgQ29vcmRpbmF0b3JcblwiXCJcIlxuXHRhOlwiXCJcIlxuXG5jbGFzcyBDb29yZGluYXRvciBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRcdEBzZWVkID0gMFxuXHRcdEBsZXZlbCA9IDFcblx0XHRAZXJyb3JzID0gMFxuXHRcdEBuZXdHYW1lIDBcblx0bmV3R2FtZSA6IChkKSAtPlxuXHRcdGlmIGQ9PS0xIHRoZW4gQGVycm9ycysrXG5cdFx0QGxldmVsID0gY29uc3RyYWluIEBsZXZlbCtkLCAxLCAxMDBcblx0XHRAcmFkaXVzID0gaW50IDEwMC9AbGV2ZWxcblx0XHRAeCA9IEByYW5kaW50IDIwMFxuXHRcdEB5ID0gQHJhbmRpbnQgMjAwXG5cdGRyYXcgOiAtPlxuXHRcdGZjIDEsMSwwXG5cdFx0c2MoKVxuXHRcdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXG5cdFx0dGV4dFNpemUgNTBcblx0XHR0ZXh0IEB4ICsgXCIsXCIgKyBAeSwxMDAsNTBcblx0XHRmYyAwLDEsMFxuXHRcdHRleHQgQGxldmVsLDY3LDE1MFxuXHRcdGZjIDEsMCwwXG5cdFx0dGV4dCBAZXJyb3JzLDEzMywxNTBcblx0XHRmYygpXG5cdFx0c2MgMSwxLDBcblx0XHRjaXJjbGUgMTAwLDEwMCxAcmFkaXVzXG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cblx0XHQjIEBzZWVkICs9IG14ICUgMTBcblx0XHRAbmV3R2FtZSBpZiBAcmFkaXVzID49IGRpc3QgbXgsbXksQHgsQHkgdGhlbiAxIGVsc2UgLTFcblx0cmFuZGludCA6IChuKSAtPiBpbnQgbiAqIGZyYWN0aW9uIDEwMDAwICogTWF0aC5zaW4gQHNlZWQrK1xuXG5hcHAgPSBuZXcgQ29vcmRpbmF0b3IgXCJhXCJcblwiXCJcIlxuXHRjOlxuXHRcdGFwcCA6IFwicmVzZXQoKVwiXG5cblxuSURfQ291bnRlciA9XG5cdHY6JzIwMTgtMDQtMjMnXG5cdGs6J2JnIGZjIHNjIHRleHQgb3BlcmF0b3JzIGNsYXNzJ1xuXHRsOjEyXG5cdGg6MFxuXHRiOlwiXCJcIlxuIyBLbGlja2EgcMOlIHJlc2V0KCkgZsO2ciBhdHQga29tbWEgaWfDpW5nIVxuIyBEZSBibMOlYSBrbmFwcGFybmEgYW5yb3BhciBtZXRvZGVyIGkgZGUgYsOlZGEgb2JqZWt0ZW5cblxuIyMjIyBtYXJrZXJhciBkZSByYWRlciBkdSB1dGfDpXIgaWZyw6VuLiBEZXNzYSBiw7ZyIGVqIMOkbmRyYXMuXG5cbmNsYXNzIENvdW50ZXIgZXh0ZW5kcyBBcHBsaWNhdGlvbiAjIyMjXG5cdFxuXHRyZXNldCA6IC0+ICAgICAgICAgICAgICAgICAgICAgICMjIyNcblx0XHRzdXBlciAgICAgICAgICAgICAgICAgICAgICAgICAjIyMjXG5cdFx0QGNvdW50ZXIgPSAwICAgICAgICAgICAgICAgXG5cdFx0XG5cdGRyYXcgIDogLT4gICAgICAgICAgICAgICAgICAgICAgIyMjI1xuXHRcdGJnIDAuNSAgICAgICAgICAgICAgICAgICAgIFxuXHRcdGZjIDEsMSwwICAgICAgICAgICAgICAgICAgIFxuXHRcdHNjKCkgICAgICAgICAgICAgICAgICAgICAgIFxuXHRcdHRleHRTaXplIDEwMCAgICAgICAgICAgICAgIFxuXHRcdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSICAgIFxuXHRcdHRleHQgQGNvdW50ZXIsMTAwLDEwMCAgICAgIFxuXHRcdFxuXHR1cCAgICA6IC0+ICAgICAgICAgICAgICAgICAgICAgICMjIyNcblx0XHRAY291bnRlcisrICAgICAgICBcblx0XHRcblx0ZG93biAgOiAtPiAgICAgICAgICAgICAgICAgICAgICAjIyMjXG5cdFx0QGNvdW50ZXItLSAgICAgICAgXG5cdFx0XG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT4gICAgICAgIyMjI1xuXHRcdGlmIG15IDwgMTAwICAgICAgICAgICAgICAgIFxuXHRcdFx0QHVwKCkgICAgICAgICAgICAgICAgICAgIFxuXHRcdGVsc2UgICAgICAgICAgICAgICAgICAgICAgIFxuXHRcdFx0QGRvd24oKSAgICAgICAgICAgICAgICAgIFxuXHRcdFx0XG5hcHAgPSBuZXcgQ291bnRlciAgICAgICAgICAgICAgICAgIyMjI1xuXCJcIlwiXG5cdGE6XCJcIlwiXG5jbGFzcyBDb3VudGVyIGV4dGVuZHMgQXBwbGljYXRpb25cblx0cmVzZXQgOiAtPlxuXHRcdHN1cGVyXG5cdFx0QGNvdW50ZXIgPSAwXG5cdHVwIDogLT4gQGNvdW50ZXIgKz0gMVxuXHRkb3duIDogLT4gQGNvdW50ZXIgLT0gMVxuXHRkcmF3IDogLT5cblx0XHRiZyAwLjVcblx0XHRmYyAxLDEsMFxuXHRcdHNjKClcblx0XHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxuXHRcdHRleHRTaXplIDEwMFxuXHRcdHRleHQgQGNvdW50ZXIsMTAwLDEwMFxuXHRtb3VzZVByZXNzZWQgOiAobXgsbXkpIC0+IEBjb3VudGVyICs9IGlmIG15IDwgMTAwIHRoZW4gMSBlbHNlIC0xXG5cbmFwcCA9IG5ldyBDb3VudGVyIFwiYVwiXG5cIlwiXCJcblx0Yzpcblx0XHRhcHAgOiBcInJlc2V0KCl8dXAoKXxkb3duKClcIlxuXG4iXX0=
//# sourceURL=c:\github\p5Dojo\coffee\data\C.coffee