// Generated by CoffeeScript 1.12.7
var ID_IndianSun, ID_Laboratorium, ID_Lerp, ID_Line, ID_LinearRegression, ID_Lines;

ID_Laboratorium = {
  v: '2017-04-29',
  k: '',
  l: 0,
  b: "# Här kan du laborera med egna idéer!\n\nclass Laboratorium extends Application\n	reset : ->\n		super\n		@x = 100\n		@y = 100\n		@command = \"Ge ett kommando!\"\n	draw  : ->\n		textAlign CENTER,CENTER\n		textSize 24\n		fc 1,1,0\n		sc()\n		text @command,@x,@y\n	mousePressed : (mx,my) ->\n	left  : -> @x -= 10\n	right : -> @x += 10\n	up    : -> @y -= 10\n	down  : -> @y += 10\n	a     : -> @command = \"a\"\n	b     : -> @command = \"b\"\n	c     : -> @command = \"c\"\n	d     : -> @command = \"d\"\n	e     : -> @command = int random 1,7\n	f     : -> @command = int millis()\napp = new Laboratorium",
  a: "class Laboratorium extends Application\n	reset : ->\n		super\n	draw : ->\n	mousePressed : (mx,my) ->\n	left : ->\n	right : ->\n	up : ->\n	down : ->\n	a : ->\n	b : ->\n	c : ->\n	d : ->\n	e : ->\n	f : ->\n\napp = new Laboratorium \"a\"",
  c: {
    app: "reset()|left()|right()|up()|down()|a()|b()|c()|d()|e()|f()"
  }
};

ID_Lerp = {
  v: '2017-05-18',
  k: '-> bg fc sc if text lerp operators',
  l: 1,
  b: "lerp = (a,b,i) -> 0\n\n# Ändra ingenting nedanför denna rad!\nbg 0\ny = 19\ntest = (a,b) ->\n	sc()\n	textSize 20\n	fc 0,1,0\n	text a, 0,y\n	if a==b then fc 0,1,0 else fc 1,0,0\n	text b, 100,y\n	y+=20\n\ntest 10, lerp 10,20,0\ntest 20, lerp 10,20,1\ntest 30, lerp 10,20,2\ntest 0,  lerp 10,20,-1\ntest 15, lerp 10,20,0.5\ntest 11, lerp 1,2,10\ntest 21, lerp 1,3,10\ntest -1, lerp 1,0,2\ntest 2,  lerp 10,9,8\ntest 0.4,lerp 0.1,0.2,3",
  e: {
    Matteboken: "https://www.matteboken.se/lektioner/matte-1/funktioner/linjara-funktioner"
  },
  a: "lerp = (a,b,i) -> a+(b-a)*i\n\n# Ändra ingenting nedanför denna rad!\nbg 0\ny = 19\ntest = (a,b) ->\n	sc()\n	textSize 20\n	fc 0,1,0\n	text a, 0,y\n	if a==b then fc 0,1,0 else fc 1,0,0\n	text b, 100,y\n	y+=20\n\ntest 10, lerp 10,20,0\ntest 20, lerp 10,20,1\ntest 30, lerp 10,20,2\ntest 0,  lerp 10,20,-1\ntest 15, lerp 10,20,0.5\ntest 11, lerp 1,2,10\ntest 21, lerp 1,3,10\ntest -1, lerp 1,0,2\ntest 2,  lerp 10,9,8\ntest 0.4,lerp 0.1,0.2,3"
};

ID_Line = {
  v: '2017-04-29',
  k: 'sc line',
  l: 2,
  b: "",
  a: "sc 1,1,0\nline 20,0, 200,20"
};

ID_IndianSun = {
  v: '2017-09-30',
  k: 'range line sin cos angleMode for if constrain operators class',
  l: 10,
  b: "class IndianSun extends Application\n	reset : ->\n		super\n	draw : ->\n	mousePressed : (mx,my) ->\napp = new IndianSun",
  a: "class IndianSun extends Application\n	reset : ->\n		super\n		@n = 5\n	draw : ->\n		angleMode DEGREES\n		points = ([100+100*cos(i * 360/@n), 100+100*sin(i * 360/@n)] for i in range @n)\n		for [x1,y1] in points\n			for [x2,y2] in points\n				line x1,y1,x2,y2\n	mousePressed : (mx,my) -> @n = constrain @n + (if my < 100 then 1 else -1), 3, 20\n\napp = new IndianSun \"a\"",
  c: {
    app: "reset()"
  },
  e: {
    Kojo: "http://www.kogics.net/codesketch?id=28"
  }
};

ID_LinearRegression = {
  v: '2017-11-03',
  k: 'class line [] for in',
  l: 33,
  b: "class LinearRegression extends Application\n	reset : ->\n		super\n	draw : ->\n	mousePressed : (mx,my) ->\napp = new LinearRegression",
  a: "class LinearRegression extends Application\n	reset : ->\n		super\n		@points = [] # [[20,100],[40,80],[60,140],[80,180],[100,140],[120,180],[140,200]]\n		@k=0\n		@m=0\n		@n=0\n		@r=0\n	draw : ->\n		sw 3\n		@n = @points.length\n		for [x,y] in @points\n			point x,y\n		if @n<2 then return \n		@linReg()\n		x1 = 0\n		x2 = 200\n		y1 = @k*x1+@m\n		y2 = @k*x2+@m\n		sw 1\n		line x1,y1,x2,y2\n	mousePressed : (mx,my) -> @points.push [mx,my]\n	linReg : ->\n		@sxy=@sx=@sy=@sxx=@syy=0\n		for [x,y] in @points\n			@sxy += x*y\n			@sx  += x\n			@sy  += y\n			@sxx += x*x\n			@syy += y*y\n		@k = (@n*@sxy - @sx*@sy) / (@n*@sxx - @sx*@sx)\n		@m = @sy/@n - @k*@sx/@n\n		@r = (@n * @sxy - @sx * @sy) / Math.sqrt((@n*@sxx - @sx**2) * (@n*@syy - @sy**2))\n\napp = new LinearRegression \"a\"",
  c: {
    app: "reset()"
  },
  e: {
    k_and_m: "images/k_and_m.gif",
    r: "images/r.PNG",
    "LinearRegression": "http://www.ollevejde.se/statistikord/regressionsanalys.htm"
  }
};

ID_Lines = {
  v: '2017-04-29',
  k: 'bg range for lerp line',
  l: 5,
  b: "# (Noel Watson)\n",
  a: "bg 0\nfor i in range 37\n	line 10,10, 190,10+i*5\n	line 10,100, 190,10+i*5\n	line 10,190, 190,10+i*5"
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTC5qcyIsInNvdXJjZVJvb3QiOiIuLlxcLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcZGF0YVxcTC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUE7O0FBQUEsZUFBQSxHQUNDO0VBQUEsQ0FBQSxFQUFFLFlBQUY7RUFDQSxDQUFBLEVBQUUsRUFERjtFQUVBLENBQUEsRUFBRSxDQUZGO0VBR0EsQ0FBQSxFQUFFLG9sQkFIRjtFQStCQSxDQUFBLEVBQUUsMk9BL0JGO0VBa0RBLENBQUEsRUFDQztJQUFBLEdBQUEsRUFBTSw0REFBTjtHQW5ERDs7O0FBcURELE9BQUEsR0FDQztFQUFBLENBQUEsRUFBRSxZQUFGO0VBQ0EsQ0FBQSxFQUFFLG9DQURGO0VBRUEsQ0FBQSxFQUFFLENBRkY7RUFHQSxDQUFBLEVBQUksaWJBSEo7RUE2QkEsQ0FBQSxFQUNDO0lBQUEsVUFBQSxFQUFhLDJFQUFiO0dBOUJEO0VBZ0NBLENBQUEsRUFBSSx5YkFoQ0o7OztBQTJERCxPQUFBLEdBQ0M7RUFBQSxDQUFBLEVBQUUsWUFBRjtFQUNBLENBQUEsRUFBRSxTQURGO0VBRUEsQ0FBQSxFQUFFLENBRkY7RUFHQSxDQUFBLEVBQUcsRUFISDtFQUlBLENBQUEsRUFBRyw2QkFKSDs7O0FBU0QsWUFBQSxHQUNDO0VBQUEsQ0FBQSxFQUFFLFlBQUY7RUFDQSxDQUFBLEVBQUUsK0RBREY7RUFFQSxDQUFBLEVBQUUsRUFGRjtFQUdBLENBQUEsRUFBRSx3SEFIRjtFQVdBLENBQUEsRUFBRSxtWEFYRjtFQTBCQSxDQUFBLEVBQ0M7SUFBQSxHQUFBLEVBQU0sU0FBTjtHQTNCRDtFQTRCQSxDQUFBLEVBQ0M7SUFBQSxJQUFBLEVBQU8sd0NBQVA7R0E3QkQ7OztBQWdDRCxtQkFBQSxHQUNDO0VBQUEsQ0FBQSxFQUFFLFlBQUY7RUFDQSxDQUFBLEVBQUUsc0JBREY7RUFFQSxDQUFBLEVBQUcsRUFGSDtFQUdBLENBQUEsRUFBRyxzSUFISDtFQVdBLENBQUEsRUFBRyxzd0JBWEg7RUFnREEsQ0FBQSxFQUNDO0lBQUEsR0FBQSxFQUFNLFNBQU47R0FqREQ7RUFrREEsQ0FBQSxFQUNDO0lBQUEsT0FBQSxFQUFVLG9CQUFWO0lBQ0EsQ0FBQSxFQUFJLGNBREo7SUFFQSxrQkFBQSxFQUFxQiw0REFGckI7R0FuREQ7OztBQXVERCxRQUFBLEdBQ0M7RUFBQSxDQUFBLEVBQUUsWUFBRjtFQUNBLENBQUEsRUFBRSx3QkFERjtFQUVBLENBQUEsRUFBRSxDQUZGO0VBR0EsQ0FBQSxFQUFFLG1CQUhGO0VBSUEsQ0FBQSxFQUFFLHNHQUpGIiwic291cmNlc0NvbnRlbnQiOlsiSURfTGFib3JhdG9yaXVtID1cblx0djonMjAxNy0wNC0yOSdcblx0azonJ1xuXHRsOjBcblx0YjpcIlwiXCJcbiMgSMOkciBrYW4gZHUgbGFib3JlcmEgbWVkIGVnbmEgaWTDqWVyIVxuXG5jbGFzcyBMYWJvcmF0b3JpdW0gZXh0ZW5kcyBBcHBsaWNhdGlvblxuXHRyZXNldCA6IC0+XG5cdFx0c3VwZXJcblx0XHRAeCA9IDEwMFxuXHRcdEB5ID0gMTAwXG5cdFx0QGNvbW1hbmQgPSBcIkdlIGV0dCBrb21tYW5kbyFcIlxuXHRkcmF3ICA6IC0+XG5cdFx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcblx0XHR0ZXh0U2l6ZSAyNFxuXHRcdGZjIDEsMSwwXG5cdFx0c2MoKVxuXHRcdHRleHQgQGNvbW1hbmQsQHgsQHlcblx0bW91c2VQcmVzc2VkIDogKG14LG15KSAtPlxuXHRsZWZ0ICA6IC0+IEB4IC09IDEwXG5cdHJpZ2h0IDogLT4gQHggKz0gMTBcblx0dXAgICAgOiAtPiBAeSAtPSAxMFxuXHRkb3duICA6IC0+IEB5ICs9IDEwXG5cdGEgICAgIDogLT4gQGNvbW1hbmQgPSBcImFcIlxuXHRiICAgICA6IC0+IEBjb21tYW5kID0gXCJiXCJcblx0YyAgICAgOiAtPiBAY29tbWFuZCA9IFwiY1wiXG5cdGQgICAgIDogLT4gQGNvbW1hbmQgPSBcImRcIlxuXHRlICAgICA6IC0+IEBjb21tYW5kID0gaW50IHJhbmRvbSAxLDdcblx0ZiAgICAgOiAtPiBAY29tbWFuZCA9IGludCBtaWxsaXMoKVxuYXBwID0gbmV3IExhYm9yYXRvcml1bVxuXCJcIlwiXG5cdGE6XCJcIlwiXG5jbGFzcyBMYWJvcmF0b3JpdW0gZXh0ZW5kcyBBcHBsaWNhdGlvblxuXHRyZXNldCA6IC0+XG5cdFx0c3VwZXJcblx0ZHJhdyA6IC0+XG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cblx0bGVmdCA6IC0+XG5cdHJpZ2h0IDogLT5cblx0dXAgOiAtPlxuXHRkb3duIDogLT5cblx0YSA6IC0+XG5cdGIgOiAtPlxuXHRjIDogLT5cblx0ZCA6IC0+XG5cdGUgOiAtPlxuXHRmIDogLT5cblxuYXBwID0gbmV3IExhYm9yYXRvcml1bSBcImFcIlxuXCJcIlwiXG5cdGM6XG5cdFx0YXBwIDogXCJyZXNldCgpfGxlZnQoKXxyaWdodCgpfHVwKCl8ZG93bigpfGEoKXxiKCl8YygpfGQoKXxlKCl8ZigpXCJcblxuSURfTGVycCA9XG5cdHY6JzIwMTctMDUtMTgnXG5cdGs6Jy0+IGJnIGZjIHNjIGlmIHRleHQgbGVycCBvcGVyYXRvcnMnXG5cdGw6MVxuXHRiIDogXCJcIlwiXG5sZXJwID0gKGEsYixpKSAtPiAwXG5cbiMgw4RuZHJhIGluZ2VudGluZyBuZWRhbmbDtnIgZGVubmEgcmFkIVxuYmcgMFxueSA9IDE5XG50ZXN0ID0gKGEsYikgLT5cblx0c2MoKVxuXHR0ZXh0U2l6ZSAyMFxuXHRmYyAwLDEsMFxuXHR0ZXh0IGEsIDAseVxuXHRpZiBhPT1iIHRoZW4gZmMgMCwxLDAgZWxzZSBmYyAxLDAsMFxuXHR0ZXh0IGIsIDEwMCx5XG5cdHkrPTIwXG5cbnRlc3QgMTAsIGxlcnAgMTAsMjAsMFxudGVzdCAyMCwgbGVycCAxMCwyMCwxXG50ZXN0IDMwLCBsZXJwIDEwLDIwLDJcbnRlc3QgMCwgIGxlcnAgMTAsMjAsLTFcbnRlc3QgMTUsIGxlcnAgMTAsMjAsMC41XG50ZXN0IDExLCBsZXJwIDEsMiwxMFxudGVzdCAyMSwgbGVycCAxLDMsMTBcbnRlc3QgLTEsIGxlcnAgMSwwLDJcbnRlc3QgMiwgIGxlcnAgMTAsOSw4XG50ZXN0IDAuNCxsZXJwIDAuMSwwLjIsM1xuXCJcIlwiXG5cdGU6XG5cdFx0TWF0dGVib2tlbiA6IFwiaHR0cHM6Ly93d3cubWF0dGVib2tlbi5zZS9sZWt0aW9uZXIvbWF0dGUtMS9mdW5rdGlvbmVyL2xpbmphcmEtZnVua3Rpb25lclwiXG5cblx0YSA6IFwiXCJcIlxubGVycCA9IChhLGIsaSkgLT4gYSsoYi1hKSppXG5cbiMgw4RuZHJhIGluZ2VudGluZyBuZWRhbmbDtnIgZGVubmEgcmFkIVxuYmcgMFxueSA9IDE5XG50ZXN0ID0gKGEsYikgLT5cblx0c2MoKVxuXHR0ZXh0U2l6ZSAyMFxuXHRmYyAwLDEsMFxuXHR0ZXh0IGEsIDAseVxuXHRpZiBhPT1iIHRoZW4gZmMgMCwxLDAgZWxzZSBmYyAxLDAsMFxuXHR0ZXh0IGIsIDEwMCx5XG5cdHkrPTIwXG5cbnRlc3QgMTAsIGxlcnAgMTAsMjAsMFxudGVzdCAyMCwgbGVycCAxMCwyMCwxXG50ZXN0IDMwLCBsZXJwIDEwLDIwLDJcbnRlc3QgMCwgIGxlcnAgMTAsMjAsLTFcbnRlc3QgMTUsIGxlcnAgMTAsMjAsMC41XG50ZXN0IDExLCBsZXJwIDEsMiwxMFxudGVzdCAyMSwgbGVycCAxLDMsMTBcbnRlc3QgLTEsIGxlcnAgMSwwLDJcbnRlc3QgMiwgIGxlcnAgMTAsOSw4XG50ZXN0IDAuNCxsZXJwIDAuMSwwLjIsM1xuXCJcIlwiXG5cbklEX0xpbmUgPVxuXHR2OicyMDE3LTA0LTI5J1xuXHRrOidzYyBsaW5lJ1xuXHRsOjJcblx0YjogXCJcIlxuXHRhOiBcIlwiXCJcbnNjIDEsMSwwXG5saW5lIDIwLDAsIDIwMCwyMFxuXCJcIlwiXG5cbklEX0luZGlhblN1biA9XG5cdHY6JzIwMTctMDktMzAnXG5cdGs6J3JhbmdlIGxpbmUgc2luIGNvcyBhbmdsZU1vZGUgZm9yIGlmIGNvbnN0cmFpbiBvcGVyYXRvcnMgY2xhc3MnXG5cdGw6MTBcblx0YjpcIlwiXCJcbmNsYXNzIEluZGlhblN1biBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRkcmF3IDogLT5cblx0bW91c2VQcmVzc2VkIDogKG14LG15KSAtPlxuYXBwID0gbmV3IEluZGlhblN1blxuXCJcIlwiXG5cdGE6XCJcIlwiXG5jbGFzcyBJbmRpYW5TdW4gZXh0ZW5kcyBBcHBsaWNhdGlvblxuXHRyZXNldCA6IC0+XG5cdFx0c3VwZXJcblx0XHRAbiA9IDVcblx0ZHJhdyA6IC0+XG5cdFx0YW5nbGVNb2RlIERFR1JFRVNcblx0XHRwb2ludHMgPSAoWzEwMCsxMDAqY29zKGkgKiAzNjAvQG4pLCAxMDArMTAwKnNpbihpICogMzYwL0BuKV0gZm9yIGkgaW4gcmFuZ2UgQG4pXG5cdFx0Zm9yIFt4MSx5MV0gaW4gcG9pbnRzXG5cdFx0XHRmb3IgW3gyLHkyXSBpbiBwb2ludHNcblx0XHRcdFx0bGluZSB4MSx5MSx4Mix5MlxuXHRtb3VzZVByZXNzZWQgOiAobXgsbXkpIC0+IEBuID0gY29uc3RyYWluIEBuICsgKGlmIG15IDwgMTAwIHRoZW4gMSBlbHNlIC0xKSwgMywgMjBcblxuYXBwID0gbmV3IEluZGlhblN1biBcImFcIlxuXCJcIlwiXG5cdGM6XG5cdFx0YXBwIDogXCJyZXNldCgpXCJcblx0ZTpcblx0XHRLb2pvIDogXCJodHRwOi8vd3d3LmtvZ2ljcy5uZXQvY29kZXNrZXRjaD9pZD0yOFwiXG5cblxuSURfTGluZWFyUmVncmVzc2lvbiA9XG5cdHY6JzIwMTctMTEtMDMnXG5cdGs6J2NsYXNzIGxpbmUgW10gZm9yIGluJ1xuXHRsOiAzM1xuXHRiOiBcIlwiXCJcbmNsYXNzIExpbmVhclJlZ3Jlc3Npb24gZXh0ZW5kcyBBcHBsaWNhdGlvblxuXHRyZXNldCA6IC0+XG5cdFx0c3VwZXJcblx0ZHJhdyA6IC0+XG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT5cbmFwcCA9IG5ldyBMaW5lYXJSZWdyZXNzaW9uXG5cdFwiXCJcIlxuXHRhOiBcIlwiXCJcbmNsYXNzIExpbmVhclJlZ3Jlc3Npb24gZXh0ZW5kcyBBcHBsaWNhdGlvblxuXHRyZXNldCA6IC0+XG5cdFx0c3VwZXJcblx0XHRAcG9pbnRzID0gW10gIyBbWzIwLDEwMF0sWzQwLDgwXSxbNjAsMTQwXSxbODAsMTgwXSxbMTAwLDE0MF0sWzEyMCwxODBdLFsxNDAsMjAwXV1cblx0XHRAaz0wXG5cdFx0QG09MFxuXHRcdEBuPTBcblx0XHRAcj0wXG5cdGRyYXcgOiAtPlxuXHRcdHN3IDNcblx0XHRAbiA9IEBwb2ludHMubGVuZ3RoXG5cdFx0Zm9yIFt4LHldIGluIEBwb2ludHNcblx0XHRcdHBvaW50IHgseVxuXHRcdGlmIEBuPDIgdGhlbiByZXR1cm4gXG5cdFx0QGxpblJlZygpXG5cdFx0eDEgPSAwXG5cdFx0eDIgPSAyMDBcblx0XHR5MSA9IEBrKngxK0BtXG5cdFx0eTIgPSBAayp4MitAbVxuXHRcdHN3IDFcblx0XHRsaW5lIHgxLHkxLHgyLHkyXG5cdG1vdXNlUHJlc3NlZCA6IChteCxteSkgLT4gQHBvaW50cy5wdXNoIFtteCxteV1cblx0bGluUmVnIDogLT5cblx0XHRAc3h5PUBzeD1Ac3k9QHN4eD1Ac3l5PTBcblx0XHRmb3IgW3gseV0gaW4gQHBvaW50c1xuXHRcdFx0QHN4eSArPSB4Knlcblx0XHRcdEBzeCAgKz0geFxuXHRcdFx0QHN5ICArPSB5XG5cdFx0XHRAc3h4ICs9IHgqeFxuXHRcdFx0QHN5eSArPSB5Knlcblx0XHRAayA9IChAbipAc3h5IC0gQHN4KkBzeSkgLyAoQG4qQHN4eCAtIEBzeCpAc3gpXG5cdFx0QG0gPSBAc3kvQG4gLSBAaypAc3gvQG5cblx0XHRAciA9IChAbiAqIEBzeHkgLSBAc3ggKiBAc3kpIC8gTWF0aC5zcXJ0KChAbipAc3h4IC0gQHN4KioyKSAqIChAbipAc3l5IC0gQHN5KioyKSlcblxuYXBwID0gbmV3IExpbmVhclJlZ3Jlc3Npb24gXCJhXCJcblwiXCJcIlx0XG5cdGM6XG5cdFx0YXBwIDogXCJyZXNldCgpXCJcblx0ZTpcblx0XHRrX2FuZF9tIDogXCJpbWFnZXMva19hbmRfbS5naWZcIlxuXHRcdHIgOiBcImltYWdlcy9yLlBOR1wiXG5cdFx0XCJMaW5lYXJSZWdyZXNzaW9uXCIgOiBcImh0dHA6Ly93d3cub2xsZXZlamRlLnNlL3N0YXRpc3Rpa29yZC9yZWdyZXNzaW9uc2FuYWx5cy5odG1cIlxuXG5JRF9MaW5lcyA9XG5cdHY6JzIwMTctMDQtMjknXG5cdGs6J2JnIHJhbmdlIGZvciBsZXJwIGxpbmUnXG5cdGw6NVxuXHRiOlwiIyAoTm9lbCBXYXRzb24pXFxuXCJcblx0YTpcIlwiXCJcbmJnIDBcbmZvciBpIGluIHJhbmdlIDM3XG5cdGxpbmUgMTAsMTAsIDE5MCwxMCtpKjVcblx0bGluZSAxMCwxMDAsIDE5MCwxMCtpKjVcblx0bGluZSAxMCwxOTAsIDE5MCwxMCtpKjVcblwiXCJcIlxuXG4iXX0=
//# sourceURL=C:\github\p5Dojo\coffee\data\L.coffee