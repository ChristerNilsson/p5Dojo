// Generated by CoffeeScript 1.11.1
var ID_Tetris, ID_TextA, ID_TextB, ID_TextC, ID_TextD, ID_Triangle, ID_TwoArcs, ID_TwoDiceHistogram, ID_TwoDiscsA, ID_TwoDiscsB;

ID_Tetris = {
  v: '2017-05-07',
  b: "# LOC:113 bg fc range # [] {} length Array fill splice for in rect if then else\n#         unshift while _.contains not class extends constructor new @ super ->\n\nclass Tetris extends Application\n	reset : -> super\n	draw  : ->\n	mousePressed : (mx,my) ->\napp = new Tetris",
  a: "class Tetris extends Application\n	reset : ->\n		super\n		@buttons = [[140,105,'-90'],[180,105,'+90'],[160,130,'dn'],[140,155,'lt'],[180,155,'rt'],[160,180,'sp'],[160,50,0]]\n		@seed = 0\n		@arena = (new Array(12).fill(0) for i in range 20)\n		@x=0\n		@y=0\n		@matrix = null\n		@score = 0\n		@playerReset()\n	draw : ->\n		bg 0\n		fc 0.5\n		rect 0,0,120,200\n		sc 0\n		@drawMatrix @arena, 0,0\n		@drawMatrix @matrix, @x,@y\n		@arenaSweep()\n		textSize 20\n		textAlign CENTER,CENTER\n		@buttons[6][2] = @score\n		for [x,y,txt],index in @buttons\n			fc 0.5\n			if index < 6 then circle x,y,15\n			fc 1,1,0\n			text txt,x,y\n	randint : (n) -> int n * fraction 10000 * Math.sin @seed++\n	mousePressed : (mx,my) ->\n		for [x,y,txt],index in @buttons\n			if dist(mx,my,x,y) < 15\n				if index==0 then @playerRotate -1 # -90\n				if index==1 then @playerRotate 1  # +90\n				if index==2 then @playerDown()    # DOWN\n				if index==3 then @playerMove -1   # LEFT\n				if index==4 then @playerMove 1    # RIGHT\n				if index==5 then @playerDrop()    # SPACE\n	arenaSweep : ->\n		for i in range @arena.length\n			y = 19-i\n			rad = @arena[y]\n			if not _.contains rad, 0\n				row = @arena.splice(y, 1)[0].fill 0\n				@arena.unshift row\n				@score++\n	playerRotate : (dir) ->\n		xpos = @x\n		offset = 1\n		@rotera @matrix, dir\n		while @collide()\n			@x += offset\n			offset = -(offset + (offset > 0 ? 1 : -1))\n			if offset > @matrix[0].length\n				@rotera @matrix, -dir\n				@x = xpos\n				return\n	playerReset : ->\n		pieces = 'TJLOSZI'\n		@matrix = @createPiece pieces[@randint pieces.length]\n		@y = 0\n		@x = (@arena[0].length / 2 | 0) - (@matrix[0].length / 2 | 0)\n		if @collide()\n			row.fill(0) for row in @arena\n			@score = 0\n	playerDown : ->\n		@y++\n		if @collide()\n			@y--\n			@merge()\n			@playerReset()\n			@arenaSweep()\n	playerDrop : ->\n		while not @collide()\n			@y++\n		@y--\n		@merge()\n		@playerReset()\n		@arenaSweep()\n	playerMove : (offset) ->\n		@x += offset\n		if @collide() then @x -= offset\n	merge : ->\n		for row,y in @matrix\n			for value,x in row\n				if value != 0 then @arena[y + @y][x + @x] = value\n	rotera : (matrix, dir) ->\n		for y in range matrix.length\n			for x in range y\n				[matrix[x][y], matrix[y][x]] = [matrix[y][x],matrix[x][y]]\n		if dir > 0\n			row.reverse() for row in matrix\n		else\n			matrix.reverse()\n	collide : ->\n		m = @matrix\n		for y in range m.length\n			for x in range m[y].length\n				if (m[y][x] != 0 and (@arena[y + @y] and @arena[y + @y][x + @x]) != 0) then return true\n		false\n	createPiece : (type) ->\n		if type == 'I' then [[0, 1, 0, 0],	[0, 1, 0, 0],	[0, 1, 0, 0],	[0, 1, 0, 0],]\n		else if type == 'L' then [[0, 2, 0],[0, 2, 0],[0, 2, 2],]\n		else if type == 'J' then [[0, 3, 0],[0, 3, 0],[3, 3, 0],]\n		else if type == 'O' then [[4, 4],[4, 4],]\n		else if type == 'Z' then [[5, 5, 0],[0, 5, 5],[0, 0, 0]]\n		else if type == 'S' then [[0, 6, 6],[6, 6, 0],[0, 0, 0]]\n		else if type == 'T' then [[0, 7, 0],[7, 7, 7],[0, 0, 0]]\n	drawMatrix : (matrix, xoff,yoff) ->\n		for row,y in matrix\n			for value,x in row\n				if value != 0\n					fcc value\n					rect 10*(x + xoff), 10*(y + yoff), 10,10\n\napp = new Tetris \"a\"",
  c: {
    app: "reset()"
  },
  e: {
    "Wikipedia": "https://en.wikipedia.org/wiki/Tetris",
    "Meth Meth Method": "https://www.youtube.com/watch?v=H2aW5V46khA"
  }
};

ID_TextA = {
  v: '2017-04-29',
  b: "# LOC:3 fc # textSize text\n",
  a: "fc 1,1,0\ntextSize 32\ntext 'Coffeescript',100,100"
};

ID_TextB = {
  v: '2017-04-29',
  b: "# LOC:7 bg fc sc sw # text textAlign textSize\n",
  a: "bg 1\nfc 1,1,0\nsc 0\nsw 5\ntextSize 100\ntextAlign CENTER,CENTER\ntext 'Coffeescript',100,100"
};

ID_TextC = {
  v: '2017-04-29',
  b: "# LOC:6 fc rd # text textAlign textSize translate\n",
  a: "fc 1,1,0\ntextSize 32\ntextAlign CENTER,CENTER\ntranslate 100,100\nrd 90\ntext 'Coffeescript',0,0"
};

ID_TextD = {
  v: '2017-04-29',
  b: "# LOC:6 fc rd # text textAlign textSize translate\n",
  a: "fc 1,1,0\ntextSize 32\ntextAlign CENTER,CENTER\ntranslate 100,100\nrd 180\ntext 'Coffeescript',0,0"
};

ID_Triangle = {
  v: '2017-04-29',
  b: "# LOC:2 fc # triangle\n",
  a: "fc 1\ntriangle 20,40, 160,100, 100,140"
};

ID_TwoArcs = {
  v: '2017-04-29',
  b: "# LOC:7 fc sc sw # arc radians strokeCap\n",
  a: "fc()\nsc 1,0,0\nsw 20\narc 100,70, 100,100, radians(-90),radians(90)\nsc 1,1,0\nstrokeCap SQUARE\narc 100,120, 100,100, radians(90),radians(-90)"
};

ID_TwoDiceHistogram = {
  v: '2017-04-29',
  b: "# LOC:22 bg fc sc range # Array fill length int random text textAlign if else for in ++ * / + - < rect []\n# OBS: PÃ¥ grund av random blir bitmapparna inte likadana",
  a: "counts = Array(11).fill 0\ndice = -> int 6 * random()\ntextAlign CENTER,CENTER\nfor i in range 1000\n	counts[dice() + dice()]++\nh = int 200/11\nbg 0\nfor count,i in counts\n	y = h*i\n	fc 1,1,0,0.5\n	sc 1,1,0\n	rect 0,y,count,h-3\n	fc 1,1,0\n	sc()\n	textAlign LEFT,CENTER\n	text i+2, 5,y+h/2\n	if count < 100\n		textAlign LEFT,CENTER\n		text count, count+5,y+h/2\n	else\n		textAlign RIGHT,CENTER\n		text count, count-5,y+h/2",
  e: {
    Animering: "https://www.openprocessing.org/sketch/124236"
  }
};

ID_TwoDiscsA = {
  v: '2017-04-29',
  b: "# LOC:4 circle fc\n",
  a: "fc 1,0,0\ncircle 80,100,40\nfc 0,1,0\ncircle 100,120,50"
};

ID_TwoDiscsB = {
  v: '2017-04-29',
  b: "# LOC:4 circle fc\n",
  a: "fc 1,0,0\ncircle 80,100,40\nfc 0,1,0, 0.5\ncircle 120,100,50"
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Dojo\coffee\data\T.coffee