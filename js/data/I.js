// Generated by CoffeeScript 1.11.1
var ID_IndianSun, ID_Isometric;

ID_IndianSun = {
  v: '2017-04-29',
  k: 'range line sin cos radians for if constrain operators class',
  l: 10,
  b: "class IndianSun extends Application\n	reset : ->\n		super\n	draw : ->\n	mousePressed : (mx,my) ->\napp = new IndianSun",
  a: "class IndianSun extends Application\n	reset : ->\n		super\n		@n = 5\n	draw : ->\n		points = ([100+100*cos(i*radians 360/@n), 100+100*sin(i*radians 360/@n)] for i in range @n)\n		for [x1,y1] in points\n			for [x2,y2] in points\n				line x1,y1,x2,y2\n	mousePressed : (mx,my) -> @n = constrain @n + (if my < 100 then 1 else -1), 3, 20\n\napp = new IndianSun \"a\"",
  c: {
    app: "reset()"
  },
  e: {
    Kojo: "http://www.kogics.net/codesketch?id=28"
  }
};

ID_Isometric = {
  v: '2017-05-20',
  k: 'bg sc fc range for if quad line operators class [] {}',
  l: 67,
  b: "class Isometric extends Application\n	reset : (@i=0.5, @j=0.75, @k=1, @alpha=1) ->\n	draw : ->\n	box : ->\n	sphere : ->\napp = new Isometric",
  a: "class Isometric extends Application\n	reset : (@i=0.5, @j=0.75, @k=1, @alpha=1) ->\n		@n=10\n		@dx=10\n		@dy=5\n		@blocks = {}\n		@w2 = 2*200/4\n		@w3 = 3*200/4\n		@w4 = 4*200/4\n		@r=1\n		@g=1\n		@b=1\n	setColor : (@r,@g,@b) ->\n	add : (i,j,k) -> @blocks[@n*@n*i+@n*j+k] = [@r,@g,@b]\n	draw : ->\n		bg 0.5\n		sc()\n		@drawBlock index for index in range @n*@n*@n\n	drawBlock : (index) ->\n		f = (i,j,k) =>\n			i = 10-i\n			j = 10-j\n			[@w2+i*@dx-2*j*@dy, @w4-j*@dy-i*@dx/2 - k*@dy*2]\n		q = (a,b,c,d) -> quad a[0],a[1], b[0],b[1], c[0],c[1], d[0],d[1]\n		block = @blocks[index]\n		if not block? then return\n		[r,g,b] = block\n		k = index % @n; index //= @n\n		j = index % @n; index //= @n\n		i = index\n		p0 = f i,  j,  k # egentligen osynlig\n		p1 = f i+1,j,  k\n		p2 = f i,  j+1,k\n		p3 = f i+1,j+1,k\n		p4 = f i  ,j,  k+1\n		p5 = f i+1,j,  k+1\n		p6 = f i  ,j+1,k+1\n		p7 = f i+1,j+1,k+1\n		fc r*@k,g*@k,b*@k,@alpha\n		q p4,p5,p7,p6 # roof\n		fc r*@j,g*@j,b*@j,@alpha\n		q p2,p6,p7,p3 # left\n		fc r*@i,g*@i,b*@i,@alpha\n		q p1,p3,p7,p5 # right\n	grid : ->\n		for i in range @n+1\n			line @w2+@dx*i, @w4-@dy*i,     @dx*i, @w3-@dy*i\n			line @w2-@dx*i, @w4-@dy*i, @w4-@dx*i, @w3-@dy*i\n	box : ->\n		@blocks = {}\n		for i in range @n\n			for j in range @n\n				for k in range @n\n					tot = 0\n					if i in [2,3,4,5,6,7] then tot++\n					if j in [2,3,4,5,6,7] then tot++\n					if k in [2,3,4,5,6,7] then tot++\n					if tot <= 1\n						@setColor i/10,j/10,k/10\n						@add i,j,k\n	sphere : ->\n		@blocks = {}\n		for i in range @n\n			for j in range @n\n				for k in range @n\n					@setColor i/(@n-1),j/(@n-1),k/(@n-1)\n					if (i-4.5)*(i-4.5) + (j-4.5)*(j-4.5) + (k-4.5)*(k-4.5) < 23 then @add i,j,k\n\napp = new Isometric \"a\"",
  c: {
    app: "reset()|box()|sphere()"
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSS5qcyIsInNvdXJjZVJvb3QiOiIuLlxcLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcZGF0YVxcSS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUE7O0FBQUEsWUFBQSxHQUNDO0VBQUEsQ0FBQSxFQUFFLFlBQUY7RUFDQSxDQUFBLEVBQUUsNkRBREY7RUFFQSxDQUFBLEVBQUUsRUFGRjtFQUdBLENBQUEsRUFBRSx3SEFIRjtFQVdBLENBQUEsRUFBRSwwV0FYRjtFQXlCQSxDQUFBLEVBQ0M7SUFBQSxHQUFBLEVBQU0sU0FBTjtHQTFCRDtFQTJCQSxDQUFBLEVBQ0M7SUFBQSxJQUFBLEVBQU8sd0NBQVA7R0E1QkQ7OztBQThCRCxZQUFBLEdBQ0M7RUFBQSxDQUFBLEVBQUUsWUFBRjtFQUNBLENBQUEsRUFBRSx1REFERjtFQUVBLENBQUEsRUFBRSxFQUZGO0VBR0EsQ0FBQSxFQUFFLDhJQUhGO0VBV0EsQ0FBQSxFQUFFLG9zREFYRjtFQWtGQSxDQUFBLEVBQ0M7SUFBQSxHQUFBLEVBQU0sd0JBQU47R0FuRkQiLCJzb3VyY2VzQ29udGVudCI6WyJJRF9JbmRpYW5TdW4gPVxuXHR2OicyMDE3LTA0LTI5J1xuXHRrOidyYW5nZSBsaW5lIHNpbiBjb3MgcmFkaWFucyBmb3IgaWYgY29uc3RyYWluIG9wZXJhdG9ycyBjbGFzcydcblx0bDoxMFxuXHRiOlwiXCJcIlxuY2xhc3MgSW5kaWFuU3VuIGV4dGVuZHMgQXBwbGljYXRpb25cblx0cmVzZXQgOiAtPlxuXHRcdHN1cGVyXG5cdGRyYXcgOiAtPlxuXHRtb3VzZVByZXNzZWQgOiAobXgsbXkpIC0+XG5hcHAgPSBuZXcgSW5kaWFuU3VuXG5cIlwiXCJcblx0YTpcIlwiXCJcbmNsYXNzIEluZGlhblN1biBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRcdEBuID0gNVxuXHRkcmF3IDogLT5cblx0XHRwb2ludHMgPSAoWzEwMCsxMDAqY29zKGkqcmFkaWFucyAzNjAvQG4pLCAxMDArMTAwKnNpbihpKnJhZGlhbnMgMzYwL0BuKV0gZm9yIGkgaW4gcmFuZ2UgQG4pXG5cdFx0Zm9yIFt4MSx5MV0gaW4gcG9pbnRzXG5cdFx0XHRmb3IgW3gyLHkyXSBpbiBwb2ludHNcblx0XHRcdFx0bGluZSB4MSx5MSx4Mix5MlxuXHRtb3VzZVByZXNzZWQgOiAobXgsbXkpIC0+IEBuID0gY29uc3RyYWluIEBuICsgKGlmIG15IDwgMTAwIHRoZW4gMSBlbHNlIC0xKSwgMywgMjBcblxuYXBwID0gbmV3IEluZGlhblN1biBcImFcIlxuXCJcIlwiXG5cdGM6XG5cdFx0YXBwIDogXCJyZXNldCgpXCJcblx0ZTpcblx0XHRLb2pvIDogXCJodHRwOi8vd3d3LmtvZ2ljcy5uZXQvY29kZXNrZXRjaD9pZD0yOFwiXG5cbklEX0lzb21ldHJpYyA9XG5cdHY6JzIwMTctMDUtMjAnXG5cdGs6J2JnIHNjIGZjIHJhbmdlIGZvciBpZiBxdWFkIGxpbmUgb3BlcmF0b3JzIGNsYXNzIFtdIHt9J1xuXHRsOjY3XG5cdGI6XCJcIlwiXG5jbGFzcyBJc29tZXRyaWMgZXh0ZW5kcyBBcHBsaWNhdGlvblxuXHRyZXNldCA6IChAaT0wLjUsIEBqPTAuNzUsIEBrPTEsIEBhbHBoYT0xKSAtPlxuXHRkcmF3IDogLT5cblx0Ym94IDogLT5cblx0c3BoZXJlIDogLT5cbmFwcCA9IG5ldyBJc29tZXRyaWNcblwiXCJcIlxuXHRhOlwiXCJcIlxuY2xhc3MgSXNvbWV0cmljIGV4dGVuZHMgQXBwbGljYXRpb25cblx0cmVzZXQgOiAoQGk9MC41LCBAaj0wLjc1LCBAaz0xLCBAYWxwaGE9MSkgLT5cblx0XHRAbj0xMFxuXHRcdEBkeD0xMFxuXHRcdEBkeT01XG5cdFx0QGJsb2NrcyA9IHt9XG5cdFx0QHcyID0gMioyMDAvNFxuXHRcdEB3MyA9IDMqMjAwLzRcblx0XHRAdzQgPSA0KjIwMC80XG5cdFx0QHI9MVxuXHRcdEBnPTFcblx0XHRAYj0xXG5cdHNldENvbG9yIDogKEByLEBnLEBiKSAtPlxuXHRhZGQgOiAoaSxqLGspIC0+IEBibG9ja3NbQG4qQG4qaStAbipqK2tdID0gW0ByLEBnLEBiXVxuXHRkcmF3IDogLT5cblx0XHRiZyAwLjVcblx0XHRzYygpXG5cdFx0QGRyYXdCbG9jayBpbmRleCBmb3IgaW5kZXggaW4gcmFuZ2UgQG4qQG4qQG5cblx0ZHJhd0Jsb2NrIDogKGluZGV4KSAtPlxuXHRcdGYgPSAoaSxqLGspID0+XG5cdFx0XHRpID0gMTAtaVxuXHRcdFx0aiA9IDEwLWpcblx0XHRcdFtAdzIraSpAZHgtMipqKkBkeSwgQHc0LWoqQGR5LWkqQGR4LzIgLSBrKkBkeSoyXVxuXHRcdHEgPSAoYSxiLGMsZCkgLT4gcXVhZCBhWzBdLGFbMV0sIGJbMF0sYlsxXSwgY1swXSxjWzFdLCBkWzBdLGRbMV1cblx0XHRibG9jayA9IEBibG9ja3NbaW5kZXhdXG5cdFx0aWYgbm90IGJsb2NrPyB0aGVuIHJldHVyblxuXHRcdFtyLGcsYl0gPSBibG9ja1xuXHRcdGsgPSBpbmRleCAlIEBuOyBpbmRleCAvLz0gQG5cblx0XHRqID0gaW5kZXggJSBAbjsgaW5kZXggLy89IEBuXG5cdFx0aSA9IGluZGV4XG5cdFx0cDAgPSBmIGksICBqLCAgayAjIGVnZW50bGlnZW4gb3N5bmxpZ1xuXHRcdHAxID0gZiBpKzEsaiwgIGtcblx0XHRwMiA9IGYgaSwgIGorMSxrXG5cdFx0cDMgPSBmIGkrMSxqKzEsa1xuXHRcdHA0ID0gZiBpICAsaiwgIGsrMVxuXHRcdHA1ID0gZiBpKzEsaiwgIGsrMVxuXHRcdHA2ID0gZiBpICAsaisxLGsrMVxuXHRcdHA3ID0gZiBpKzEsaisxLGsrMVxuXHRcdGZjIHIqQGssZypAayxiKkBrLEBhbHBoYVxuXHRcdHEgcDQscDUscDcscDYgIyByb29mXG5cdFx0ZmMgcipAaixnKkBqLGIqQGosQGFscGhhXG5cdFx0cSBwMixwNixwNyxwMyAjIGxlZnRcblx0XHRmYyByKkBpLGcqQGksYipAaSxAYWxwaGFcblx0XHRxIHAxLHAzLHA3LHA1ICMgcmlnaHRcblx0Z3JpZCA6IC0+XG5cdFx0Zm9yIGkgaW4gcmFuZ2UgQG4rMVxuXHRcdFx0bGluZSBAdzIrQGR4KmksIEB3NC1AZHkqaSwgICAgIEBkeCppLCBAdzMtQGR5Kmlcblx0XHRcdGxpbmUgQHcyLUBkeCppLCBAdzQtQGR5KmksIEB3NC1AZHgqaSwgQHczLUBkeSppXG5cdGJveCA6IC0+XG5cdFx0QGJsb2NrcyA9IHt9XG5cdFx0Zm9yIGkgaW4gcmFuZ2UgQG5cblx0XHRcdGZvciBqIGluIHJhbmdlIEBuXG5cdFx0XHRcdGZvciBrIGluIHJhbmdlIEBuXG5cdFx0XHRcdFx0dG90ID0gMFxuXHRcdFx0XHRcdGlmIGkgaW4gWzIsMyw0LDUsNiw3XSB0aGVuIHRvdCsrXG5cdFx0XHRcdFx0aWYgaiBpbiBbMiwzLDQsNSw2LDddIHRoZW4gdG90Kytcblx0XHRcdFx0XHRpZiBrIGluIFsyLDMsNCw1LDYsN10gdGhlbiB0b3QrK1xuXHRcdFx0XHRcdGlmIHRvdCA8PSAxXG5cdFx0XHRcdFx0XHRAc2V0Q29sb3IgaS8xMCxqLzEwLGsvMTBcblx0XHRcdFx0XHRcdEBhZGQgaSxqLGtcblx0c3BoZXJlIDogLT5cblx0XHRAYmxvY2tzID0ge31cblx0XHRmb3IgaSBpbiByYW5nZSBAblxuXHRcdFx0Zm9yIGogaW4gcmFuZ2UgQG5cblx0XHRcdFx0Zm9yIGsgaW4gcmFuZ2UgQG5cblx0XHRcdFx0XHRAc2V0Q29sb3IgaS8oQG4tMSksai8oQG4tMSksay8oQG4tMSlcblx0XHRcdFx0XHRpZiAoaS00LjUpKihpLTQuNSkgKyAoai00LjUpKihqLTQuNSkgKyAoay00LjUpKihrLTQuNSkgPCAyMyB0aGVuIEBhZGQgaSxqLGtcblxuYXBwID0gbmV3IElzb21ldHJpYyBcImFcIlxuXCJcIlwiXG5cdGM6XG5cdFx0YXBwIDogXCJyZXNldCgpfGJveCgpfHNwaGVyZSgpXCJcbiJdfQ==
//# sourceURL=C:\github\p5Dojo\coffee\data\I.coffee