// Generated by CoffeeScript 1.11.1
var ID_IndianSun, ID_Isometric;

ID_IndianSun = {
  v: '2017-04-29',
  k: 'range line sin cos radians for if constrain operators class',
  l: 10,
  b: "class IndianSun extends Application\n	reset : ->\n		super\n	draw : ->\n	mousePressed : (mx,my) ->\napp = new IndianSun",
  a: "class IndianSun extends Application\n	reset : ->\n		super\n		@n = 5\n	draw : ->\n		points = ([100+100*cos(i*radians 360/@n), 100+100*sin(i*radians 360/@n)] for i in range @n)\n		for [x1,y1] in points\n			for [x2,y2] in points\n				line x1,y1,x2,y2\n	mousePressed : (mx,my) -> @n = constrain @n + (if my < 100 then 1 else -1), 3, 20\n\napp = new IndianSun \"a\"",
  c: {
    app: "reset()"
  },
  e: {
    Kojo: "http://www.kogics.net/codesketch?id=28"
  }
};

ID_Isometric = {
  v: '2017-05-21',
  k: '_.findIndex _.isEqual arguments bg sc fc range for if quad line operators class [] {}',
  l: 73,
  b: "# @blocks: 0 ritas ej. 1 ritas med rgb från position. Övriga tas rgb från @colors.\nclass Isometric extends Application\n	reset : ->\n		super\n	draw : ->\n	box : ->\n	sphere : ->\napp = new Isometric",
  a: "class Isometric extends Application\n	reset : ->\n		super\n		@i=0.5\n		@j=0.75\n		@k=1\n		@alpha=1\n		@n=10\n		@dx=10\n		@dy=5\n		@w2 = 2*200/4\n		@w3 = 3*200/4\n		@w4 = 4*200/4\n		@clear()\n	clear : ->\n		@blocks = Array(1000).fill 0\n		@colors = [0,0]\n	add : (i,j,k,r,g,b) ->\n		index = 1\n		if arguments.length==6 then index = _.findIndex @colors, (rgb) => _.isEqual rgb,[r,g,b]\n		if index == -1\n			index = @colors.length\n			@colors.push [r,g,b]\n		@blocks[@n*@n*i+@n*j+k] = index\n	draw : ->\n		bg 0.5\n		sc()\n		@drawBlock index for index in range @n*@n*@n\n	drawBlock : (index) ->\n		f = (i,j,k) => [@w2+(10-i)*@dx-2*(10-j)*@dy, @w4-(10-j)*@dy-(10-i)*@dx/2 - k*@dy*2]\n		q = (a,b,c,d) -> quad a[0],a[1], b[0],b[1], c[0],c[1], d[0],d[1]\n		ix=index\n		k = ix % @n; ix //= @n\n		j = ix % @n; ix //= @n\n		i = ix\n		block = @blocks[index]\n		if not block? or block==0 then return\n		[r,g,b] = if block==1 then [i/9,j/9,k/9]	else @colors[block]\n		p0 = f i,  j,  k # egentligen osynlig\n		p1 = f i+1,j,  k\n		p2 = f i,  j+1,k\n		p3 = f i+1,j+1,k\n		p4 = f i  ,j,  k+1\n		p5 = f i+1,j,  k+1\n		p6 = f i  ,j+1,k+1\n		p7 = f i+1,j+1,k+1\n		fc r*@k,g*@k,b*@k,@alpha\n		q p4,p5,p7,p6 # roof\n		fc r*@j,g*@j,b*@j,@alpha\n		q p2,p6,p7,p3 # left\n		fc r*@i,g*@i,b*@i,@alpha\n		q p1,p3,p7,p5 # right\n	grid : ->\n		for i in range @n+1\n			line @w2+@dx*i, @w4-@dy*i,     @dx*i, @w3-@dy*i\n			line @w2-@dx*i, @w4-@dy*i, @w4-@dx*i, @w3-@dy*i\n	box : ->\n		@clear()\n		for i in range @n\n			for j in range @n\n				for k in range @n\n					tot = 0\n					if i in [2,3,4,5,6,7] then tot++\n					if j in [2,3,4,5,6,7] then tot++\n					if k in [2,3,4,5,6,7] then tot++\n					if tot <= 1 then @add i,j,k\n	sphere : ->\n		@clear()\n		for i in range @n\n			for j in range @n\n				for k in range @n\n					if (i-4.5)*(i-4.5) + (j-4.5)*(j-4.5) + (k-4.5)*(k-4.5) < 23 then @add i,j,k, 1,0,0\napp = new Isometric \"a\"\n",
  c: {
    app: "reset()|box()|sphere()"
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSS5qcyIsInNvdXJjZVJvb3QiOiIuLlxcLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcZGF0YVxcSS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUE7O0FBQUEsWUFBQSxHQUNDO0VBQUEsQ0FBQSxFQUFFLFlBQUY7RUFDQSxDQUFBLEVBQUUsNkRBREY7RUFFQSxDQUFBLEVBQUUsRUFGRjtFQUdBLENBQUEsRUFBRSx3SEFIRjtFQVdBLENBQUEsRUFBRSwwV0FYRjtFQXlCQSxDQUFBLEVBQ0M7SUFBQSxHQUFBLEVBQU0sU0FBTjtHQTFCRDtFQTJCQSxDQUFBLEVBQ0M7SUFBQSxJQUFBLEVBQU8sd0NBQVA7R0E1QkQ7OztBQThCRCxZQUFBLEdBQ0M7RUFBQSxDQUFBLEVBQUUsWUFBRjtFQUNBLENBQUEsRUFBRSx1RkFERjtFQUVBLENBQUEsRUFBRSxFQUZGO0VBR0EsQ0FBQSxFQUFFLHlNQUhGO0VBYUEsQ0FBQSxFQUFFLDYyREFiRjtFQXlGQSxDQUFBLEVBQ0M7SUFBQSxHQUFBLEVBQU0sd0JBQU47R0ExRkQiLCJzb3VyY2VzQ29udGVudCI6WyJJRF9JbmRpYW5TdW4gPVxuXHR2OicyMDE3LTA0LTI5J1xuXHRrOidyYW5nZSBsaW5lIHNpbiBjb3MgcmFkaWFucyBmb3IgaWYgY29uc3RyYWluIG9wZXJhdG9ycyBjbGFzcydcblx0bDoxMFxuXHRiOlwiXCJcIlxuY2xhc3MgSW5kaWFuU3VuIGV4dGVuZHMgQXBwbGljYXRpb25cblx0cmVzZXQgOiAtPlxuXHRcdHN1cGVyXG5cdGRyYXcgOiAtPlxuXHRtb3VzZVByZXNzZWQgOiAobXgsbXkpIC0+XG5hcHAgPSBuZXcgSW5kaWFuU3VuXG5cIlwiXCJcblx0YTpcIlwiXCJcbmNsYXNzIEluZGlhblN1biBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRcdEBuID0gNVxuXHRkcmF3IDogLT5cblx0XHRwb2ludHMgPSAoWzEwMCsxMDAqY29zKGkqcmFkaWFucyAzNjAvQG4pLCAxMDArMTAwKnNpbihpKnJhZGlhbnMgMzYwL0BuKV0gZm9yIGkgaW4gcmFuZ2UgQG4pXG5cdFx0Zm9yIFt4MSx5MV0gaW4gcG9pbnRzXG5cdFx0XHRmb3IgW3gyLHkyXSBpbiBwb2ludHNcblx0XHRcdFx0bGluZSB4MSx5MSx4Mix5MlxuXHRtb3VzZVByZXNzZWQgOiAobXgsbXkpIC0+IEBuID0gY29uc3RyYWluIEBuICsgKGlmIG15IDwgMTAwIHRoZW4gMSBlbHNlIC0xKSwgMywgMjBcblxuYXBwID0gbmV3IEluZGlhblN1biBcImFcIlxuXCJcIlwiXG5cdGM6XG5cdFx0YXBwIDogXCJyZXNldCgpXCJcblx0ZTpcblx0XHRLb2pvIDogXCJodHRwOi8vd3d3LmtvZ2ljcy5uZXQvY29kZXNrZXRjaD9pZD0yOFwiXG5cbklEX0lzb21ldHJpYyA9XG5cdHY6JzIwMTctMDUtMjEnXG5cdGs6J18uZmluZEluZGV4IF8uaXNFcXVhbCBhcmd1bWVudHMgYmcgc2MgZmMgcmFuZ2UgZm9yIGlmIHF1YWQgbGluZSBvcGVyYXRvcnMgY2xhc3MgW10ge30nXG5cdGw6NzNcblx0YjpcIlwiXCJcbiMgQGJsb2NrczogMCByaXRhcyBlai4gMSByaXRhcyBtZWQgcmdiIGZyw6VuIHBvc2l0aW9uLiDDlnZyaWdhIHRhcyByZ2IgZnLDpW4gQGNvbG9ycy5cbmNsYXNzIElzb21ldHJpYyBleHRlbmRzIEFwcGxpY2F0aW9uXG5cdHJlc2V0IDogLT5cblx0XHRzdXBlclxuXHRkcmF3IDogLT5cblx0Ym94IDogLT5cblx0c3BoZXJlIDogLT5cbmFwcCA9IG5ldyBJc29tZXRyaWNcblwiXCJcIlxuXHRhOlwiXCJcIlxuY2xhc3MgSXNvbWV0cmljIGV4dGVuZHMgQXBwbGljYXRpb25cblx0cmVzZXQgOiAtPlxuXHRcdHN1cGVyXG5cdFx0QGk9MC41XG5cdFx0QGo9MC43NVxuXHRcdEBrPTFcblx0XHRAYWxwaGE9MVxuXHRcdEBuPTEwXG5cdFx0QGR4PTEwXG5cdFx0QGR5PTVcblx0XHRAdzIgPSAyKjIwMC80XG5cdFx0QHczID0gMyoyMDAvNFxuXHRcdEB3NCA9IDQqMjAwLzRcblx0XHRAY2xlYXIoKVxuXHRjbGVhciA6IC0+XG5cdFx0QGJsb2NrcyA9IEFycmF5KDEwMDApLmZpbGwgMFxuXHRcdEBjb2xvcnMgPSBbMCwwXVxuXHRhZGQgOiAoaSxqLGsscixnLGIpIC0+XG5cdFx0aW5kZXggPSAxXG5cdFx0aWYgYXJndW1lbnRzLmxlbmd0aD09NiB0aGVuIGluZGV4ID0gXy5maW5kSW5kZXggQGNvbG9ycywgKHJnYikgPT4gXy5pc0VxdWFsIHJnYixbcixnLGJdXG5cdFx0aWYgaW5kZXggPT0gLTFcblx0XHRcdGluZGV4ID0gQGNvbG9ycy5sZW5ndGhcblx0XHRcdEBjb2xvcnMucHVzaCBbcixnLGJdXG5cdFx0QGJsb2Nrc1tAbipAbippK0BuKmora10gPSBpbmRleFxuXHRkcmF3IDogLT5cblx0XHRiZyAwLjVcblx0XHRzYygpXG5cdFx0QGRyYXdCbG9jayBpbmRleCBmb3IgaW5kZXggaW4gcmFuZ2UgQG4qQG4qQG5cblx0ZHJhd0Jsb2NrIDogKGluZGV4KSAtPlxuXHRcdGYgPSAoaSxqLGspID0+IFtAdzIrKDEwLWkpKkBkeC0yKigxMC1qKSpAZHksIEB3NC0oMTAtaikqQGR5LSgxMC1pKSpAZHgvMiAtIGsqQGR5KjJdXG5cdFx0cSA9IChhLGIsYyxkKSAtPiBxdWFkIGFbMF0sYVsxXSwgYlswXSxiWzFdLCBjWzBdLGNbMV0sIGRbMF0sZFsxXVxuXHRcdGl4PWluZGV4XG5cdFx0ayA9IGl4ICUgQG47IGl4IC8vPSBAblxuXHRcdGogPSBpeCAlIEBuOyBpeCAvLz0gQG5cblx0XHRpID0gaXhcblx0XHRibG9jayA9IEBibG9ja3NbaW5kZXhdXG5cdFx0aWYgbm90IGJsb2NrPyBvciBibG9jaz09MCB0aGVuIHJldHVyblxuXHRcdFtyLGcsYl0gPSBpZiBibG9jaz09MSB0aGVuIFtpLzksai85LGsvOV1cdGVsc2UgQGNvbG9yc1tibG9ja11cblx0XHRwMCA9IGYgaSwgIGosICBrICMgZWdlbnRsaWdlbiBvc3lubGlnXG5cdFx0cDEgPSBmIGkrMSxqLCAga1xuXHRcdHAyID0gZiBpLCAgaisxLGtcblx0XHRwMyA9IGYgaSsxLGorMSxrXG5cdFx0cDQgPSBmIGkgICxqLCAgaysxXG5cdFx0cDUgPSBmIGkrMSxqLCAgaysxXG5cdFx0cDYgPSBmIGkgICxqKzEsaysxXG5cdFx0cDcgPSBmIGkrMSxqKzEsaysxXG5cdFx0ZmMgcipAayxnKkBrLGIqQGssQGFscGhhXG5cdFx0cSBwNCxwNSxwNyxwNiAjIHJvb2Zcblx0XHRmYyByKkBqLGcqQGosYipAaixAYWxwaGFcblx0XHRxIHAyLHA2LHA3LHAzICMgbGVmdFxuXHRcdGZjIHIqQGksZypAaSxiKkBpLEBhbHBoYVxuXHRcdHEgcDEscDMscDcscDUgIyByaWdodFxuXHRncmlkIDogLT5cblx0XHRmb3IgaSBpbiByYW5nZSBAbisxXG5cdFx0XHRsaW5lIEB3MitAZHgqaSwgQHc0LUBkeSppLCAgICAgQGR4KmksIEB3My1AZHkqaVxuXHRcdFx0bGluZSBAdzItQGR4KmksIEB3NC1AZHkqaSwgQHc0LUBkeCppLCBAdzMtQGR5Kmlcblx0Ym94IDogLT5cblx0XHRAY2xlYXIoKVxuXHRcdGZvciBpIGluIHJhbmdlIEBuXG5cdFx0XHRmb3IgaiBpbiByYW5nZSBAblxuXHRcdFx0XHRmb3IgayBpbiByYW5nZSBAblxuXHRcdFx0XHRcdHRvdCA9IDBcblx0XHRcdFx0XHRpZiBpIGluIFsyLDMsNCw1LDYsN10gdGhlbiB0b3QrK1xuXHRcdFx0XHRcdGlmIGogaW4gWzIsMyw0LDUsNiw3XSB0aGVuIHRvdCsrXG5cdFx0XHRcdFx0aWYgayBpbiBbMiwzLDQsNSw2LDddIHRoZW4gdG90Kytcblx0XHRcdFx0XHRpZiB0b3QgPD0gMSB0aGVuIEBhZGQgaSxqLGtcblx0c3BoZXJlIDogLT5cblx0XHRAY2xlYXIoKVxuXHRcdGZvciBpIGluIHJhbmdlIEBuXG5cdFx0XHRmb3IgaiBpbiByYW5nZSBAblxuXHRcdFx0XHRmb3IgayBpbiByYW5nZSBAblxuXHRcdFx0XHRcdGlmIChpLTQuNSkqKGktNC41KSArIChqLTQuNSkqKGotNC41KSArIChrLTQuNSkqKGstNC41KSA8IDIzIHRoZW4gQGFkZCBpLGosaywgMSwwLDBcbmFwcCA9IG5ldyBJc29tZXRyaWMgXCJhXCJcblxuXCJcIlwiXG5cdGM6XG5cdFx0YXBwIDogXCJyZXNldCgpfGJveCgpfHNwaGVyZSgpXCJcbiJdfQ==
//# sourceURL=C:\github\p5Dojo\coffee\data\I.coffee